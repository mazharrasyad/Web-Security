1
00:00:11,750 --> 00:00:14,510
welcome to module<font color="#CCCCCC"> 2 this</font><font color="#E5E5E5"> module is</font>

2
00:00:14,510 --> 00:00:16,100
designed<font color="#E5E5E5"> as an introduction to data</font>

3
00:00:16,100 --> 00:00:20,770
<font color="#CCCCCC">hiding what</font><font color="#E5E5E5"> specifically</font><font color="#CCCCCC"> is data hiding</font>

4
00:00:20,770 --> 00:00:23,420
the term was coined for<font color="#E5E5E5"> placing data in</font>

5
00:00:23,420 --> 00:00:25,040
a directory<font color="#E5E5E5"> which is apparently</font>

6
00:00:25,040 --> 00:00:27,770
inaccessible for the normal user the

7
00:00:27,770 --> 00:00:29,509
data is<font color="#E5E5E5"> not protected by any other</font>

8
00:00:29,509 --> 00:00:32,659
attack<font color="#CCCCCC"> prevention method the</font><font color="#E5E5E5"> only</font>

9
00:00:32,659 --> 00:00:34,940
security offered by data hiding<font color="#E5E5E5"> is it's</font>

10
00:00:34,940 --> 00:00:37,040
<font color="#CCCCCC">apparent obscurity the exact</font><font color="#E5E5E5"> location of</font>

11
00:00:37,040 --> 00:00:39,350
<font color="#CCCCCC">the</font><font color="#E5E5E5"> data is unknown what could go wrong</font>

12
00:00:39,350 --> 00:00:41,899
as we can easily<font color="#E5E5E5"> imagine</font><font color="#CCCCCC"> data</font><font color="#E5E5E5"> hiding is</font>

13
00:00:41,899 --> 00:00:44,060
far<font color="#E5E5E5"> from safe anyone who discovers the</font>

14
00:00:44,060 --> 00:00:46,010
directories<font color="#E5E5E5"> either intentionally or</font><font color="#CCCCCC"> by</font>

15
00:00:46,010 --> 00:00:48,650
accident<font color="#CCCCCC"> may access hidden confidential</font>

16
00:00:48,650 --> 00:00:52,940
data we may compare<font color="#E5E5E5"> data hiding to</font>

17
00:00:52,940 --> 00:00:55,790
burying a treasure in your<font color="#CCCCCC"> backyard</font><font color="#E5E5E5"> if</font>

18
00:00:55,790 --> 00:00:57,860
someone knows the treasure is there or

19
00:00:57,860 --> 00:01:00,650
discovers it<font color="#E5E5E5"> purely by accident</font><font color="#CCCCCC"> they may</font>

20
00:01:00,650 --> 00:01:04,129
dig it up<font color="#E5E5E5"> and take it</font><font color="#CCCCCC"> the same may be</font>

21
00:01:04,129 --> 00:01:07,400
said of web applications<font color="#E5E5E5"> if we hide data</font>

22
00:01:07,400 --> 00:01:10,610
in this<font color="#E5E5E5"> way</font><font color="#CCCCCC"> and by hiding we simply mean</font>

23
00:01:10,610 --> 00:01:12,530
<font color="#CCCCCC">the links aren't viewable</font><font color="#E5E5E5"> or published</font>

24
00:01:12,530 --> 00:01:17,120
the information<font color="#CCCCCC"> is still</font><font color="#E5E5E5"> not safe data</font>

25
00:01:17,120 --> 00:01:19,100
hiding<font color="#E5E5E5"> is very</font><font color="#CCCCCC"> often used in conjunction</font>

26
00:01:19,100 --> 00:01:21,620
<font color="#E5E5E5">with the robots.txt file</font>

27
00:01:21,620 --> 00:01:23,720
the<font color="#E5E5E5"> robots protocol prevents web</font><font color="#CCCCCC"> robots</font>

28
00:01:23,720 --> 00:01:26,150
<font color="#E5E5E5">used by search engines from accidentally</font>

29
00:01:26,150 --> 00:01:29,090
indexing or categorizing data<font color="#E5E5E5"> we'd like</font>

30
00:01:29,090 --> 00:01:30,710
them to<font color="#E5E5E5"> ignore</font><font color="#CCCCCC"> here's what the file</font>

31
00:01:30,710 --> 00:01:33,190
could look like

32
00:01:50,259 --> 00:01:55,789
as we can see the file contains

33
00:01:55,789 --> 00:01:57,500
instructions<font color="#E5E5E5"> specifying which</font>

34
00:01:57,500 --> 00:01:59,840
directories<font color="#E5E5E5"> and their contents should be</font>

35
00:01:59,840 --> 00:02:06,439
ignored<font color="#E5E5E5"> by web crawlers unfortunately</font>

36
00:02:06,439 --> 00:02:08,929
the file<font color="#E5E5E5"> is quite often used</font><font color="#CCCCCC"> to describe</font>

37
00:02:08,929 --> 00:02:10,880
locations containing confidential

38
00:02:10,880 --> 00:02:16,310
website data many website developers

39
00:02:16,310 --> 00:02:18,769
believe<font color="#E5E5E5"> that storing such data in</font>

40
00:02:18,769 --> 00:02:21,019
robots.txt will prevent them<font color="#E5E5E5"> from being</font>

41
00:02:21,019 --> 00:02:26,600
leaked<font color="#E5E5E5"> by accident robots.txt is purely</font>

42
00:02:26,600 --> 00:02:29,330
informative<font color="#E5E5E5"> relying on bots to cooperate</font>

43
00:02:29,330 --> 00:02:31,910
and honor the instruction<font color="#E5E5E5"> to not index</font>

44
00:02:31,910 --> 00:02:34,430
specified directories it is however not

45
00:02:34,430 --> 00:02:37,750
<font color="#E5E5E5">taken into</font><font color="#CCCCCC"> account by web servers</font>

46
00:02:37,750 --> 00:02:40,850
<font color="#E5E5E5">additionally as you can see any user may</font>

47
00:02:40,850 --> 00:02:45,019
access<font color="#E5E5E5"> the robots file if we put</font>

48
00:02:45,019 --> 00:02:47,120
confidential information<font color="#CCCCCC"> such</font><font color="#E5E5E5"> as data</font>

49
00:02:47,120 --> 00:02:50,090
<font color="#E5E5E5">location in robots.txt we practically</font>

50
00:02:50,090 --> 00:02:52,280
invite and in<font color="#CCCCCC"> tacker to try and steal</font>

51
00:02:52,280 --> 00:02:56,780
them the example shows<font color="#E5E5E5"> two specified</font>

52
00:02:56,780 --> 00:02:59,180
paths<font color="#E5E5E5"> which should not be accessed by</font>

53
00:02:59,180 --> 00:03:03,170
web robots the directories admin and

54
00:03:03,170 --> 00:03:07,100
data<font color="#E5E5E5"> a lot of potentially interesting</font>

55
00:03:07,100 --> 00:03:11,239
<font color="#E5E5E5">data may be stored</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> let's see</font>

56
00:03:11,239 --> 00:03:13,630
what's inside

57
00:03:16,810 --> 00:03:20,080
<font color="#E5E5E5">as we can see after we have typed in the</font>

58
00:03:20,080 --> 00:03:22,959
<font color="#CCCCCC">path</font><font color="#E5E5E5"> a page opens we may browse it</font>

59
00:03:22,959 --> 00:03:27,340
<font color="#CCCCCC">freely this</font><font color="#E5E5E5"> is the essence of the data</font>

60
00:03:27,340 --> 00:03:29,560
hiding process<font color="#E5E5E5"> the method</font><font color="#CCCCCC"> doesn't give</font>

61
00:03:29,560 --> 00:03:31,660
you a link to<font color="#E5E5E5"> the page</font><font color="#CCCCCC"> but if</font><font color="#E5E5E5"> its</font>

62
00:03:31,660 --> 00:03:33,489
location becomes known it<font color="#E5E5E5"> may be</font>

63
00:03:33,489 --> 00:03:36,880
accessed without trouble it's the same

64
00:03:36,880 --> 00:03:48,340
for the other directory after you type

65
00:03:48,340 --> 00:03:50,470
in the path<font color="#E5E5E5"> you may access all data</font>

66
00:03:50,470 --> 00:03:54,810
<font color="#E5E5E5">which in theory should remain restricted</font>

67
00:03:55,170 --> 00:03:57,430
although this scenario may seem a bit

68
00:03:57,430 --> 00:04:00,790
<font color="#E5E5E5">abstract web developers</font><font color="#CCCCCC"> often use it</font>

69
00:04:00,790 --> 00:04:02,799
purely<font color="#CCCCCC"> because</font><font color="#E5E5E5"> it is convenient</font><font color="#CCCCCC"> for</font>

70
00:04:02,799 --> 00:04:04,200
<font color="#E5E5E5">end-users</font>

71
00:04:04,200 --> 00:04:06,730
if you follow news from the security

72
00:04:06,730 --> 00:04:09,069
<font color="#E5E5E5">branch</font><font color="#CCCCCC"> you may have heard</font><font color="#E5E5E5"> even lately of</font>

73
00:04:09,069 --> 00:04:11,560
websites which have<font color="#E5E5E5"> protected critical</font>

74
00:04:11,560 --> 00:04:15,220
data<font color="#E5E5E5"> through the data hiding method this</font>

75
00:04:15,220 --> 00:04:19,510
has led to<font color="#CCCCCC"> a major leaking x' applicants</font>

76
00:04:19,510 --> 00:04:21,220
resumes being leaked from job search

77
00:04:21,220 --> 00:04:22,960
sites<font color="#E5E5E5"> is an example of problems</font>

78
00:04:22,960 --> 00:04:24,850
connected with data hiding<font color="#E5E5E5"> another</font>

79
00:04:24,850 --> 00:04:26,669
<font color="#E5E5E5">example is the American</font><font color="#CCCCCC"> Express</font><font color="#E5E5E5"> website</font>

80
00:04:26,669 --> 00:04:29,289
<font color="#E5E5E5">which left the access to application</font>

81
00:04:29,289 --> 00:04:30,960
<font color="#CCCCCC">developers administration panel</font>

82
00:04:30,960 --> 00:04:36,250
<font color="#CCCCCC">unprotected by and large data</font><font color="#E5E5E5"> hiding is</font>

83
00:04:36,250 --> 00:04:38,850
not a safe attack<font color="#CCCCCC"> prevention method</font>

84
00:04:38,850 --> 00:04:41,380
remember<font color="#E5E5E5"> that confidential data must be</font>

85
00:04:41,380 --> 00:04:45,000
<font color="#E5E5E5">secured with an authorization scheme</font>

86
00:04:45,000 --> 00:04:49,210
<font color="#E5E5E5">don't simply rely on robots.txt the file</font>

87
00:04:49,210 --> 00:04:51,130
does not<font color="#E5E5E5"> give you a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> security and</font>

88
00:04:51,130 --> 00:04:53,500
may<font color="#E5E5E5"> just</font><font color="#CCCCCC"> become the hole through which</font>

89
00:04:53,500 --> 00:04:57,630
<font color="#E5E5E5">an attacker slips in this is all for now</font>

90
00:04:57,630 --> 00:05:00,010
thank you<font color="#E5E5E5"> for your attention</font><font color="#CCCCCC"> and see you</font>

91
00:05:00,010 --> 00:05:02,380
in<font color="#CCCCCC"> module</font><font color="#E5E5E5"> 3 which will talk about how</font>

92
00:05:02,380 --> 00:05:04,270
web applications may be affected by

93
00:05:04,270 --> 00:05:08,340
<font color="#E5E5E5">brute force</font><font color="#CCCCCC"> and dictionary attacks</font>

94
00:05:11,610 --> 00:05:14,199
welcome to module<font color="#CCCCCC"> three</font><font color="#E5E5E5"> this module</font>

95
00:05:14,199 --> 00:05:16,389
focuses on brute force<font color="#E5E5E5"> and dictionary</font>

96
00:05:16,389 --> 00:05:19,749
attacks these types of attacks<font color="#CCCCCC"> are the</font>

97
00:05:19,749 --> 00:05:21,520
<font color="#CCCCCC">easiest form of targeting web</font>

98
00:05:21,520 --> 00:05:23,709
applications that<font color="#CCCCCC"> consist</font><font color="#E5E5E5"> of checking</font>

99
00:05:23,709 --> 00:05:26,050
all possible<font color="#E5E5E5"> rule-based</font><font color="#CCCCCC"> or dictionary</font>

100
00:05:26,050 --> 00:05:28,199
combinations of logins and passwords

101
00:05:28,199 --> 00:05:30,459
<font color="#CCCCCC">cracking the password may not take a lot</font>

102
00:05:30,459 --> 00:05:32,679
<font color="#CCCCCC">of time so in practice these types of</font>

103
00:05:32,679 --> 00:05:38,349
attacks<font color="#CCCCCC"> are often unsuccessful the HTTP</font>

104
00:05:38,349 --> 00:05:40,629
<font color="#CCCCCC">off scheme is the first authorization</font>

105
00:05:40,629 --> 00:05:42,550
method that may be exploited for attack

106
00:05:42,550 --> 00:05:45,879
<font color="#E5E5E5">it is implemented in all web browsers</font>

107
00:05:45,879 --> 00:05:48,490
<font color="#CCCCCC">and virtually all web servers</font><font color="#E5E5E5"> enables</font>

108
00:05:48,490 --> 00:05:56,259
setting it in an easy way<font color="#E5E5E5"> here we'll</font>

109
00:05:56,259 --> 00:05:59,259
talk of HTTP auth implemented in the

110
00:05:59,259 --> 00:06:03,039
<font color="#E5E5E5">Apache web server the core of this</font>

111
00:06:03,039 --> 00:06:06,099
scheme is HT access<font color="#E5E5E5"> the file used for</font>

112
00:06:06,099 --> 00:06:08,469
many purposes<font color="#CCCCCC"> including HTTP</font>

113
00:06:08,469 --> 00:06:10,719
authorization if you store it in a

114
00:06:10,719 --> 00:06:13,300
directory<font color="#E5E5E5"> accessed by a web server all</font>

115
00:06:13,300 --> 00:06:14,949
the files contained in<font color="#E5E5E5"> the directory</font>

116
00:06:14,949 --> 00:06:16,990
will become protected with the user ID

117
00:06:16,990 --> 00:06:24,669
and<font color="#CCCCCC"> password you may specify the message</font>

118
00:06:24,669 --> 00:06:26,889
which will be<font color="#E5E5E5"> seen by users and indicate</font>

119
00:06:26,889 --> 00:06:28,899
<font color="#E5E5E5">the file containing passwords used for</font>

120
00:06:28,899 --> 00:06:35,349
authorization let's now try to create

121
00:06:35,349 --> 00:06:40,930
such a file in Apache<font color="#E5E5E5"> the command HT</font>

122
00:06:40,930 --> 00:06:49,930
passwd<font color="#E5E5E5"> is used for this purpose here you</font>

123
00:06:49,930 --> 00:06:52,029
may see the syntax<font color="#E5E5E5"> for calling the</font>

124
00:06:52,029 --> 00:06:54,389
command

125
00:06:56,220 --> 00:06:59,050
to create<font color="#CCCCCC"> a file</font><font color="#E5E5E5"> containing passwords</font>

126
00:06:59,050 --> 00:07:01,120
<font color="#E5E5E5">you must first</font><font color="#CCCCCC"> enter the</font><font color="#E5E5E5"> name</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

127
00:07:01,120 --> 00:07:07,750
<font color="#CCCCCC">target file it's good to mention that</font>

128
00:07:07,750 --> 00:07:10,479
files with the extension<font color="#E5E5E5"> HT passwd and</font>

129
00:07:10,479 --> 00:07:13,300
HT access are protected by the web

130
00:07:13,300 --> 00:07:15,280
server by default<font color="#CCCCCC"> and may not</font><font color="#E5E5E5"> be</font>

131
00:07:15,280 --> 00:07:19,090
accessed<font color="#E5E5E5"> by users regardless of this</font>

132
00:07:19,090 --> 00:07:21,400
it's better to put files<font color="#CCCCCC"> outside the</font>

133
00:07:21,400 --> 00:07:26,320
document<font color="#CCCCCC"> tree of the</font><font color="#E5E5E5"> web server next we</font>

134
00:07:26,320 --> 00:07:32,470
enter<font color="#E5E5E5"> the username and password our</font>

135
00:07:32,470 --> 00:07:38,440
password here is<font color="#CCCCCC"> 1 2 3 4 the file has</font>

136
00:07:38,440 --> 00:07:41,770
been<font color="#E5E5E5"> created</font><font color="#CCCCCC"> now let's see how this</font>

137
00:07:41,770 --> 00:07:44,250
works<font color="#E5E5E5"> in practice</font>

138
00:07:49,800 --> 00:07:53,800
we'll use the live HTTP headers<font color="#CCCCCC"> add on</font>

139
00:07:53,800 --> 00:07:55,990
the extension<font color="#E5E5E5"> allows us to view the live</font>

140
00:07:55,990 --> 00:08:00,300
<font color="#E5E5E5">communication between browser and server</font>

141
00:08:00,300 --> 00:08:06,130
as we can see the<font color="#E5E5E5"> webserver has a set</font>

142
00:08:06,130 --> 00:08:07,020
<font color="#E5E5E5">special header</font>

143
00:08:07,020 --> 00:08:11,380
<font color="#CCCCCC">ww authenticate instructing the browser</font>

144
00:08:11,380 --> 00:08:16,360
to authorize the user first<font color="#E5E5E5"> we'll enter</font>

145
00:08:16,360 --> 00:08:25,539
an incorrect password as we can see the

146
00:08:25,539 --> 00:08:27,160
browser encodes the login and<font color="#CCCCCC"> password</font>

147
00:08:27,160 --> 00:08:31,090
with a base64 scheme<font color="#E5E5E5"> and a special HTTP</font>

148
00:08:31,090 --> 00:08:33,700
header<font color="#CCCCCC"> is set the server decodes the</font>

149
00:08:33,700 --> 00:08:35,380
string and compares it<font color="#CCCCCC"> against data</font>

150
00:08:35,380 --> 00:08:39,309
stored in HT access let's now submit the

151
00:08:39,309 --> 00:08:42,749
correct<font color="#E5E5E5"> login and password</font>

152
00:08:49,370 --> 00:08:53,760
as we can see this time the

153
00:08:53,760 --> 00:08:57,450
authorization is successful browsers

154
00:08:57,450 --> 00:08:59,430
remember requests for authorization<font color="#E5E5E5"> and</font>

155
00:08:59,430 --> 00:09:02,730
the provided data<font color="#E5E5E5"> the information is</font>

156
00:09:02,730 --> 00:09:04,620
transported automatically with each

157
00:09:04,620 --> 00:09:06,590
attempt<font color="#E5E5E5"> to access protected resources</font>

158
00:09:06,590 --> 00:09:09,660
<font color="#E5E5E5">because of this no further authorization</font>

159
00:09:09,660 --> 00:09:15,690
will be needed let's now try to<font color="#E5E5E5"> launch</font>

160
00:09:15,690 --> 00:09:17,940
an attack targeted at this<font color="#CCCCCC"> authorization</font>

161
00:09:17,940 --> 00:09:22,190
scheme to do this we'll use Hydra<font color="#CCCCCC"> an</font>

162
00:09:22,190 --> 00:09:24,210
application that enables<font color="#E5E5E5"> dictionary</font>

163
00:09:24,210 --> 00:09:26,660
attacking of variety of utilities

164
00:09:26,660 --> 00:09:30,090
including the HTTP auth scheme and web

165
00:09:30,090 --> 00:09:52,680
<font color="#CCCCCC">forms we can see here the</font><font color="#E5E5E5"> description of</font>

166
00:09:52,680 --> 00:09:55,950
parameters of calling Hydra for the

167
00:09:55,950 --> 00:09:58,020
parameter<font color="#E5E5E5"> L let's submit the file</font>

168
00:09:58,020 --> 00:10:01,790
containing a list of<font color="#E5E5E5"> user names</font>

169
00:10:05,360 --> 00:10:07,680
let's see what<font color="#E5E5E5"> these dictionaries look</font>

170
00:10:07,680 --> 00:10:12,870
like<font color="#CCCCCC"> they're simply a list of words</font>

171
00:10:12,870 --> 00:10:15,180
<font color="#E5E5E5">which may constitute</font><font color="#CCCCCC"> user names</font><font color="#E5E5E5"> or</font>

172
00:10:15,180 --> 00:10:20,129
possible passwords we can also see that

173
00:10:20,129 --> 00:10:24,470
<font color="#CCCCCC">the files include our login and password</font>

174
00:10:37,009 --> 00:10:39,750
next we submit the file containing the

175
00:10:39,750 --> 00:10:43,529
<font color="#E5E5E5">passwords dictionary we also need to</font>

176
00:10:43,529 --> 00:10:45,180
<font color="#CCCCCC">submit the address of the web server</font>

177
00:10:45,180 --> 00:10:46,889
which will be analyzed<font color="#CCCCCC"> and the name of</font>

178
00:10:46,889 --> 00:10:49,430
<font color="#CCCCCC">the attack</font>

179
00:10:55,430 --> 00:10:58,600
[Music]

180
00:10:59,070 --> 00:11:02,639
next<font color="#E5E5E5"> as a method parameter we submit the</font>

181
00:11:02,639 --> 00:11:04,649
<font color="#E5E5E5">path to</font><font color="#CCCCCC"> resources which require such</font>

182
00:11:04,649 --> 00:11:17,100
authorization let's now try<font color="#E5E5E5"> to start the</font>

183
00:11:17,100 --> 00:11:21,480
<font color="#E5E5E5">command as we can see the sample attack</font>

184
00:11:21,480 --> 00:11:25,050
has been successful once service has

185
00:11:25,050 --> 00:11:27,569
been<font color="#E5E5E5"> targeted</font><font color="#CCCCCC"> 21 login and password</font>

186
00:11:27,569 --> 00:11:30,269
combinations<font color="#E5E5E5"> and also our access</font>

187
00:11:30,269 --> 00:11:38,130
information<font color="#E5E5E5"> have</font><font color="#CCCCCC"> been found it may be</font>

188
00:11:38,130 --> 00:11:39,480
worth it to<font color="#E5E5E5"> take note</font><font color="#CCCCCC"> of another</font>

189
00:11:39,480 --> 00:11:52,259
authorization scheme it's a simple login

190
00:11:52,259 --> 00:11:56,490
form<font color="#E5E5E5"> created in the</font><font color="#CCCCCC"> PHP language</font><font color="#E5E5E5"> it is</font>

191
00:11:56,490 --> 00:11:58,980
<font color="#E5E5E5">displayed by default</font><font color="#CCCCCC"> if a user submits</font>

192
00:11:58,980 --> 00:12:01,800
<font color="#E5E5E5">the</font><font color="#CCCCCC"> form to script</font><font color="#E5E5E5"> the provided data are</font>

193
00:12:01,800 --> 00:12:03,630
compared against<font color="#E5E5E5"> the data held by the</font>

194
00:12:03,630 --> 00:12:18,029
corresponding<font color="#E5E5E5"> variables to login</font><font color="#CCCCCC"> the</font>

195
00:12:18,029 --> 00:12:20,100
user must<font color="#E5E5E5"> type the username admin and</font>

196
00:12:20,100 --> 00:12:25,110
the password<font color="#CCCCCC"> root let's now see in</font>

197
00:12:25,110 --> 00:12:28,339
<font color="#CCCCCC">practice how the scheme is working</font>

198
00:12:41,420 --> 00:12:43,680
submitting incorrect login and password

199
00:12:43,680 --> 00:12:46,110
will<font color="#E5E5E5"> cause the message error to</font><font color="#CCCCCC"> be</font>

200
00:12:46,110 --> 00:12:50,190
displayed if the correct information is

201
00:12:50,190 --> 00:12:54,770
<font color="#CCCCCC">given the message</font><font color="#E5E5E5"> logged in may be seen</font>

202
00:12:54,770 --> 00:12:57,780
now we'll find out<font color="#E5E5E5"> how Hydra may be used</font>

203
00:12:57,780 --> 00:12:59,820
to<font color="#E5E5E5"> launch an experimental attack on the</font>

204
00:12:59,820 --> 00:13:13,380
<font color="#E5E5E5">form indicate dictionaries which will be</font>

205
00:13:13,380 --> 00:13:16,290
analyzed by<font color="#E5E5E5"> the application the</font>

206
00:13:16,290 --> 00:13:18,090
dictionaries include the correct<font color="#CCCCCC"> login</font>

207
00:13:18,090 --> 00:13:20,520
and password to<font color="#CCCCCC"> our script</font><font color="#E5E5E5"> so the</font>

208
00:13:20,520 --> 00:13:28,020
attempt<font color="#E5E5E5"> should</font><font color="#CCCCCC"> be successful here the</font>

209
00:13:28,020 --> 00:13:31,020
server name must also be given<font color="#E5E5E5"> this</font>

210
00:13:31,020 --> 00:13:34,620
method is called HTTP<font color="#E5E5E5"> POST form as the</font>

211
00:13:34,620 --> 00:13:37,460
form is passed via the post<font color="#E5E5E5"> method</font>

212
00:13:37,460 --> 00:13:40,290
method parameters are the forms address

213
00:13:40,290 --> 00:13:42,810
data string and the message displayed

214
00:13:42,810 --> 00:13:47,090
with each failed login attempt

215
00:13:49,830 --> 00:13:52,959
[Music]

216
00:13:57,040 --> 00:14:00,169
[Music]

217
00:14:13,879 --> 00:14:16,110
provide the string representing the

218
00:14:16,110 --> 00:14:28,649
encoded form<font color="#E5E5E5"> after</font><font color="#CCCCCC"> the :</font><font color="#E5E5E5"> the value user</font>

219
00:14:28,649 --> 00:14:31,199
is changed to<font color="#CCCCCC"> login selected by the</font>

220
00:14:31,199 --> 00:14:45,239
<font color="#E5E5E5">application while pass is similarly</font>

221
00:14:45,239 --> 00:14:49,199
changed to checked passwords<font color="#E5E5E5"> we also</font>

222
00:14:49,199 --> 00:14:52,829
need to pass the field<font color="#E5E5E5"> go field which is</font>

223
00:14:52,829 --> 00:15:02,160
used for<font color="#E5E5E5"> logging in enter the</font><font color="#CCCCCC"> message</font>

224
00:15:02,160 --> 00:15:04,019
displayed with<font color="#CCCCCC"> the failed login attempt</font>

225
00:15:04,019 --> 00:15:13,110
<font color="#E5E5E5">after the second : let's see how this</font>

226
00:15:13,110 --> 00:15:21,509
command will work as we can see the

227
00:15:21,509 --> 00:15:23,459
attack has<font color="#E5E5E5"> been successful the login and</font>

228
00:15:23,459 --> 00:15:27,269
<font color="#CCCCCC">password combination</font><font color="#E5E5E5"> has been found the</font>

229
00:15:27,269 --> 00:15:29,429
demonstrated examples used ready-made

230
00:15:29,429 --> 00:15:31,649
dictionaries<font color="#E5E5E5"> let's think what could be</font>

231
00:15:31,649 --> 00:15:34,379
done<font color="#E5E5E5"> if we didn't have</font><font color="#CCCCCC"> access to such</font>

232
00:15:34,379 --> 00:15:36,779
lists or<font color="#E5E5E5"> that for some reason they</font>

233
00:15:36,779 --> 00:15:39,959
remain ineffective<font color="#E5E5E5"> the solution is</font><font color="#CCCCCC"> John</font>

234
00:15:39,959 --> 00:15:42,360
the<font color="#CCCCCC"> Ripper a password cracker</font><font color="#E5E5E5"> which also</font>

235
00:15:42,360 --> 00:15:44,100
<font color="#E5E5E5">enables</font><font color="#CCCCCC"> the generating of</font><font color="#E5E5E5"> password</font>

236
00:15:44,100 --> 00:15:48,350
strings for<font color="#E5E5E5"> brute force types of attacks</font>

237
00:15:53,280 --> 00:15:56,409
[Music]

238
00:15:57,750 --> 00:16:01,030
the<font color="#E5E5E5"> John</font><font color="#CCCCCC"> MMX version is</font><font color="#E5E5E5"> faster as it</font>

239
00:16:01,030 --> 00:16:03,750
<font color="#E5E5E5">utilizes special processor instructions</font>

240
00:16:03,750 --> 00:16:06,490
while<font color="#E5E5E5"> it may be quite aged the</font>

241
00:16:06,490 --> 00:16:17,860
application is<font color="#E5E5E5"> still fully functional as</font>

242
00:16:17,860 --> 00:16:20,080
we can see the command may be executed

243
00:16:20,080 --> 00:16:25,300
<font color="#CCCCCC">in different modes we're</font><font color="#E5E5E5"> interested in</font>

244
00:16:25,300 --> 00:16:27,400
the incremental<font color="#E5E5E5"> mode which generates</font>

245
00:16:27,400 --> 00:16:29,590
character and digit streams<font color="#E5E5E5"> this may</font>

246
00:16:29,590 --> 00:16:31,390
prove<font color="#E5E5E5"> useful in brute-force types of</font>

247
00:16:31,390 --> 00:16:36,700
attacks the incremental mode assumes the

248
00:16:36,700 --> 00:16:38,800
parameter mode which defines character

249
00:16:38,800 --> 00:16:41,760
sets used to generate<font color="#E5E5E5"> new passwords</font>

250
00:16:41,760 --> 00:16:46,350
<font color="#CCCCCC">let's start with the</font><font color="#E5E5E5"> standard set digits</font>

251
00:16:51,410 --> 00:16:54,530
[Music]

252
00:17:03,319 --> 00:17:07,079
you must add the parameter STD out to

253
00:17:07,079 --> 00:17:08,730
write the generated passwords<font color="#E5E5E5"> to</font>

254
00:17:08,730 --> 00:17:14,910
standard output alphanumeric characters

255
00:17:14,910 --> 00:17:43,950
is the second mode another<font color="#E5E5E5"> is all a mode</font>

256
00:17:43,950 --> 00:17:45,600
for<font color="#E5E5E5"> generating passwords from all</font>

257
00:17:45,600 --> 00:17:48,200
characters

258
00:17:49,530 --> 00:17:52,660
[Music]

259
00:17:56,320 --> 00:17:58,400
generated passwords are passed to<font color="#CCCCCC"> a</font>

260
00:17:58,400 --> 00:18:00,470
standard output<font color="#E5E5E5"> although they may be</font>

261
00:18:00,470 --> 00:18:02,570
redirected to a file to generate<font color="#CCCCCC"> a</font>

262
00:18:02,570 --> 00:18:05,299
dictionary the dictionary<font color="#CCCCCC"> may in turn be</font>

263
00:18:05,299 --> 00:18:28,040
<font color="#CCCCCC">used as a parameter</font><font color="#E5E5E5"> of calling Hydra as</font>

264
00:18:28,040 --> 00:18:31,690
we can see the file has been created

265
00:18:40,440 --> 00:18:42,540
[Music]

266
00:18:42,540 --> 00:18:44,730
so how can we protect<font color="#E5E5E5"> ourselves against</font>

267
00:18:44,730 --> 00:18:47,670
these threats the first and most

268
00:18:47,670 --> 00:18:50,280
significant solution is to force users

269
00:18:50,280 --> 00:18:53,940
<font color="#CCCCCC">to use strong passwords the stronger</font><font color="#E5E5E5"> the</font>

270
00:18:53,940 --> 00:18:55,980
password the more time a brute-force

271
00:18:55,980 --> 00:18:58,320
attacker will need to check<font color="#E5E5E5"> all</font><font color="#CCCCCC"> possible</font>

272
00:18:58,320 --> 00:19:00,870
combinations<font color="#E5E5E5"> of characters passwords</font>

273
00:19:00,870 --> 00:19:02,760
should<font color="#E5E5E5"> not use words listed in popular</font>

274
00:19:02,760 --> 00:19:06,510
dictionaries it may often<font color="#E5E5E5"> be worthwhile</font>

275
00:19:06,510 --> 00:19:08,760
<font color="#CCCCCC">to</font><font color="#E5E5E5"> introduce a scheme for blocking a</font>

276
00:19:08,760 --> 00:19:11,010
user session after a limit of failed

277
00:19:11,010 --> 00:19:13,710
login attempts is reached<font color="#E5E5E5"> we must</font>

278
00:19:13,710 --> 00:19:15,810
remember<font color="#CCCCCC"> however not to</font><font color="#E5E5E5"> provoke an</font>

279
00:19:15,810 --> 00:19:18,900
account lockout<font color="#CCCCCC"> a</font><font color="#E5E5E5"> situation which occurs</font>

280
00:19:18,900 --> 00:19:20,550
when users<font color="#E5E5E5"> are locked out of their</font>

281
00:19:20,550 --> 00:19:23,520
accounts<font color="#CCCCCC"> we'll talk</font><font color="#E5E5E5"> more about this in</font>

282
00:19:23,520 --> 00:19:25,740
<font color="#E5E5E5">the next module that's all for now</font>

283
00:19:25,740 --> 00:19:27,720
<font color="#CCCCCC">thanks for your attention and see you</font><font color="#E5E5E5"> in</font>

284
00:19:27,720 --> 00:19:30,260
<font color="#E5E5E5">the next module</font>

285
00:19:36,130 --> 00:19:39,890
welcome to module 4<font color="#CCCCCC"> of our course</font><font color="#E5E5E5"> this</font>

286
00:19:39,890 --> 00:19:41,720
<font color="#CCCCCC">module will focus on account lockout</font>

287
00:19:41,720 --> 00:19:43,030
vulnerability

288
00:19:43,030 --> 00:19:45,620
we'll start with helping you understand

289
00:19:45,620 --> 00:19:49,040
the core of<font color="#E5E5E5"> this concept we may talk of</font>

290
00:19:49,040 --> 00:19:51,470
<font color="#CCCCCC">an account lockout vulnerability</font><font color="#E5E5E5"> if an</font>

291
00:19:51,470 --> 00:19:53,240
authorizing script which monitors<font color="#E5E5E5"> the</font>

292
00:19:53,240 --> 00:19:55,610
number of login attempts is set to lock

293
00:19:55,610 --> 00:19:57,590
user accounts<font color="#E5E5E5"> after a limit of failed</font>

294
00:19:57,590 --> 00:20:04,040
logins<font color="#CCCCCC"> has been reached if an</font><font color="#E5E5E5"> account is</font>

295
00:20:04,040 --> 00:20:05,990
blocked without blocking<font color="#E5E5E5"> the IP address</font>

296
00:20:05,990 --> 00:20:08,240
used for attempted logins<font color="#CCCCCC"> a potential</font>

297
00:20:08,240 --> 00:20:10,400
attacker<font color="#E5E5E5"> who has obtained the username</font>

298
00:20:10,400 --> 00:20:11,660
and attempts to<font color="#E5E5E5"> log</font><font color="#CCCCCC"> in to its</font>

299
00:20:11,660 --> 00:20:13,880
<font color="#E5E5E5">corresponding account may exploit this</font>

300
00:20:13,880 --> 00:20:15,850
by blocking the account of a normal user

301
00:20:15,850 --> 00:20:18,350
<font color="#E5E5E5">the attack results in a denial of</font>

302
00:20:18,350 --> 00:20:20,780
service<font color="#E5E5E5"> and may cause users additional</font>

303
00:20:20,780 --> 00:20:30,890
problems this authorization<font color="#E5E5E5"> mechanism is</font>

304
00:20:30,890 --> 00:20:32,810
frequently implemented in online banking

305
00:20:32,810 --> 00:20:37,190
<font color="#CCCCCC">if the user submits a valid username but</font>

306
00:20:37,190 --> 00:20:39,050
enters an invalid password<font color="#E5E5E5"> for three</font>

307
00:20:39,050 --> 00:20:41,150
consecutive attempts the account is

308
00:20:41,150 --> 00:20:44,180
locked to unblock<font color="#E5E5E5"> it</font><font color="#CCCCCC"> the user has</font><font color="#E5E5E5"> to</font>

309
00:20:44,180 --> 00:20:47,150
contact a branch or<font color="#CCCCCC"> call a helpline the</font>

310
00:20:47,150 --> 00:20:48,830
procedure could<font color="#CCCCCC"> be helpful</font><font color="#E5E5E5"> in preventing</font>

311
00:20:48,830 --> 00:20:51,260
<font color="#E5E5E5">attacks</font><font color="#CCCCCC"> as the potential</font><font color="#E5E5E5"> attacker has</font>

312
00:20:51,260 --> 00:20:52,880
only three guesses<font color="#CCCCCC"> at the correct</font>

313
00:20:52,880 --> 00:20:55,220
password for<font color="#E5E5E5"> the targeted username on</font>

314
00:20:55,220 --> 00:20:57,680
the other hand anyone<font color="#E5E5E5"> who has acquired</font>

315
00:20:57,680 --> 00:20:59,900
our username<font color="#E5E5E5"> may use it</font><font color="#CCCCCC"> to successfully</font>

316
00:20:59,900 --> 00:21:04,520
deny us of our<font color="#CCCCCC"> own bank accounts take a</font>

317
00:21:04,520 --> 00:21:05,870
look at the example<font color="#E5E5E5"> of how this</font>

318
00:21:05,870 --> 00:21:08,440
mechanism works

319
00:21:14,779 --> 00:21:17,879
we can see here<font color="#E5E5E5"> a simple website created</font>

320
00:21:17,879 --> 00:21:20,519
in PHP<font color="#E5E5E5"> the site</font><font color="#CCCCCC"> employer is a simple</font>

321
00:21:20,519 --> 00:21:24,809
database<font color="#E5E5E5"> based login mechanism</font><font color="#CCCCCC"> as we can</font>

322
00:21:24,809 --> 00:21:27,450
see a PHP<font color="#E5E5E5"> session mechanism is being</font>

323
00:21:27,450 --> 00:21:29,549
utilized here<font color="#E5E5E5"> we're connecting to a</font>

324
00:21:29,549 --> 00:21:33,629
<font color="#E5E5E5">database let's see if the session has</font>

325
00:21:33,629 --> 00:21:36,210
successfully<font color="#E5E5E5"> started if it has load</font>

326
00:21:36,210 --> 00:21:38,129
information<font color="#CCCCCC"> from the database</font><font color="#E5E5E5"> on whether</font>

327
00:21:38,129 --> 00:21:41,850
the account<font color="#E5E5E5"> is locked if it is simply</font>

328
00:21:41,850 --> 00:21:49,110
<font color="#E5E5E5">stop the execution</font><font color="#CCCCCC"> of the script here's</font>

329
00:21:49,110 --> 00:21:50,909
the part responsible for logging users

330
00:21:50,909 --> 00:21:55,289
out it deletes the session variable

331
00:21:55,289 --> 00:22:01,799
<font color="#CCCCCC">which identifies users if the session</font><font color="#E5E5E5"> is</font>

332
00:22:01,799 --> 00:22:02,309
correct

333
00:22:02,309 --> 00:22:04,470
<font color="#CCCCCC">a</font><font color="#E5E5E5"> displayed message notifies users that</font>

334
00:22:04,470 --> 00:22:12,149
they are logged in and may<font color="#CCCCCC"> logout if the</font>

335
00:22:12,149 --> 00:22:14,249
session fails<font color="#CCCCCC"> a login form will be</font>

336
00:22:14,249 --> 00:22:17,850
displayed<font color="#E5E5E5"> after sending the form we may</font>

337
00:22:17,850 --> 00:22:19,619
load data on the user who<font color="#CCCCCC"> is matched to</font>

338
00:22:19,619 --> 00:22:27,450
<font color="#E5E5E5">the given login if we</font><font color="#CCCCCC"> managed to</font><font color="#E5E5E5"> obtain</font>

339
00:22:27,450 --> 00:22:29,809
<font color="#E5E5E5">the</font><font color="#CCCCCC"> information it is processed</font><font color="#E5E5E5"> further</font>

340
00:22:29,809 --> 00:22:32,820
but more<font color="#E5E5E5"> on this later</font><font color="#CCCCCC"> if we're not</font>

341
00:22:32,820 --> 00:22:42,029
successful<font color="#CCCCCC"> an error</font><font color="#E5E5E5"> message appears now</font>

342
00:22:42,029 --> 00:22:44,249
back to<font color="#E5E5E5"> finding a user who holds the</font>

343
00:22:44,249 --> 00:22:47,039
specified login if the account<font color="#E5E5E5"> is locked</font>

344
00:22:47,039 --> 00:22:49,529
<font color="#E5E5E5">we disable the login option and display</font>

345
00:22:49,529 --> 00:22:52,970
a<font color="#E5E5E5"> message stating</font><font color="#CCCCCC"> the account is blocked</font>

346
00:22:54,710 --> 00:22:58,320
if the data is valid<font color="#E5E5E5"> declare a PHP</font>

347
00:22:58,320 --> 00:23:00,029
session and display the link in the main

348
00:23:00,029 --> 00:23:02,330
<font color="#E5E5E5">page</font>

349
00:23:03,940 --> 00:23:06,039
if the provided password<font color="#E5E5E5"> doesn't</font>

350
00:23:06,039 --> 00:23:07,750
correspond with the<font color="#E5E5E5"> password stored in</font>

351
00:23:07,750 --> 00:23:09,850
the database<font color="#CCCCCC"> we</font><font color="#E5E5E5"> first display an error</font>

352
00:23:09,850 --> 00:23:11,710
message<font color="#CCCCCC"> and then check the</font><font color="#E5E5E5"> number of</font>

353
00:23:11,710 --> 00:23:18,039
<font color="#E5E5E5">login attempts first the field will hold</font>

354
00:23:18,039 --> 00:23:20,740
<font color="#CCCCCC">zero the value will increase with each</font>

355
00:23:20,740 --> 00:23:26,289
failed login attempt if it becomes<font color="#E5E5E5"> equal</font>

356
00:23:26,289 --> 00:23:28,450
or greater than<font color="#CCCCCC"> two this means</font><font color="#E5E5E5"> that at</font>

357
00:23:28,450 --> 00:23:29,950
<font color="#CCCCCC">least</font><font color="#E5E5E5"> three failed attempts have been</font>

358
00:23:29,950 --> 00:23:32,230
made<font color="#CCCCCC"> we display an appropriate message</font>

359
00:23:32,230 --> 00:23:34,000
and block the account in the<font color="#E5E5E5"> database</font>

360
00:23:34,000 --> 00:23:38,159
<font color="#E5E5E5">denying the user access</font><font color="#CCCCCC"> to the account</font>

361
00:23:39,690 --> 00:23:42,370
if the limit of login attempts has not

362
00:23:42,370 --> 00:23:44,860
been reached<font color="#E5E5E5"> simply increases account in</font>

363
00:23:44,860 --> 00:24:01,149
the database as we can see IP address

364
00:24:01,149 --> 00:24:02,860
<font color="#E5E5E5">and special cookies are not checked here</font>

365
00:24:02,860 --> 00:24:04,840
which means<font color="#E5E5E5"> that</font><font color="#CCCCCC"> the account will be</font>

366
00:24:04,840 --> 00:24:06,789
<font color="#E5E5E5">locked without regard to the computer</font>

367
00:24:06,789 --> 00:24:13,149
used for login attempts let's see now

368
00:24:13,149 --> 00:24:19,389
how<font color="#E5E5E5"> the service</font><font color="#CCCCCC"> works in practice</font><font color="#E5E5E5"> for</font>

369
00:24:19,389 --> 00:24:21,759
<font color="#E5E5E5">the purpose of this example a user admin</font>

370
00:24:21,759 --> 00:24:23,889
<font color="#E5E5E5">has been added to the database</font><font color="#CCCCCC"> the</font>

371
00:24:23,889 --> 00:24:26,350
password is<font color="#E5E5E5"> test let's try to log in</font>

372
00:24:26,350 --> 00:24:33,399
using these<font color="#E5E5E5"> credentials we've logged in</font>

373
00:24:33,399 --> 00:24:36,460
successfully<font color="#E5E5E5"> we may now return to the</font>

374
00:24:36,460 --> 00:24:40,179
main<font color="#CCCCCC"> page and logout as you can see the</font>

375
00:24:40,179 --> 00:24:43,659
<font color="#CCCCCC">mechanism is working</font><font color="#E5E5E5"> correctly log in</font>

376
00:24:43,659 --> 00:24:45,779
again

377
00:24:55,510 --> 00:24:57,500
refreshing the page will<font color="#CCCCCC"> display a</font>

378
00:24:57,500 --> 00:24:59,269
message<font color="#CCCCCC"> stating the user is logged in</font>

379
00:24:59,269 --> 00:25:04,279
successfully<font color="#E5E5E5"> but let's see what a</font>

380
00:25:04,279 --> 00:25:05,720
<font color="#E5E5E5">potential hacker could do with this</font>

381
00:25:05,720 --> 00:25:07,929
situation

382
00:25:11,980 --> 00:25:14,779
switch to the<font color="#E5E5E5"> private browsing mode new</font>

383
00:25:14,779 --> 00:25:16,880
cookies will<font color="#CCCCCC"> be collected</font><font color="#E5E5E5"> and so a new</font>

384
00:25:16,880 --> 00:25:19,370
PHP session will<font color="#CCCCCC"> start the user is not</font>

385
00:25:19,370 --> 00:25:22,419
logged in<font color="#CCCCCC"> for</font><font color="#E5E5E5"> this session</font>

386
00:25:25,660 --> 00:25:28,789
[Music]

387
00:25:33,120 --> 00:25:35,980
the page opens and as we've predicted

388
00:25:35,980 --> 00:25:40,360
<font color="#CCCCCC">we're no</font><font color="#E5E5E5"> longer logged in let's try to</font>

389
00:25:40,360 --> 00:25:42,100
imagine<font color="#CCCCCC"> how an attacker could exploit</font>

390
00:25:42,100 --> 00:25:45,850
this situation the attacker<font color="#E5E5E5"> knows the</font>

391
00:25:45,850 --> 00:25:47,470
admin account has been<font color="#E5E5E5"> created in this</font>

392
00:25:47,470 --> 00:25:49,510
<font color="#E5E5E5">service either because he made a correct</font>

393
00:25:49,510 --> 00:25:51,250
<font color="#CCCCCC">guest</font><font color="#E5E5E5"> or because he acquires this</font>

394
00:25:51,250 --> 00:25:53,560
information in some manner<font color="#CCCCCC"> now submit an</font>

395
00:25:53,560 --> 00:26:02,220
invalid password<font color="#E5E5E5"> the message displayed</font>

396
00:26:02,220 --> 00:26:04,750
unsurprisingly states<font color="#E5E5E5"> that the password</font>

397
00:26:04,750 --> 00:26:10,440
is<font color="#E5E5E5"> incorrect let's do this again</font>

398
00:26:16,570 --> 00:26:19,710
[Music]

399
00:26:25,500 --> 00:26:28,690
after the<font color="#CCCCCC"> third failed login attempt the</font>

400
00:26:28,690 --> 00:26:29,980
message states that the account is

401
00:26:29,980 --> 00:26:32,260
<font color="#E5E5E5">blocked and the user must contact an</font>

402
00:26:32,260 --> 00:26:34,960
administrator<font color="#E5E5E5"> this means that the</font>

403
00:26:34,960 --> 00:26:36,550
attacker won't be able<font color="#CCCCCC"> to try new</font>

404
00:26:36,550 --> 00:26:38,560
passwords<font color="#E5E5E5"> this means that the attacker</font>

405
00:26:38,560 --> 00:26:40,990
won't be able<font color="#E5E5E5"> to try new passwords the</font>

406
00:26:40,990 --> 00:26:42,310
same<font color="#E5E5E5"> message will display each</font>

407
00:26:42,310 --> 00:26:44,680
subsequent login attempt let's see if

408
00:26:44,680 --> 00:26:49,870
this will<font color="#CCCCCC"> happen as we can see the</font>

409
00:26:49,870 --> 00:26:52,840
account<font color="#E5E5E5"> is locked let's find out how</font>

410
00:26:52,840 --> 00:26:54,610
this affects a user who has<font color="#CCCCCC"> already</font>

411
00:26:54,610 --> 00:26:59,110
logged<font color="#E5E5E5"> into a service switch</font><font color="#CCCCCC"> off Firefox</font>

412
00:26:59,110 --> 00:27:02,470
is private browsing<font color="#E5E5E5"> we're back in the</font>

413
00:27:02,470 --> 00:27:05,950
<font color="#E5E5E5">previous session</font><font color="#CCCCCC"> as you can see the</font>

414
00:27:05,950 --> 00:27:08,740
<font color="#E5E5E5">account has</font><font color="#CCCCCC"> been locked the session</font>

415
00:27:08,740 --> 00:27:10,840
exists in the<font color="#E5E5E5"> system but the database</font>

416
00:27:10,840 --> 00:27:12,550
stores<font color="#CCCCCC"> information that the user is</font>

417
00:27:12,550 --> 00:27:18,160
blocked we can see that this<font color="#E5E5E5"> mechanism</font>

418
00:27:18,160 --> 00:27:20,230
<font color="#E5E5E5">could</font><font color="#CCCCCC"> be a source of problems</font><font color="#E5E5E5"> for normal</font>

419
00:27:20,230 --> 00:27:24,490
users<font color="#CCCCCC"> a potential attacker could block a</font>

420
00:27:24,490 --> 00:27:26,560
<font color="#CCCCCC">user account knowing only the</font><font color="#E5E5E5"> login and</font>

421
00:27:26,560 --> 00:27:28,120
<font color="#E5E5E5">this information</font><font color="#CCCCCC"> is frequently</font>

422
00:27:28,120 --> 00:27:31,990
<font color="#E5E5E5">explicitly displayed on websites all it</font>

423
00:27:31,990 --> 00:27:33,820
takes to block a user<font color="#E5E5E5"> is to submit</font>

424
00:27:33,820 --> 00:27:39,370
several<font color="#E5E5E5"> incorrect passwords if this</font>

425
00:27:39,370 --> 00:27:41,470
<font color="#E5E5E5">mechanism is implemented</font><font color="#CCCCCC"> for example</font><font color="#E5E5E5"> in</font>

426
00:27:41,470 --> 00:27:44,080
an online<font color="#CCCCCC"> auction service an attacker</font>

427
00:27:44,080 --> 00:27:45,820
<font color="#E5E5E5">could temporarily prevent the user from</font>

428
00:27:45,820 --> 00:27:50,740
bidding in an auction<font color="#E5E5E5"> how can we prevent</font>

429
00:27:50,740 --> 00:27:55,180
this attack blocking the computer used

430
00:27:55,180 --> 00:27:57,400
for failed login attempts is a better

431
00:27:57,400 --> 00:27:59,080
alternative<font color="#CCCCCC"> to</font><font color="#E5E5E5"> locking users out of</font>

432
00:27:59,080 --> 00:28:01,330
accounts<font color="#E5E5E5"> this could be achieved</font><font color="#CCCCCC"> for</font>

433
00:28:01,330 --> 00:28:03,340
example by tracking<font color="#E5E5E5"> and banning an</font>

434
00:28:03,340 --> 00:28:05,920
attacking computer's IP address<font color="#CCCCCC"> there's</font>

435
00:28:05,920 --> 00:28:07,420
little<font color="#CCCCCC"> chance</font><font color="#E5E5E5"> of the attacker and</font>

436
00:28:07,420 --> 00:28:09,100
<font color="#E5E5E5">targeted users sharing the same</font><font color="#CCCCCC"> IP</font>

437
00:28:09,100 --> 00:28:11,410
<font color="#E5E5E5">address and on the upside this approach</font>

438
00:28:11,410 --> 00:28:13,540
prevents normal users from experiencing

439
00:28:13,540 --> 00:28:15,460
<font color="#CCCCCC">problems</font><font color="#E5E5E5"> while we're still able to</font>

440
00:28:15,460 --> 00:28:16,990
<font color="#E5E5E5">thwart brute-force attacks on our</font>

441
00:28:16,990 --> 00:28:19,590
<font color="#E5E5E5">service</font>

442
00:28:20,050 --> 00:28:23,160
[Music]

443
00:28:24,620 --> 00:28:27,720
that's all in module<font color="#CCCCCC"> four</font><font color="#E5E5E5"> thanks for</font>

444
00:28:27,720 --> 00:28:30,960
your<font color="#E5E5E5"> attention the next module will</font>

445
00:28:30,960 --> 00:28:33,840
focus<font color="#E5E5E5"> on web parameter tampering see you</font>

446
00:28:33,840 --> 00:00:00,000
there

