1
00:00:11,759 --> 00:00:15,419
welcome to module 14<font color="#E5E5E5"> in this module</font>

2
00:00:15,419 --> 00:00:18,000
<font color="#E5E5E5">we'll</font><font color="#CCCCCC"> discuss XSS or cross-site</font>

3
00:00:18,000 --> 00:00:22,400
scripting attacks<font color="#E5E5E5"> an XSS vulnerability</font>

4
00:00:22,400 --> 00:00:25,380
<font color="#E5E5E5">occurs when user supply data which is</font>

5
00:00:25,380 --> 00:00:27,150
transferred<font color="#E5E5E5"> to a web application through</font>

6
00:00:27,150 --> 00:00:29,550
get or post methods is not adequately

7
00:00:29,550 --> 00:00:32,070
filtered allowing<font color="#E5E5E5"> for an attacker to</font>

8
00:00:32,070 --> 00:00:34,830
inject an external HTML code<font color="#CCCCCC"> into the</font>

9
00:00:34,830 --> 00:00:40,199
generated page the HTML may contain

10
00:00:40,199 --> 00:00:42,690
embedded<font color="#E5E5E5"> JavaScript which is executed in</font>

11
00:00:42,690 --> 00:00:47,100
a victim's web browser<font color="#E5E5E5"> data such as</font>

12
00:00:47,100 --> 00:00:49,079
session ID cookies<font color="#E5E5E5"> could be intercepted</font>

13
00:00:49,079 --> 00:00:54,539
<font color="#CCCCCC">this way a hacker may also</font><font color="#E5E5E5"> gain access</font>

14
00:00:54,539 --> 00:00:57,149
to a victim's<font color="#CCCCCC"> computer the so called</font>

15
00:00:57,149 --> 00:00:59,280
<font color="#E5E5E5">sploit</font><font color="#CCCCCC"> packs are toolkits facilitating</font>

16
00:00:59,280 --> 00:01:00,570
the exploitation of browser

17
00:01:00,570 --> 00:01:04,619
vulnerabilities once a potential victim

18
00:01:04,619 --> 00:01:06,750
<font color="#CCCCCC">opens an infected web site using a</font>

19
00:01:06,750 --> 00:01:08,940
vulnerable browser<font color="#E5E5E5"> the split pack</font>

20
00:01:08,940 --> 00:01:10,860
installs malware such as<font color="#CCCCCC"> Trojans</font><font color="#E5E5E5"> or</font>

21
00:01:10,860 --> 00:01:16,319
viruses on the system XSS attacks are

22
00:01:16,319 --> 00:01:18,259
<font color="#E5E5E5">usually divided</font><font color="#CCCCCC"> into two</font><font color="#E5E5E5"> subgroups</font>

23
00:01:18,259 --> 00:01:21,450
<font color="#E5E5E5">reflected XSS attacks take</font><font color="#CCCCCC"> place when an</font>

24
00:01:21,450 --> 00:01:23,610
exploitation string has been sent by a

25
00:01:23,610 --> 00:01:25,500
<font color="#E5E5E5">victim's</font><font color="#CCCCCC"> computer through get or post</font>

26
00:01:25,500 --> 00:01:29,569
<font color="#E5E5E5">whenever they visit a vulnerable page</font>

27
00:01:32,270 --> 00:01:35,099
for example<font color="#CCCCCC"> if the vulnerability occurs</font>

28
00:01:35,099 --> 00:01:36,630
in variables<font color="#E5E5E5"> passed through the get</font>

29
00:01:36,630 --> 00:01:38,910
method<font color="#E5E5E5"> victim has</font><font color="#CCCCCC"> to be persuaded to</font>

30
00:01:38,910 --> 00:01:40,830
visit the specially crafted<font color="#E5E5E5"> web site for</font>

31
00:01:40,830 --> 00:01:41,940
<font color="#E5E5E5">the attack</font><font color="#CCCCCC"> to succeed</font>

32
00:01:41,940 --> 00:01:44,789
the second XSS vulnerability class<font color="#E5E5E5"> is</font>

33
00:01:44,789 --> 00:01:48,239
stored XSS the attack occurs when an

34
00:01:48,239 --> 00:01:50,220
attacker is able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> save malicious code</font>

35
00:01:50,220 --> 00:01:52,770
to a server<font color="#E5E5E5"> for example in a database or</font>

36
00:01:52,770 --> 00:01:55,289
a file which<font color="#CCCCCC"> means that a victim</font><font color="#E5E5E5"> doesn't</font>

37
00:01:55,289 --> 00:01:56,789
have to be lured to a specially crafted

38
00:01:56,789 --> 00:01:59,069
page and can instead<font color="#CCCCCC"> be targeted while</font>

39
00:01:59,069 --> 00:02:00,929
browsing<font color="#E5E5E5"> a normal service for example</font>

40
00:02:00,929 --> 00:02:02,940
<font color="#CCCCCC">while reading</font><font color="#E5E5E5"> web site Commons or a</font>

41
00:02:02,940 --> 00:02:08,459
<font color="#E5E5E5">guestbook let's now see an example of</font>

42
00:02:08,459 --> 00:02:12,020
the reflected XSS flaw

43
00:02:14,040 --> 00:02:16,510
you can see here a<font color="#E5E5E5"> simple script which</font>

44
00:02:16,510 --> 00:02:20,140
<font color="#CCCCCC">simulates</font><font color="#E5E5E5"> browser actions search engines</font>

45
00:02:20,140 --> 00:02:22,060
embedded in web applications<font color="#E5E5E5"> will very</font>

46
00:02:22,060 --> 00:02:23,980
often redisplay the string supplied by

47
00:02:23,980 --> 00:02:27,850
users the same<font color="#E5E5E5"> mechanism is employed</font>

48
00:02:27,850 --> 00:02:30,459
here<font color="#E5E5E5"> the content of the form is sent via</font>

49
00:02:30,459 --> 00:02:32,800
the get<font color="#CCCCCC"> method and the search result is</font>

50
00:02:32,800 --> 00:02:37,090
<font color="#CCCCCC">displayed let's see how the script works</font>

51
00:02:37,090 --> 00:02:46,660
<font color="#E5E5E5">in practice as you can see the string</font>

52
00:02:46,660 --> 00:02:49,330
has been displayed we might notice<font color="#CCCCCC"> that</font>

53
00:02:49,330 --> 00:02:51,700
user provided<font color="#CCCCCC"> data is not filtered which</font>

54
00:02:51,700 --> 00:02:53,530
means that an attacker has full<font color="#CCCCCC"> control</font>

55
00:02:53,530 --> 00:02:55,720
over<font color="#E5E5E5"> the shape of HTML code</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> will</font>

56
00:02:55,720 --> 00:02:58,180
<font color="#E5E5E5">be reflected and may use this to inject</font>

57
00:02:58,180 --> 00:03:00,880
a<font color="#CCCCCC"> JavaScript</font>

58
00:03:00,880 --> 00:03:04,030
[Music]

59
00:03:08,090 --> 00:03:11,210
[Music]

60
00:03:25,819 --> 00:03:28,260
all it<font color="#E5E5E5"> takes now to execute</font><font color="#CCCCCC"> the code</font>

61
00:03:28,260 --> 00:03:30,390
embedded<font color="#E5E5E5"> in the link is</font><font color="#CCCCCC"> to send the URL</font>

62
00:03:30,390 --> 00:03:32,250
to a victim<font color="#E5E5E5"> and persuade him or her to</font>

63
00:03:32,250 --> 00:03:38,069
click let's now move<font color="#CCCCCC"> to another type of</font>

64
00:03:38,069 --> 00:03:45,000
XSS vulnerability<font color="#CCCCCC"> stored XSS you can see</font>

65
00:03:45,000 --> 00:03:50,400
here a simple guestbook script comments

66
00:03:50,400 --> 00:03:52,709
are passed to script via post and then

67
00:03:52,709 --> 00:03:58,709
saved in a<font color="#E5E5E5"> database all comments will be</font>

68
00:03:58,709 --> 00:04:00,540
<font color="#E5E5E5">next retrieved from</font><font color="#CCCCCC"> the database and</font>

69
00:04:00,540 --> 00:04:04,560
displayed<font color="#CCCCCC"> as you can see since the</font>

70
00:04:04,560 --> 00:04:06,780
script<font color="#CCCCCC"> doesn't validate input either we</font>

71
00:04:06,780 --> 00:04:08,099
can expect<font color="#CCCCCC"> that it will</font><font color="#E5E5E5"> also be</font>

72
00:04:08,099 --> 00:04:12,090
vulnerable to HTML code injection<font color="#E5E5E5"> since</font>

73
00:04:12,090 --> 00:04:13,500
the malicious code will<font color="#CCCCCC"> be saved in a</font>

74
00:04:13,500 --> 00:04:15,690
database<font color="#CCCCCC"> this would be an instance of</font>

75
00:04:15,690 --> 00:04:19,829
stored XSS attack you can<font color="#E5E5E5"> also see here</font>

76
00:04:19,829 --> 00:04:21,199
<font color="#E5E5E5">a simple control panel</font>

77
00:04:21,199 --> 00:04:24,000
if valid user credentials are submitted

78
00:04:24,000 --> 00:04:26,070
and<font color="#E5E5E5"> checked in the database and the user</font>

79
00:04:26,070 --> 00:04:28,080
is logged in the site will display an

80
00:04:28,080 --> 00:04:42,630
appropriate message imagine that the

81
00:04:42,630 --> 00:04:43,889
browser represents a guestbook

82
00:04:43,889 --> 00:04:46,669
administrator

83
00:04:57,120 --> 00:04:59,730
[Music]

84
00:04:59,730 --> 00:05:04,380
we've logged in successfully<font color="#E5E5E5"> imagine</font>

85
00:05:04,380 --> 00:05:05,700
that the other browser represents a

86
00:05:05,700 --> 00:05:07,560
hacker trying to exploit the XSS

87
00:05:07,560 --> 00:05:17,640
vulnerability for<font color="#E5E5E5"> the purposes</font><font color="#CCCCCC"> of this</font>

88
00:05:17,640 --> 00:05:19,830
<font color="#E5E5E5">presentation</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> created a script which</font>

89
00:05:19,830 --> 00:05:21,540
creates a script tag and sets the

90
00:05:21,540 --> 00:05:23,670
address of a sniffer<font color="#CCCCCC"> which is a type of</font>

91
00:05:23,670 --> 00:05:25,440
<font color="#E5E5E5">software that can capture a user</font><font color="#CCCCCC"> supply</font>

92
00:05:25,440 --> 00:05:39,480
data<font color="#E5E5E5"> pass through the get method in this</font>

93
00:05:39,480 --> 00:05:41,670
case<font color="#E5E5E5"> the sent data is the content</font><font color="#CCCCCC"> of the</font>

94
00:05:41,670 --> 00:05:44,910
cookie variable<font color="#E5E5E5"> finally the tag is added</font>

95
00:05:44,910 --> 00:05:47,190
<font color="#CCCCCC">to the dome tree this provokes an</font>

96
00:05:47,190 --> 00:05:48,630
attempt<font color="#CCCCCC"> to load the script</font><font color="#E5E5E5"> and the</font>

97
00:05:48,630 --> 00:05:50,670
sending of<font color="#CCCCCC"> the get request</font><font color="#E5E5E5"> which will</font>

98
00:05:50,670 --> 00:05:57,450
contain cookies the sniffer PHP file

99
00:05:57,450 --> 00:05:59,430
<font color="#E5E5E5">logs all referred parameters to a</font>

100
00:05:59,430 --> 00:06:01,920
sniffer<font color="#CCCCCC"> logged file</font><font color="#E5E5E5"> the file could be</font>

101
00:06:01,920 --> 00:06:03,600
<font color="#E5E5E5">stored in the service which has been</font>

102
00:06:03,600 --> 00:06:05,730
taken over<font color="#CCCCCC"> by an attacker</font><font color="#E5E5E5"> in this way</font>

103
00:06:05,730 --> 00:06:07,890
the attacker could<font color="#E5E5E5"> obtain</font><font color="#CCCCCC"> access to data</font>

104
00:06:07,890 --> 00:06:09,750
stolen<font color="#E5E5E5"> from the</font><font color="#CCCCCC"> vulnerable website in</font>

105
00:06:09,750 --> 00:06:12,780
our<font color="#E5E5E5"> case this data is a PHP session ID</font>

106
00:06:12,780 --> 00:06:15,270
<font color="#E5E5E5">let's copy the script and try to add</font><font color="#CCCCCC"> it</font>

107
00:06:15,270 --> 00:06:17,780
to<font color="#E5E5E5"> the guestbook</font>

108
00:06:23,810 --> 00:06:28,170
as we can see new elements have been

109
00:06:28,170 --> 00:06:30,300
<font color="#E5E5E5">added to the page the site source code</font>

110
00:06:30,300 --> 00:06:37,470
<font color="#CCCCCC">now contains our script in this case</font><font color="#E5E5E5"> the</font>

111
00:06:37,470 --> 00:06:39,210
code has been immediately executed on

112
00:06:39,210 --> 00:06:41,850
the<font color="#CCCCCC"> attackers side and so the first</font>

113
00:06:41,850 --> 00:06:43,860
<font color="#E5E5E5">entry in the sniffer log contains the</font>

114
00:06:43,860 --> 00:06:47,070
attackers session ID<font color="#E5E5E5"> imagine that a</font>

115
00:06:47,070 --> 00:06:48,720
logged in administrator visits the

116
00:06:48,720 --> 00:06:51,380
<font color="#CCCCCC">guestbook</font><font color="#E5E5E5"> page</font>

117
00:06:53,380 --> 00:06:56,509
[Music]

118
00:06:59,050 --> 00:07:03,280
as you can<font color="#E5E5E5"> probably guess the script</font>

119
00:07:03,280 --> 00:07:06,629
which sends data<font color="#E5E5E5"> to the snipper</font>

120
00:07:10,500 --> 00:07:13,300
has also been executed on the<font color="#E5E5E5"> admin side</font>

121
00:07:13,300 --> 00:07:15,789
<font color="#E5E5E5">the sniffer log file holds admin session</font>

122
00:07:15,789 --> 00:07:18,909
ID<font color="#E5E5E5"> let's try to exploit this using the</font>

123
00:07:18,909 --> 00:07:21,129
live HTTP headers<font color="#E5E5E5"> add-on modify the</font>

124
00:07:21,129 --> 00:07:23,110
<font color="#E5E5E5">request sent to the guestbook by setting</font>

125
00:07:23,110 --> 00:07:26,400
the stolen admin session ID

126
00:07:51,510 --> 00:07:54,630
[Music]

127
00:07:58,710 --> 00:08:01,830
[Music]

128
00:08:22,890 --> 00:08:25,690
as we can see the attacker has gained

129
00:08:25,690 --> 00:08:29,610
control over<font color="#E5E5E5"> the administrator session</font>

130
00:08:29,670 --> 00:08:32,530
you probably realize by now<font color="#E5E5E5"> how serious</font>

131
00:08:32,530 --> 00:08:35,620
XSS attacks could<font color="#E5E5E5"> be how can they be</font>

132
00:08:35,620 --> 00:08:38,979
prevented though<font color="#E5E5E5"> the simplest way to do</font>

133
00:08:38,979 --> 00:08:43,330
it is to filter<font color="#E5E5E5"> all input user provided</font>

134
00:08:43,330 --> 00:08:45,070
data should<font color="#E5E5E5"> be treated with caution as</font>

135
00:08:45,070 --> 00:08:48,280
it<font color="#CCCCCC"> could contain malicious elements if</font>

136
00:08:48,280 --> 00:08:50,080
it is not necessary<font color="#CCCCCC"> for the users</font><font color="#E5E5E5"> to be</font>

137
00:08:50,080 --> 00:08:52,690
able<font color="#CCCCCC"> to add HTML</font><font color="#E5E5E5"> tags we could employ</font>

138
00:08:52,690 --> 00:08:56,140
the HTML special<font color="#CCCCCC"> cares</font><font color="#E5E5E5"> function the</font>

139
00:08:56,140 --> 00:08:58,030
function converts all special characters

140
00:08:58,030 --> 00:09:00,490
used by an HTML interpreter<font color="#CCCCCC"> such as the</font>

141
00:09:00,490 --> 00:09:02,530
<font color="#E5E5E5">opening and closing</font><font color="#CCCCCC"> tags or quotes</font><font color="#E5E5E5"> in</font>

142
00:09:02,530 --> 00:09:07,960
HTML entities the entities<font color="#E5E5E5"> are displayed</font>

143
00:09:07,960 --> 00:09:10,330
normally but are<font color="#E5E5E5"> not rendered by an HTML</font>

144
00:09:10,330 --> 00:09:12,630
interpreter

145
00:09:28,190 --> 00:09:31,340
let's see if<font color="#E5E5E5"> setting this function helps</font>

146
00:09:31,340 --> 00:09:34,350
<font color="#E5E5E5">let's try to exploit the reflected XSS</font>

147
00:09:34,350 --> 00:09:37,550
vulnerability once more

148
00:09:47,790 --> 00:09:50,890
[Music]

149
00:09:51,699 --> 00:09:53,759
you

150
00:09:54,960 --> 00:09:58,080
[Music]

151
00:10:08,490 --> 00:10:12,730
as you can see<font color="#E5E5E5"> this time the code has</font>

152
00:10:12,730 --> 00:10:15,010
<font color="#CCCCCC">been displayed which suggests</font><font color="#E5E5E5"> it hasn't</font>

153
00:10:15,010 --> 00:10:16,750
<font color="#E5E5E5">been executed</font><font color="#CCCCCC"> the code of the site</font>

154
00:10:16,750 --> 00:10:20,550
contains the and<font color="#CCCCCC"> LT and GT characters</font>

155
00:10:20,550 --> 00:10:23,200
<font color="#E5E5E5">they're displayed but not used by the</font>

156
00:10:23,200 --> 00:10:29,110
HTML interpreter to identify tags if you

157
00:10:29,110 --> 00:10:31,390
want to allow<font color="#CCCCCC"> users</font><font color="#E5E5E5"> to insert</font><font color="#CCCCCC"> HTML tags</font>

158
00:10:31,390 --> 00:10:33,760
in your<font color="#E5E5E5"> application using</font><font color="#CCCCCC"> the BB code</font>

159
00:10:33,760 --> 00:10:36,640
mechanisms<font color="#E5E5E5"> might be a good</font><font color="#CCCCCC"> idea BB code</font>

160
00:10:36,640 --> 00:10:38,500
encloses tags<font color="#E5E5E5"> and square brackets and</font>

161
00:10:38,500 --> 00:10:40,360
then translates them<font color="#CCCCCC"> into individual</font>

162
00:10:40,360 --> 00:10:49,120
<font color="#E5E5E5">HTML tags that's all in this module</font><font color="#CCCCCC"> see</font>

163
00:10:49,120 --> 00:10:52,170
you in the next part<font color="#CCCCCC"> of the course</font>

164
00:10:55,770 --> 00:10:57,830
welcome to this part of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> course</font><font color="#CCCCCC"> in</font>

165
00:10:57,830 --> 00:11:00,270
this module<font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> help you understand</font>

166
00:11:00,270 --> 00:11:02,910
<font color="#E5E5E5">the concept of</font><font color="#CCCCCC"> xst or cross-site tracing</font>

167
00:11:02,910 --> 00:11:05,220
attack<font color="#CCCCCC"> we found out in module 14</font><font color="#E5E5E5"> that</font>

168
00:11:05,220 --> 00:11:07,170
XSS vulnerabilities could lead to

169
00:11:07,170 --> 00:11:12,120
<font color="#E5E5E5">serious damage</font><font color="#CCCCCC"> sessionid cookies theft a</font>

170
00:11:12,120 --> 00:11:13,890
usual target<font color="#E5E5E5"> for these attacks</font><font color="#CCCCCC"> had</font>

171
00:11:13,890 --> 00:11:15,450
<font color="#E5E5E5">become so common that a special</font>

172
00:11:15,450 --> 00:11:17,160
mechanism<font color="#CCCCCC"> has been introduced</font><font color="#E5E5E5"> to prevent</font>

173
00:11:17,160 --> 00:11:26,370
<font color="#E5E5E5">it the HTTP only parameter has been</font>

174
00:11:26,370 --> 00:11:28,380
added<font color="#CCCCCC"> to cookies</font><font color="#E5E5E5"> resulting in the sent</font>

175
00:11:28,380 --> 00:11:30,090
cookie to be<font color="#E5E5E5"> stored in a browser and</font>

176
00:11:30,090 --> 00:11:32,610
transferred to HTTP requests<font color="#E5E5E5"> but not</font>

177
00:11:32,610 --> 00:11:39,840
accessed by<font color="#CCCCCC"> JavaScript this is served to</font>

178
00:11:39,840 --> 00:11:43,800
<font color="#CCCCCC">neutralise many attacks let's now see</font>

179
00:11:43,800 --> 00:11:47,180
how<font color="#E5E5E5"> this mechanism works in practice</font>

180
00:11:48,620 --> 00:11:51,759
[Music]

181
00:11:52,950 --> 00:11:55,840
you can see here a<font color="#CCCCCC"> simple PHP</font><font color="#E5E5E5"> script</font>

182
00:11:55,840 --> 00:11:58,390
<font color="#E5E5E5">which sets a cookie and the HTTP only</font>

183
00:11:58,390 --> 00:12:02,890
parameter<font color="#E5E5E5"> we've just mentioned it is</font>

184
00:12:02,890 --> 00:12:06,970
<font color="#E5E5E5">initially set</font><font color="#CCCCCC"> to false</font><font color="#E5E5E5"> we'll cover this</font>

185
00:12:06,970 --> 00:12:08,860
part<font color="#E5E5E5"> later let's now focus on the line</font>

186
00:12:08,860 --> 00:12:10,570
which should display<font color="#CCCCCC"> the content of a</font>

187
00:12:10,570 --> 00:12:16,330
cookie set on the<font color="#E5E5E5"> server side using the</font>

188
00:12:16,330 --> 00:12:18,910
<font color="#CCCCCC">live HTTP headers add-on we're able</font><font color="#E5E5E5"> to</font>

189
00:12:18,910 --> 00:12:20,170
see the<font color="#E5E5E5"> communication between the</font>

190
00:12:20,170 --> 00:12:31,600
<font color="#E5E5E5">browser and user as you can see the</font>

191
00:12:31,600 --> 00:12:35,310
content of<font color="#CCCCCC"> the cookie has been displayed</font>

192
00:12:37,680 --> 00:12:40,180
the contents of<font color="#E5E5E5"> the requests includes</font>

193
00:12:40,180 --> 00:12:41,830
the set-cookie header<font color="#E5E5E5"> with the name</font>

194
00:12:41,830 --> 00:12:44,280
value<font color="#E5E5E5"> and expiration date</font><font color="#CCCCCC"> of the cookie</font>

195
00:12:44,280 --> 00:12:47,260
let's<font color="#E5E5E5"> change the HTTP only parameter to</font>

196
00:12:47,260 --> 00:12:54,700
true clear<font color="#E5E5E5"> the live HTTP headers logs</font>

197
00:12:54,700 --> 00:12:57,780
<font color="#CCCCCC">and refresh the page</font>

198
00:13:04,050 --> 00:13:06,430
this<font color="#E5E5E5"> time</font><font color="#CCCCCC"> the cookie has not been</font>

199
00:13:06,430 --> 00:13:08,110
displayed and cannot be<font color="#E5E5E5"> accessed by</font>

200
00:13:08,110 --> 00:13:10,860
<font color="#E5E5E5">JavaScript</font>

201
00:13:16,579 --> 00:13:21,139
as you can see the HTTP only parameter

202
00:13:21,139 --> 00:13:22,670
has been added to the end of the cookie

203
00:13:22,670 --> 00:13:25,189
definition<font color="#E5E5E5"> virtually all web browsers</font>

204
00:13:25,189 --> 00:13:28,100
support the HTTP only attribute<font color="#E5E5E5"> if it is</font>

205
00:13:28,100 --> 00:13:29,869
set by the server<font color="#CCCCCC"> the browser's will</font>

206
00:13:29,869 --> 00:13:31,759
block JavaScript access to the cookie

207
00:13:31,759 --> 00:13:33,829
which helps<font color="#CCCCCC"> to minimize the fallout from</font>

208
00:13:33,829 --> 00:13:39,649
XSS type attacks this<font color="#CCCCCC"> mechanism was</font>

209
00:13:39,649 --> 00:13:41,149
initially<font color="#E5E5E5"> believed to</font><font color="#CCCCCC"> be an adequate</font>

210
00:13:41,149 --> 00:13:43,459
security<font color="#CCCCCC"> measure a new technique has</font>

211
00:13:43,459 --> 00:13:44,899
been developed which serves to

212
00:13:44,899 --> 00:13:47,299
<font color="#CCCCCC">circumvent it this is called the excess</font>

213
00:13:47,299 --> 00:14:02,869
T or cross-site tracing method as we

214
00:14:02,869 --> 00:14:05,449
know HTTP protocol enables sending

215
00:14:05,449 --> 00:14:07,429
requests<font color="#E5E5E5"> of various types the most</font>

216
00:14:07,429 --> 00:14:09,290
popular among them are get and post

217
00:14:09,290 --> 00:14:12,139
requests the head request<font color="#CCCCCC"> is</font><font color="#E5E5E5"> also used</font>

218
00:14:12,139 --> 00:14:17,329
to query a server for headers<font color="#CCCCCC"> only there</font>

219
00:14:17,329 --> 00:14:20,119
are also other types<font color="#E5E5E5"> of queries for</font>

220
00:14:20,119 --> 00:14:23,089
example the<font color="#E5E5E5"> trace request which</font><font color="#CCCCCC"> is</font>

221
00:14:23,089 --> 00:14:24,949
implemented and enabled by<font color="#E5E5E5"> default in</font>

222
00:14:24,949 --> 00:14:31,129
most web servers the query reflects<font color="#E5E5E5"> user</font>

223
00:14:31,129 --> 00:14:35,419
headers all headers sent by a browser

224
00:14:35,419 --> 00:14:37,489
including cookies are returned as a

225
00:14:37,489 --> 00:14:43,279
server<font color="#E5E5E5"> responds by using the XML HTTP</font>

226
00:14:43,279 --> 00:14:44,329
request object

227
00:14:44,329 --> 00:14:46,369
setting the request type to trace and

228
00:14:46,369 --> 00:14:48,290
submitting the address of the attacked

229
00:14:48,290 --> 00:14:51,230
server<font color="#E5E5E5"> an attacker could read the</font>

230
00:14:51,230 --> 00:14:52,970
contents of the cookies without using

231
00:14:52,970 --> 00:14:56,899
the<font color="#CCCCCC"> document cookie variable instead the</font>

232
00:14:56,899 --> 00:14:58,699
attack exploits the data returned by

233
00:14:58,699 --> 00:15:03,169
<font color="#E5E5E5">text responds by passing the HTTP only</font>

234
00:15:03,169 --> 00:15:06,439
mechanism<font color="#E5E5E5"> let's see the site behavior</font>

235
00:15:06,439 --> 00:15:08,739
again

236
00:15:16,100 --> 00:15:20,970
as you can see an error has<font color="#CCCCCC"> been</font>

237
00:15:20,970 --> 00:15:22,889
reported<font color="#E5E5E5"> as a violation of security</font>

238
00:15:22,889 --> 00:15:25,649
mechanisms many web browsers have lately

239
00:15:25,649 --> 00:15:27,779
begun<font color="#E5E5E5"> to block less popular and rarely</font>

240
00:15:27,779 --> 00:15:29,789
<font color="#E5E5E5">used request types which could be</font>

241
00:15:29,789 --> 00:15:31,499
utilized as a means for<font color="#E5E5E5"> bypassing</font>

242
00:15:31,499 --> 00:15:36,569
security<font color="#E5E5E5"> mechanisms disabling</font><font color="#CCCCCC"> trace</font>

243
00:15:36,569 --> 00:15:38,549
requests could prevent<font color="#E5E5E5"> an attacker from</font>

244
00:15:38,549 --> 00:15:43,350
<font color="#E5E5E5">running xst attacks this request is used</font>

245
00:15:43,350 --> 00:15:45,509
mostly<font color="#E5E5E5"> by developers to debug browsers</font>

246
00:15:45,509 --> 00:15:50,369
<font color="#E5E5E5">and Ajax requests however its use and</font>

247
00:15:50,369 --> 00:15:52,350
normal applications is so limited that

248
00:15:52,350 --> 00:15:56,059
it seems<font color="#CCCCCC"> like a good</font><font color="#E5E5E5"> idea</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> block it</font>

249
00:15:56,239 --> 00:15:59,039
while today xst attacks are nearly

250
00:15:59,039 --> 00:16:01,169
impossible<font color="#E5E5E5"> to launch it's still useful</font>

251
00:16:01,169 --> 00:16:02,789
to<font color="#E5E5E5"> keep in mind the possible attack</font>

252
00:16:02,789 --> 00:16:04,949
scenarios<font color="#E5E5E5"> and to block trace requests at</font>

253
00:16:04,949 --> 00:16:07,529
the<font color="#CCCCCC"> server level</font><font color="#E5E5E5"> either in firewall</font>

254
00:16:07,529 --> 00:16:12,559
rules<font color="#E5E5E5"> configuration files or HT access</font>

255
00:16:13,429 --> 00:16:16,709
that's all in this<font color="#CCCCCC"> module the next</font>

256
00:16:16,709 --> 00:16:18,089
<font color="#E5E5E5">module will cover cross-site request</font>

257
00:16:18,089 --> 00:16:22,489
forgery attacks<font color="#CCCCCC"> see you there</font>

258
00:16:26,300 --> 00:16:30,590
welcome to module 15 in this module

259
00:16:30,590 --> 00:16:31,970
we'll talk about<font color="#E5E5E5"> cross-site request</font>

260
00:16:31,970 --> 00:16:38,680
forgery<font color="#CCCCCC"> or CSRs</font><font color="#E5E5E5"> or xsrf attacks a</font>

261
00:16:38,890 --> 00:16:41,390
cross-site request forgery attack occurs

262
00:16:41,390 --> 00:16:43,310
when a user who is authenticated on a

263
00:16:43,310 --> 00:16:45,140
web application<font color="#CCCCCC"> is tricked</font><font color="#E5E5E5"> into</font>

264
00:16:45,140 --> 00:16:47,150
unintentionally executing an<font color="#CCCCCC"> action in</font>

265
00:16:47,150 --> 00:16:53,060
the<font color="#E5E5E5"> service a good example of this is</font>

266
00:16:53,060 --> 00:16:54,980
persuading an administrator<font color="#CCCCCC"> to click a</font>

267
00:16:54,980 --> 00:16:57,230
<font color="#E5E5E5">URL which deletes an account of</font><font color="#CCCCCC"> another</font>

268
00:16:57,230 --> 00:17:00,770
user<font color="#E5E5E5"> the administrator is of course</font>

269
00:17:00,770 --> 00:17:05,930
<font color="#E5E5E5">unaware of this how can victims execute</font>

270
00:17:05,930 --> 00:17:08,599
<font color="#CCCCCC">actions without realizing it</font><font color="#E5E5E5"> this is</font>

271
00:17:08,599 --> 00:17:10,160
what could<font color="#CCCCCC"> happen if a specially crafted</font>

272
00:17:10,160 --> 00:17:12,200
link is clicked and executed<font color="#E5E5E5"> through an</font>

273
00:17:12,200 --> 00:17:14,240
<font color="#E5E5E5">exploitation of the XSS</font><font color="#CCCCCC"> flaw we've</font>

274
00:17:14,240 --> 00:17:19,459
discussed earlier let's now take a<font color="#CCCCCC"> look</font>

275
00:17:19,459 --> 00:17:21,380
at a<font color="#CCCCCC"> sample site code which illustrates</font>

276
00:17:21,380 --> 00:17:24,740
this scenario<font color="#E5E5E5"> assume as a starting point</font>

277
00:17:24,740 --> 00:17:26,569
the<font color="#E5E5E5"> guestbook we've talked about in the</font>

278
00:17:26,569 --> 00:17:34,040
module on XSS attacks this unprotected

279
00:17:34,040 --> 00:17:35,840
version of the application<font color="#CCCCCC"> allows users</font>

280
00:17:35,840 --> 00:17:47,390
to<font color="#CCCCCC"> submit any HTML</font><font color="#E5E5E5"> code the second part</font>

281
00:17:47,390 --> 00:17:49,730
<font color="#E5E5E5">is an admin script which verifies if an</font>

282
00:17:49,730 --> 00:17:52,240
authenticated user<font color="#E5E5E5"> has admin privileges</font>

283
00:17:52,240 --> 00:17:55,040
<font color="#E5E5E5">if this is the case the script enables</font>

284
00:17:55,040 --> 00:17:56,900
him or her to add a user holding the

285
00:17:56,900 --> 00:17:58,580
login<font color="#CCCCCC"> and</font><font color="#E5E5E5"> password indicated with</font>

286
00:17:58,580 --> 00:18:00,190
parameters sent through the get method

287
00:18:00,190 --> 00:18:04,250
<font color="#E5E5E5">if a user who has not logged in visits</font>

288
00:18:04,250 --> 00:18:06,620
such a page an appropriate message<font color="#E5E5E5"> will</font>

289
00:18:06,620 --> 00:18:08,860
be<font color="#CCCCCC"> displayed</font>

290
00:18:08,860 --> 00:18:11,510
the third script enables logins to a

291
00:18:11,510 --> 00:18:13,400
service and utilizes the<font color="#E5E5E5"> same database</font>

292
00:18:13,400 --> 00:18:16,950
<font color="#E5E5E5">table for authenticating users</font>

293
00:18:16,950 --> 00:18:20,069
[Music]

294
00:18:20,850 --> 00:18:24,360
if the submitted<font color="#E5E5E5"> data is valid an admin</font>

295
00:18:24,360 --> 00:18:39,600
session will be<font color="#E5E5E5"> activated you can see</font>

296
00:18:39,600 --> 00:18:41,730
here to web browsers with unrelated

297
00:18:41,730 --> 00:18:44,039
sessions in<font color="#CCCCCC"> progress</font><font color="#E5E5E5"> which indicates</font>

298
00:18:44,039 --> 00:18:47,480
<font color="#CCCCCC">that there are two different users</font>

299
00:18:47,840 --> 00:18:50,070
assume<font color="#E5E5E5"> that the browser on the</font><font color="#CCCCCC"> left side</font>

300
00:18:50,070 --> 00:18:51,750
represents an administrator of<font color="#E5E5E5"> an</font>

301
00:18:51,750 --> 00:18:54,929
<font color="#CCCCCC">attacked</font><font color="#E5E5E5"> service while the browser on</font>

302
00:18:54,929 --> 00:18:56,549
the<font color="#CCCCCC"> right represents a hacker who's</font>

303
00:18:56,549 --> 00:18:59,120
trying<font color="#CCCCCC"> to gain control over</font><font color="#E5E5E5"> the service</font>

304
00:18:59,120 --> 00:19:03,659
as you can see the attacker is not

305
00:19:03,659 --> 00:19:06,480
<font color="#E5E5E5">logged in and is not in possession</font><font color="#CCCCCC"> of a</font>

306
00:19:06,480 --> 00:19:08,970
valid<font color="#CCCCCC"> login or password which means that</font>

307
00:19:08,970 --> 00:19:10,679
it won't<font color="#E5E5E5"> be able</font><font color="#CCCCCC"> to perform</font><font color="#E5E5E5"> any actions</font>

308
00:19:10,679 --> 00:19:19,850
in the service on the<font color="#CCCCCC"> left is our admin</font>

309
00:19:19,850 --> 00:19:22,470
<font color="#CCCCCC">assumed he logs in using admin as a</font>

310
00:19:22,470 --> 00:19:35,490
<font color="#CCCCCC">username and test as the password as you</font>

311
00:19:35,490 --> 00:19:36,990
can see the admin<font color="#CCCCCC"> has logged in</font>

312
00:19:36,990 --> 00:19:42,210
successfully<font color="#E5E5E5"> let's confirm this the</font>

313
00:19:42,210 --> 00:19:45,590
attacker is still<font color="#E5E5E5"> not logged in</font>

314
00:19:52,350 --> 00:19:54,670
let's now see what a cross-site request

315
00:19:54,670 --> 00:20:05,770
<font color="#E5E5E5">forgery attack looks like you can</font><font color="#CCCCCC"> see</font>

316
00:20:05,770 --> 00:20:09,670
here a<font color="#E5E5E5"> guestbook script let's submit to</font>

317
00:20:09,670 --> 00:20:11,680
it an image<font color="#E5E5E5"> which once clicked will</font>

318
00:20:11,680 --> 00:20:14,440
<font color="#CCCCCC">execute an HTTP request to add a</font><font color="#E5E5E5"> user to</font>

319
00:20:14,440 --> 00:20:17,010
<font color="#CCCCCC">the</font><font color="#E5E5E5"> service</font>

320
00:20:20,420 --> 00:20:23,529
[Music]

321
00:20:23,980 --> 00:20:27,549
let's take a look<font color="#E5E5E5"> at the script we need</font>

322
00:20:27,549 --> 00:20:29,500
to pass the action variable with an<font color="#CCCCCC"> add</font>

323
00:20:29,500 --> 00:20:38,889
user value the<font color="#E5E5E5"> user variable containing</font>

324
00:20:38,889 --> 00:20:41,049
a<font color="#E5E5E5"> username and the password</font><font color="#CCCCCC"> with a</font>

325
00:20:41,049 --> 00:21:09,880
password as you can see an image<font color="#E5E5E5"> has</font>

326
00:21:09,880 --> 00:21:11,529
been<font color="#CCCCCC"> included which hides a link to the</font>

327
00:21:11,529 --> 00:21:17,169
admin service in its source now confirm

328
00:21:17,169 --> 00:21:18,820
that the attacker is<font color="#CCCCCC"> still not logged in</font>

329
00:21:18,820 --> 00:21:20,350
and that the account<font color="#E5E5E5"> has not been</font>

330
00:21:20,350 --> 00:21:22,889
<font color="#CCCCCC">created</font>

331
00:21:49,240 --> 00:21:53,570
as you can see the account<font color="#E5E5E5"> does not</font>

332
00:21:53,570 --> 00:21:56,210
<font color="#E5E5E5">exist in the system let's assume</font><font color="#CCCCCC"> now</font>

333
00:21:56,210 --> 00:21:57,830
that<font color="#E5E5E5"> the administrator</font><font color="#CCCCCC"> decides to visit</font>

334
00:21:57,830 --> 00:22:00,370
<font color="#E5E5E5">the guestbook</font>

335
00:22:10,590 --> 00:22:12,659
the image has<font color="#E5E5E5"> not been displayed because</font>

336
00:22:12,659 --> 00:22:15,059
<font color="#E5E5E5">its URL refers to a site that is</font><font color="#CCCCCC"> not an</font>

337
00:22:15,059 --> 00:22:17,639
<font color="#E5E5E5">image the administrator could pay no</font>

338
00:22:17,639 --> 00:22:19,320
attention to<font color="#E5E5E5"> the fact that the image</font><font color="#CCCCCC"> has</font>

339
00:22:19,320 --> 00:22:21,960
not displayed<font color="#E5E5E5"> and won't notice</font><font color="#CCCCCC"> that a</font>

340
00:22:21,960 --> 00:22:23,999
request<font color="#E5E5E5"> has</font><font color="#CCCCCC"> been executed that adds a</font>

341
00:22:23,999 --> 00:22:28,200
user to the database<font color="#E5E5E5"> let's see the</font>

342
00:22:28,200 --> 00:22:45,749
result now<font color="#E5E5E5"> a new account has been</font>

343
00:22:45,749 --> 00:22:47,730
<font color="#E5E5E5">created for the attacker and he is</font>

344
00:22:47,730 --> 00:22:51,269
logged<font color="#CCCCCC"> into</font><font color="#E5E5E5"> the service try to think of</font>

345
00:22:51,269 --> 00:22:53,070
ways in which<font color="#CCCCCC"> we could prevent exposing</font>

346
00:22:53,070 --> 00:22:56,340
ourselves to<font color="#E5E5E5"> these attacks</font><font color="#CCCCCC"> a good first</font>

347
00:22:56,340 --> 00:22:57,840
countermeasure is securing the

348
00:22:57,840 --> 00:23:00,600
application against XSS flaws however

349
00:23:00,600 --> 00:23:02,460
users could still fall prey<font color="#E5E5E5"> to such</font>

350
00:23:02,460 --> 00:23:07,320
<font color="#E5E5E5">attacks through their websites</font><font color="#CCCCCC"> to secure</font>

351
00:23:07,320 --> 00:23:08,700
an application from performing

352
00:23:08,700 --> 00:23:10,499
significant actions in the background in

353
00:23:10,499 --> 00:23:13,970
a potential<font color="#E5E5E5"> CSRF attack you can require</font>

354
00:23:13,970 --> 00:23:15,629
reauthorization or<font color="#E5E5E5"> introduced</font>

355
00:23:15,629 --> 00:23:21,119
additionally generated tokens the

356
00:23:21,119 --> 00:23:22,889
database could store random one-time

357
00:23:22,889 --> 00:23:24,659
strings<font color="#E5E5E5"> which would be added to all</font>

358
00:23:24,659 --> 00:23:26,700
forms generated in a<font color="#E5E5E5"> hidden field in a</font>

359
00:23:26,700 --> 00:23:32,759
service this would<font color="#E5E5E5"> allow you to check</font>

360
00:23:32,759 --> 00:23:34,769
server side and<font color="#E5E5E5"> the submitted token is</font>

361
00:23:34,769 --> 00:23:38,999
still active thanks to this method<font color="#CCCCCC"> if</font>

362
00:23:38,999 --> 00:23:40,440
hackers won't know the currently active

363
00:23:40,440 --> 00:23:46,049
tokens<font color="#E5E5E5"> their attacks will</font><font color="#CCCCCC"> be foiled on</font>

364
00:23:46,049 --> 00:23:48,389
the other hand using only the post

365
00:23:48,389 --> 00:23:50,669
method<font color="#CCCCCC"> without using get requests</font><font color="#E5E5E5"> cannot</font>

366
00:23:50,669 --> 00:23:52,769
guarantee application security<font color="#CCCCCC"> as an</font>

367
00:23:52,769 --> 00:23:54,330
attacker could use JavaScript to

368
00:23:54,330 --> 00:23:57,269
generate a post request<font color="#E5E5E5"> that's all in</font>

369
00:23:57,269 --> 00:24:00,600
this module thanks for your<font color="#E5E5E5"> attention</font>

370
00:24:00,600 --> 00:24:02,100
and see<font color="#CCCCCC"> you</font><font color="#E5E5E5"> in the next part of this</font>

371
00:24:02,100 --> 00:24:04,110
course<font color="#E5E5E5"> which will focus on using a</font>

372
00:24:04,110 --> 00:24:05,740
browser to<font color="#E5E5E5"> spy on data</font>

373
00:24:05,740 --> 00:24:08,829
[Music]

374
00:24:09,580 --> 00:00:00,000
<font color="#E5E5E5">you</font>

