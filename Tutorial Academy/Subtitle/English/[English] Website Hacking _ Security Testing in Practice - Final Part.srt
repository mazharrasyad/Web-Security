1
00:00:12,009 --> 00:00:17,710
welcome to module 20 of our course this

2
00:00:17,710 --> 00:00:19,480
<font color="#E5E5E5">module will focus on automated web</font>

3
00:00:19,480 --> 00:00:24,250
application<font color="#CCCCCC"> security testing the three</font>

4
00:00:24,250 --> 00:00:25,509
approaches used in the<font color="#E5E5E5"> automated</font>

5
00:00:25,509 --> 00:00:27,550
<font color="#CCCCCC">software security</font><font color="#E5E5E5"> testing or white box</font>

6
00:00:27,550 --> 00:00:33,339
<font color="#CCCCCC">gray box and black box testing white box</font>

7
00:00:33,339 --> 00:00:34,510
testing<font color="#CCCCCC"> is a technique</font><font color="#E5E5E5"> which</font>

8
00:00:34,510 --> 00:00:36,370
necessitates the<font color="#E5E5E5"> full knowledge of an</font>

9
00:00:36,370 --> 00:00:38,829
applications code and can<font color="#E5E5E5"> utilize static</font>

10
00:00:38,829 --> 00:00:43,720
code analysis tools<font color="#E5E5E5"> by contrast black</font>

11
00:00:43,720 --> 00:00:45,610
<font color="#E5E5E5">box testers are unaware of</font><font color="#CCCCCC"> the source</font>

12
00:00:45,610 --> 00:00:47,379
code and treat the application like a

13
00:00:47,379 --> 00:00:49,300
literal black box where the user

14
00:00:49,300 --> 00:00:50,920
parameters are the input and the

15
00:00:50,920 --> 00:00:54,840
generated page is the<font color="#CCCCCC"> analyzed output</font>

16
00:01:00,719 --> 00:01:03,039
gray box testing combines the two

17
00:01:03,039 --> 00:01:07,539
methods testers may know the source code

18
00:01:07,539 --> 00:01:09,100
<font color="#E5E5E5">but</font><font color="#CCCCCC"> don't delve deep enough</font><font color="#E5E5E5"> into</font>

19
00:01:09,100 --> 00:01:11,289
analyzing<font color="#E5E5E5"> it</font><font color="#CCCCCC"> the testers could also be</font>

20
00:01:11,289 --> 00:01:12,729
<font color="#E5E5E5">unaware of the code but have other</font>

21
00:01:12,729 --> 00:01:14,560
information<font color="#CCCCCC"> on internal functioning of</font>

22
00:01:14,560 --> 00:01:20,679
the application if that's the case a

23
00:01:20,679 --> 00:01:22,270
<font color="#CCCCCC">gray</font><font color="#E5E5E5"> box tester could come up with</font>

24
00:01:22,270 --> 00:01:24,310
better attack scenarios while<font color="#CCCCCC"> utilizing</font>

25
00:01:24,310 --> 00:01:25,869
the<font color="#E5E5E5"> tools and techniques of black box</font>

26
00:01:25,869 --> 00:01:30,340
<font color="#E5E5E5">testing this module will talk about</font>

27
00:01:30,340 --> 00:01:32,440
black<font color="#CCCCCC"> and white box testing</font><font color="#E5E5E5"> since</font><font color="#CCCCCC"> gray</font>

28
00:01:32,440 --> 00:01:34,479
box<font color="#E5E5E5"> testing is a subclass of sorts of</font>

29
00:01:34,479 --> 00:01:36,729
black box<font color="#CCCCCC"> testing and is not</font><font color="#E5E5E5"> directly</font>

30
00:01:36,729 --> 00:01:38,920
supported by specific<font color="#E5E5E5"> tools</font><font color="#CCCCCC"> it won't be</font>

31
00:01:38,920 --> 00:01:42,670
covered<font color="#E5E5E5"> here you can see here the hobby</font>

32
00:01:42,670 --> 00:01:44,679
advanced<font color="#E5E5E5"> SQL injection tool application</font>

33
00:01:44,679 --> 00:01:48,390
<font color="#CCCCCC">which can</font><font color="#E5E5E5"> be used for</font><font color="#CCCCCC"> blackbox testing</font>

34
00:01:48,390 --> 00:01:51,250
<font color="#E5E5E5">it serves to detect and exploit SQL</font>

35
00:01:51,250 --> 00:01:55,959
<font color="#E5E5E5">injection vulnerabilities let's enter as</font>

36
00:01:55,959 --> 00:01:57,879
the target the URL of an example<font color="#CCCCCC"> we</font>

37
00:01:57,879 --> 00:01:59,590
talked about<font color="#E5E5E5"> in the module</font><font color="#CCCCCC"> on SQL</font>

38
00:01:59,590 --> 00:02:02,489
<font color="#E5E5E5">injection attacks</font>

39
00:02:02,750 --> 00:02:05,870
[Music]

40
00:02:09,960 --> 00:02:13,080
[Music]

41
00:02:22,909 --> 00:02:25,769
the entered URL is correct<font color="#E5E5E5"> and displays</font>

42
00:02:25,769 --> 00:02:32,519
a normal website as<font color="#E5E5E5"> you can see the tool</font>

43
00:02:32,519 --> 00:02:34,079
first searches<font color="#E5E5E5"> for a keyword which is</font>

44
00:02:34,079 --> 00:02:36,000
<font color="#E5E5E5">later used to</font><font color="#CCCCCC"> specify</font><font color="#E5E5E5"> if a query has</font>

45
00:02:36,000 --> 00:02:38,750
been successful

46
00:02:41,209 --> 00:02:44,099
next<font color="#E5E5E5"> it identifies the SQL injection</font>

47
00:02:44,099 --> 00:02:45,900
attack as an attack on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> unprotected</font>

48
00:02:45,900 --> 00:02:49,920
numerical variable the tool has detected

49
00:02:49,920 --> 00:02:52,500
that<font color="#E5E5E5"> the server uses</font><font color="#CCCCCC"> MySQL v database or</font>

50
00:02:52,500 --> 00:02:55,290
newer versions the number of columns

51
00:02:55,290 --> 00:02:57,239
used by the query<font color="#E5E5E5"> has also been found as</font>

52
00:02:57,239 --> 00:02:58,530
well<font color="#CCCCCC"> as the column which will be</font>

53
00:02:58,530 --> 00:03:00,870
<font color="#E5E5E5">displayed on the</font><font color="#CCCCCC"> website</font>

54
00:03:00,870 --> 00:03:04,020
[Music]

55
00:03:08,090 --> 00:03:10,410
[Music]

56
00:03:10,410 --> 00:03:12,360
the name of the<font color="#E5E5E5"> used database has also</font>

57
00:03:12,360 --> 00:03:15,990
been discovered now we're completely

58
00:03:15,990 --> 00:03:18,060
<font color="#E5E5E5">sure that</font><font color="#CCCCCC"> the tested page is vulnerable</font>

59
00:03:18,060 --> 00:03:22,440
<font color="#CCCCCC">to SQL injection attacks let's use other</font>

60
00:03:22,440 --> 00:03:23,880
<font color="#E5E5E5">features of this tool to retrieve</font>

61
00:03:23,880 --> 00:03:27,500
additional<font color="#E5E5E5"> information on the database</font>

62
00:03:30,110 --> 00:03:34,800
<font color="#E5E5E5">as you can see the current user has been</font>

63
00:03:34,800 --> 00:03:36,840
<font color="#E5E5E5">displayed as well as database version</font>

64
00:03:36,840 --> 00:03:40,530
<font color="#E5E5E5">current database hostname installation</font>

65
00:03:40,530 --> 00:03:42,420
directory<font color="#E5E5E5"> and passwords for</font><font color="#CCCCCC"> the root and</font>

66
00:03:42,420 --> 00:03:51,810
test users the passwords are hashed<font color="#E5E5E5"> but</font>

67
00:03:51,810 --> 00:03:53,430
a potential attacker could take a shot

68
00:03:53,430 --> 00:03:59,190
<font color="#E5E5E5">at cracking them you can also see that</font>

69
00:03:59,190 --> 00:04:01,340
<font color="#CCCCCC">the current user has access to</font><font color="#E5E5E5"> the test</font>

70
00:04:01,340 --> 00:04:05,180
<font color="#CCCCCC">MySQL and information schema</font><font color="#E5E5E5"> databases</font>

71
00:04:05,180 --> 00:04:07,620
using the tables function<font color="#E5E5E5"> you can load</font>

72
00:04:07,620 --> 00:04:09,690
databases accessed by the user and<font color="#E5E5E5"> then</font>

73
00:04:09,690 --> 00:04:11,130
load a set of tables<font color="#CCCCCC"> used by the</font>

74
00:04:11,130 --> 00:04:30,270
<font color="#E5E5E5">database you can also load table columns</font>

75
00:04:30,270 --> 00:04:33,710
<font color="#E5E5E5">and the data stored in the tables</font>

76
00:04:46,930 --> 00:04:50,510
as you<font color="#E5E5E5"> can see the tool has</font>

77
00:04:50,510 --> 00:04:52,880
automatically detected an SQL<font color="#CCCCCC"> injection</font>

78
00:04:52,880 --> 00:04:54,770
vulnerability and<font color="#E5E5E5"> exploited it without</font>

79
00:04:54,770 --> 00:04:57,290
<font color="#E5E5E5">knowing the source code there</font><font color="#CCCCCC"> are</font>

80
00:04:57,290 --> 00:04:59,450
similar<font color="#E5E5E5"> blackbox testing tools used to</font>

81
00:04:59,450 --> 00:05:02,180
<font color="#E5E5E5">search for</font><font color="#CCCCCC"> the XSS path traversal</font><font color="#E5E5E5"> and</font>

82
00:05:02,180 --> 00:05:05,440
PHP injection vulnerabilities

83
00:05:05,440 --> 00:05:07,760
remember that<font color="#E5E5E5"> blackbox testing tools</font>

84
00:05:07,760 --> 00:05:09,680
utilize existent attack scenarios and

85
00:05:09,680 --> 00:05:11,060
<font color="#E5E5E5">may not be able to cope with</font><font color="#CCCCCC"> more</font>

86
00:05:11,060 --> 00:05:16,910
complicated<font color="#CCCCCC"> cases in this case the</font>

87
00:05:16,910 --> 00:05:18,170
manual analysis of a web application

88
00:05:18,170 --> 00:05:20,840
<font color="#E5E5E5">behavior and preparing unique attack</font>

89
00:05:20,840 --> 00:05:22,910
scenarios the methods used<font color="#E5E5E5"> in gray box</font>

90
00:05:22,910 --> 00:05:28,940
testing might be<font color="#E5E5E5"> helpful if you have</font>

91
00:05:28,940 --> 00:05:30,710
access<font color="#E5E5E5"> to</font><font color="#CCCCCC"> a website's code</font><font color="#E5E5E5"> you could</font>

92
00:05:30,710 --> 00:05:37,610
<font color="#E5E5E5">also utilize white box testing tools you</font>

93
00:05:37,610 --> 00:05:39,920
can see<font color="#E5E5E5"> here the</font><font color="#CCCCCC"> rips framework</font><font color="#E5E5E5"> a PHP</font>

94
00:05:39,920 --> 00:05:41,840
scanner used for testing applications

95
00:05:41,840 --> 00:05:48,200
written<font color="#E5E5E5"> in PHP several files used in</font>

96
00:05:48,200 --> 00:05:49,820
<font color="#CCCCCC">previous attacks have</font><font color="#E5E5E5"> been placed in the</font>

97
00:05:49,820 --> 00:05:52,360
scripts directory

98
00:05:55,250 --> 00:05:58,399
[Music]

99
00:05:59,630 --> 00:06:01,800
each containing a<font color="#CCCCCC"> different type of</font>

100
00:06:01,800 --> 00:06:04,380
<font color="#E5E5E5">vulnerability</font><font color="#CCCCCC"> such as the SQL injection</font>

101
00:06:04,380 --> 00:06:07,710
XSS and PHP injection vulnerabilities

102
00:06:07,710 --> 00:06:10,050
<font color="#E5E5E5">let's now check the results of analyzing</font>

103
00:06:10,050 --> 00:06:23,070
the code in this framework scanning is

104
00:06:23,070 --> 00:06:26,910
started<font color="#E5E5E5"> as you</font><font color="#CCCCCC"> can see two SQL injection</font>

105
00:06:26,910 --> 00:06:28,830
vulnerabilities<font color="#E5E5E5"> and one file inclusion</font>

106
00:06:28,830 --> 00:06:32,580
vulnerability<font color="#E5E5E5"> have been found</font><font color="#CCCCCC"> a report</font>

107
00:06:32,580 --> 00:06:34,230
<font color="#E5E5E5">has also been generated which contains</font>

108
00:06:34,230 --> 00:06:35,700
the number of scanned files and

109
00:06:35,700 --> 00:06:40,730
statistics on including sub pages in

110
00:06:40,730 --> 00:06:43,950
this case<font color="#E5E5E5"> the scripts are</font><font color="#CCCCCC"> autonomous but</font>

111
00:06:43,950 --> 00:06:45,630
<font color="#E5E5E5">if they included other files the</font>

112
00:06:45,630 --> 00:06:49,200
framework would<font color="#E5E5E5"> also scan them you can</font>

113
00:06:49,200 --> 00:06:50,940
see here the<font color="#E5E5E5"> number of potential sinks</font>

114
00:06:50,940 --> 00:06:52,860
which are the<font color="#CCCCCC"> actual locations where a</font>

115
00:06:52,860 --> 00:06:55,980
vulnerability<font color="#E5E5E5"> is exploited these could</font>

116
00:06:55,980 --> 00:06:57,450
for example be the functions which

117
00:06:57,450 --> 00:06:59,310
communicate with databases<font color="#E5E5E5"> or which</font>

118
00:06:59,310 --> 00:07:05,250
include files functions declared<font color="#E5E5E5"> is</font>

119
00:07:05,250 --> 00:07:07,140
<font color="#CCCCCC">self-explanatory</font><font color="#E5E5E5"> and indicates the</font>

120
00:07:07,140 --> 00:07:08,970
<font color="#E5E5E5">number of functions declared in analyzed</font>

121
00:07:08,970 --> 00:07:12,270
files unique sources indicates the

122
00:07:12,270 --> 00:07:16,490
number<font color="#E5E5E5"> of</font><font color="#CCCCCC"> sources user input parameters</font>

123
00:07:16,490 --> 00:07:18,990
sensitive<font color="#E5E5E5"> sinks specifies the number of</font>

124
00:07:18,990 --> 00:07:20,550
vulnerable sinks<font color="#CCCCCC"> that are reached by</font>

125
00:07:20,550 --> 00:07:29,760
unfiltered user input the<font color="#E5E5E5"> SQL injection</font>

126
00:07:29,760 --> 00:07:32,010
vulnerability is the first detected hole

127
00:07:32,010 --> 00:07:34,290
<font color="#E5E5E5">you can see here lines up the vulnerable</font>

128
00:07:34,290 --> 00:07:39,180
code<font color="#E5E5E5"> the used parameters once you click</font>

129
00:07:39,180 --> 00:07:40,919
on the question<font color="#E5E5E5"> mark information on the</font>

130
00:07:40,919 --> 00:07:42,930
vulnerability class and the detected

131
00:07:42,930 --> 00:07:45,980
case will be displayed

132
00:07:50,320 --> 00:07:52,520
the source here<font color="#CCCCCC"> is the get variable</font>

133
00:07:52,520 --> 00:07:55,700
<font color="#E5E5E5">which contains</font><font color="#CCCCCC"> the parameters the sink</font>

134
00:07:55,700 --> 00:07:57,800
<font color="#E5E5E5">is</font><font color="#CCCCCC"> the MySQL query function which</font>

135
00:07:57,800 --> 00:08:01,640
execute SQL queries<font color="#E5E5E5"> if unfiltered source</font>

136
00:08:01,640 --> 00:08:04,130
data reaches the sink<font color="#E5E5E5"> this potentially</font>

137
00:08:04,130 --> 00:08:05,240
<font color="#E5E5E5">could trigger a vulnerability</font>

138
00:08:05,240 --> 00:08:09,110
exploitation the vulnerability here is

139
00:08:09,110 --> 00:08:12,470
the<font color="#CCCCCC"> SQL injection flaw the shown</font>

140
00:08:12,470 --> 00:08:14,150
information<font color="#CCCCCC"> also includes a description</font>

141
00:08:14,150 --> 00:08:16,820
<font color="#E5E5E5">of a given vulnerability case examples</font>

142
00:08:16,820 --> 00:08:18,410
of vulnerable<font color="#CCCCCC"> code and exploitation</font>

143
00:08:18,410 --> 00:08:20,660
scenarios<font color="#E5E5E5"> techniques for removing</font><font color="#CCCCCC"> the</font>

144
00:08:20,660 --> 00:08:35,210
flaw and other related<font color="#E5E5E5"> topics as you</font><font color="#CCCCCC"> can</font>

145
00:08:35,210 --> 00:08:36,950
see this tool could<font color="#CCCCCC"> be helpful in</font><font color="#E5E5E5"> the</font>

146
00:08:36,950 --> 00:08:38,510
quick and efficient detection of

147
00:08:38,510 --> 00:08:41,450
<font color="#E5E5E5">potential code vulnerabilities naturally</font>

148
00:08:41,450 --> 00:08:42,650
the framework<font color="#E5E5E5"> could also return</font>

149
00:08:42,650 --> 00:08:45,140
<font color="#E5E5E5">so-called false positives or</font><font color="#CCCCCC"> script</font>

150
00:08:45,140 --> 00:08:46,400
lines which are<font color="#E5E5E5"> not actually vulnerable</font>

151
00:08:46,400 --> 00:08:52,070
<font color="#CCCCCC">in their specific usage this could</font>

152
00:08:52,070 --> 00:08:53,810
happen<font color="#CCCCCC"> because a detailed analysis</font><font color="#E5E5E5"> of</font>

153
00:08:53,810 --> 00:08:55,880
<font color="#E5E5E5">each case might not be feasible or</font>

154
00:08:55,880 --> 00:08:58,160
because the analysis depends on<font color="#E5E5E5"> too many</font>

155
00:08:58,160 --> 00:09:00,170
external<font color="#E5E5E5"> factors</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> is simply too</font>

156
00:09:00,170 --> 00:09:03,440
complicated nonetheless<font color="#CCCCCC"> all information</font>

157
00:09:03,440 --> 00:09:05,210
<font color="#E5E5E5">on potentially dangerous locations is</font>

158
00:09:05,210 --> 00:09:07,810
valuable

159
00:09:08,770 --> 00:09:11,420
you can<font color="#E5E5E5"> view here a report</font><font color="#CCCCCC"> on the second</font>

160
00:09:11,420 --> 00:09:12,500
<font color="#E5E5E5">occurrence of an SQL injection</font>

161
00:09:12,500 --> 00:09:15,170
<font color="#E5E5E5">vulnerability in the guestbook PHP file</font>

162
00:09:15,170 --> 00:09:18,910
along with<font color="#E5E5E5"> the similar</font><font color="#CCCCCC"> information</font>

163
00:09:22,000 --> 00:09:24,650
finally<font color="#CCCCCC"> you can see here an instance of</font>

164
00:09:24,650 --> 00:09:26,810
PHP injection vulnerability<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can also</font>

165
00:09:26,810 --> 00:09:28,310
find out<font color="#CCCCCC"> more on this specific</font>

166
00:09:28,310 --> 00:09:30,110
occurrence<font color="#E5E5E5"> and the vulnerability class</font>

167
00:09:30,110 --> 00:09:34,970
in general to scan the application for

168
00:09:34,970 --> 00:09:37,700
XSS vulnerabilities switch the framework

169
00:09:37,700 --> 00:09:47,660
to a different mode as you<font color="#CCCCCC"> can see the</font>

170
00:09:47,660 --> 00:09:52,520
XSS flaw has been detected<font color="#CCCCCC"> in this case</font>

171
00:09:52,520 --> 00:09:54,920
an SQL<font color="#E5E5E5"> injection vulnerability could</font>

172
00:09:54,920 --> 00:09:57,800
lead to<font color="#E5E5E5"> the injection</font><font color="#CCCCCC"> of HTML code if we</font>

173
00:09:57,800 --> 00:09:59,360
switch<font color="#CCCCCC"> the source type to data coming</font>

174
00:09:59,360 --> 00:10:01,760
from<font color="#E5E5E5"> databases or files the tool will</font>

175
00:10:01,760 --> 00:10:03,980
<font color="#CCCCCC">also detect stored XSS vulnerabilities</font>

176
00:10:03,980 --> 00:10:26,210
such as our guestbook script as you can

177
00:10:26,210 --> 00:10:27,920
see the tools used<font color="#E5E5E5"> for blackbox testing</font>

178
00:10:27,920 --> 00:10:30,050
<font color="#E5E5E5">and white box testing might be really</font>

179
00:10:30,050 --> 00:10:32,570
helpful remember<font color="#CCCCCC"> though that auditing</font>

180
00:10:32,570 --> 00:10:34,400
security needs the experience<font color="#CCCCCC"> and brain</font>

181
00:10:34,400 --> 00:10:36,680
<font color="#CCCCCC">power of</font><font color="#E5E5E5"> actual humans so don't fully</font>

182
00:10:36,680 --> 00:10:39,440
rely on<font color="#E5E5E5"> software rather use it as</font>

183
00:10:39,440 --> 00:10:46,430
additional and valuable help that's all

184
00:10:46,430 --> 00:10:48,380
in module<font color="#CCCCCC"> 20</font><font color="#E5E5E5"> and it's also the end of</font>

185
00:10:48,380 --> 00:10:52,550
this course<font color="#E5E5E5"> I hope that the resources</font>

186
00:10:52,550 --> 00:10:54,200
<font color="#E5E5E5">and</font><font color="#CCCCCC"> advice we've given you have proved</font>

187
00:10:54,200 --> 00:10:56,750
<font color="#CCCCCC">useful and very interesting</font><font color="#E5E5E5"> thanks for</font>

188
00:10:56,750 --> 00:10:58,820
your<font color="#E5E5E5"> attention</font><font color="#CCCCCC"> please feel free to check</font>

189
00:10:58,820 --> 00:11:00,200
other training courses which you can

190
00:11:00,200 --> 00:11:04,000
<font color="#E5E5E5">find on our website see you</font>

191
00:11:05,320 --> 00:00:00,000
<font color="#E5E5E5">you</font>

