1
00:00:13,139 --> 00:00:16,519
welcome<font color="#E5E5E5"> to module 12</font>

2
00:00:17,590 --> 00:00:19,540
in this module we'll discuss<font color="#CCCCCC"> direct</font>

3
00:00:19,540 --> 00:00:22,270
static code injection<font color="#E5E5E5"> attacks</font><font color="#CCCCCC"> a direct</font>

4
00:00:22,270 --> 00:00:24,250
static code injection vulnerability<font color="#CCCCCC"> is a</font>

5
00:00:24,250 --> 00:00:26,380
special instance of the<font color="#E5E5E5"> PHP injection</font>

6
00:00:26,380 --> 00:00:29,560
flaw it occurs<font color="#E5E5E5"> when users are</font><font color="#CCCCCC"> able to</font>

7
00:00:29,560 --> 00:00:31,599
<font color="#E5E5E5">affect the data pass to a file</font><font color="#CCCCCC"> stored</font>

8
00:00:31,599 --> 00:00:33,670
server-side<font color="#E5E5E5"> where the file is further</font>

9
00:00:33,670 --> 00:00:41,050
processed<font color="#CCCCCC"> by a</font><font color="#E5E5E5"> PHP interpreter let's</font>

10
00:00:41,050 --> 00:00:42,760
take a look at an example<font color="#E5E5E5"> designed to</font>

11
00:00:42,760 --> 00:00:48,340
illustrate<font color="#E5E5E5"> this the file contains a</font>

12
00:00:48,340 --> 00:00:50,140
simple<font color="#E5E5E5"> script which logs visitor</font>

13
00:00:50,140 --> 00:00:55,170
parameters<font color="#CCCCCC"> a file</font><font color="#E5E5E5"> is open server-side</font>

14
00:00:55,170 --> 00:00:57,730
next the script writes data to the<font color="#E5E5E5"> files</font>

15
00:00:57,730 --> 00:01:00,399
such as<font color="#CCCCCC"> a user</font><font color="#E5E5E5"> agent session length and</font>

16
00:01:00,399 --> 00:01:07,420
IP address date and time is generated by

17
00:01:07,420 --> 00:01:10,720
a PHP<font color="#E5E5E5"> interpreter an IP</font><font color="#CCCCCC"> address is</font>

18
00:01:10,720 --> 00:01:12,880
referred by a<font color="#E5E5E5"> web server which means</font>

19
00:01:12,880 --> 00:01:14,590
that both values will have<font color="#CCCCCC"> a</font><font color="#E5E5E5"> specified</font>

20
00:01:14,590 --> 00:01:17,110
format user agent on the other hand may

21
00:01:17,110 --> 00:01:21,700
hold any format<font color="#E5E5E5"> as you can see the input</font>

22
00:01:21,700 --> 00:01:24,009
<font color="#E5E5E5">is unfiltered</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> is logged directly to</font>

23
00:01:24,009 --> 00:01:31,179
a file let's now take a look<font color="#CCCCCC"> at a file</font>

24
00:01:31,179 --> 00:01:34,780
<font color="#CCCCCC">used for browsing</font><font color="#E5E5E5"> the logs our database</font>

25
00:01:34,780 --> 00:01:36,550
file which holds visitor records<font color="#CCCCCC"> is</font>

26
00:01:36,550 --> 00:01:43,209
added to<font color="#E5E5E5"> log view PHP the include</font>

27
00:01:43,209 --> 00:01:45,099
function parses the file and executes

28
00:01:45,099 --> 00:01:50,349
the<font color="#E5E5E5"> embedded PHP code you can see here</font>

29
00:01:50,349 --> 00:01:55,149
sample database entries let's see now

30
00:01:55,149 --> 00:01:58,619
how the script works in practice

31
00:02:02,750 --> 00:02:05,870
[Music]

32
00:02:05,960 --> 00:02:08,090
as you can see the file has logged<font color="#E5E5E5"> an</font>

33
00:02:08,090 --> 00:02:09,619
entry which contains our session history

34
00:02:09,619 --> 00:02:12,380
<font color="#CCCCCC">the IP address</font><font color="#E5E5E5"> session length and user</font>

35
00:02:12,380 --> 00:02:19,490
agent let's now use the live HTTP

36
00:02:19,490 --> 00:02:21,470
headers add-on<font color="#E5E5E5"> which enables you to</font>

37
00:02:21,470 --> 00:02:24,620
modify HTTP requests<font color="#E5E5E5"> and also makes it</font>

38
00:02:24,620 --> 00:02:28,600
<font color="#E5E5E5">possible to alter the user agent string</font>

39
00:02:28,900 --> 00:02:31,580
first open the page again so that live

40
00:02:31,580 --> 00:02:35,950
HTTP headers<font color="#E5E5E5"> may capture the</font><font color="#CCCCCC"> requests</font>

41
00:02:55,370 --> 00:02:57,349
generate a new request based on the

42
00:02:57,349 --> 00:03:00,920
captured query<font color="#E5E5E5"> as you can see all data</font>

43
00:03:00,920 --> 00:03:02,750
can<font color="#CCCCCC"> be</font><font color="#E5E5E5"> freely tampered with before it's</font>

44
00:03:02,750 --> 00:03:03,739
sent to the<font color="#CCCCCC"> webserver</font>

45
00:03:03,739 --> 00:03:06,019
giving us a chance<font color="#CCCCCC"> to manipulate the</font>

46
00:03:06,019 --> 00:03:13,010
headers let's try to put the<font color="#E5E5E5"> following</font>

47
00:03:13,010 --> 00:03:15,849
record into our database

48
00:03:30,580 --> 00:03:33,709
as you<font color="#E5E5E5"> can see no error message has</font><font color="#CCCCCC"> been</font>

49
00:03:33,709 --> 00:03:36,260
displayed<font color="#E5E5E5"> let's take a look at the</font>

50
00:03:36,260 --> 00:03:42,069
database you<font color="#E5E5E5"> can see here our</font><font color="#CCCCCC"> PHP string</font>

51
00:03:42,069 --> 00:03:44,420
let's find out how the file will affect

52
00:03:44,420 --> 00:03:48,549
the behavior<font color="#CCCCCC"> of the log view PHP script</font>

53
00:03:55,020 --> 00:03:57,690
the injected PHP code has been<font color="#CCCCCC"> executed</font>

54
00:03:57,690 --> 00:03:59,010
as predicted

55
00:03:59,010 --> 00:04:02,150
[Music]

56
00:04:06,220 --> 00:04:09,340
[Music]

57
00:04:09,900 --> 00:04:11,730
what could be<font color="#CCCCCC"> done to evade the</font>

58
00:04:11,730 --> 00:04:13,610
exploitation<font color="#CCCCCC"> of</font><font color="#E5E5E5"> these</font><font color="#CCCCCC"> vulnerabilities</font>

59
00:04:13,610 --> 00:04:16,290
<font color="#E5E5E5">first bear in mind that parameters like</font>

60
00:04:16,290 --> 00:04:19,589
HTTP user agent our user input and

61
00:04:19,589 --> 00:04:22,079
<font color="#E5E5E5">cannot be relied upon as they may hide</font>

62
00:04:22,079 --> 00:04:26,970
malicious scripts second<font color="#E5E5E5"> remember</font><font color="#CCCCCC"> that</font>

63
00:04:26,970 --> 00:04:28,650
the include function is used for

64
00:04:28,650 --> 00:04:30,810
including files that contain PHP code

65
00:04:30,810 --> 00:04:33,000
since our intention here<font color="#CCCCCC"> is only to</font>

66
00:04:33,000 --> 00:04:35,100
<font color="#E5E5E5">display the contents of the file the</font>

67
00:04:35,100 --> 00:04:37,199
include function is<font color="#CCCCCC"> non-essential you</font>

68
00:04:37,199 --> 00:04:39,030
could replace<font color="#E5E5E5"> it with the echo file get</font>

69
00:04:39,030 --> 00:04:42,960
contents call let's see how this affects

70
00:04:42,960 --> 00:04:46,340
<font color="#CCCCCC">the functioning</font><font color="#E5E5E5"> of our script</font>

71
00:04:55,910 --> 00:04:59,780
as we can see the PHP code<font color="#E5E5E5"> has been</font>

72
00:04:59,780 --> 00:05:02,390
<font color="#E5E5E5">displayed but has not been</font><font color="#CCCCCC"> executed is</font>

73
00:05:02,390 --> 00:05:04,070
this enough to secure ourselves<font color="#E5E5E5"> from an</font>

74
00:05:04,070 --> 00:05:07,460
attack unfortunately not<font color="#E5E5E5"> if the code is</font>

75
00:05:07,460 --> 00:05:09,740
displayed only<font color="#E5E5E5"> a hacker may inject an</font>

76
00:05:09,740 --> 00:05:12,440
image code instead of PHP resulting in

77
00:05:12,440 --> 00:05:21,770
an XSS attack let's try to simulate this

78
00:05:21,770 --> 00:05:24,250
scenario

79
00:05:42,699 --> 00:05:45,859
to do this<font color="#E5E5E5"> make slight</font><font color="#CCCCCC"> changes in the</font>

80
00:05:45,859 --> 00:05:48,219
<font color="#E5E5E5">request</font>

81
00:05:55,280 --> 00:05:58,400
[Music]

82
00:06:02,460 --> 00:06:05,589
[Music]

83
00:06:06,050 --> 00:06:08,900
our<font color="#E5E5E5"> database now contains HTML</font><font color="#CCCCCC"> code with</font>

84
00:06:08,900 --> 00:06:11,840
<font color="#E5E5E5">JavaScript let's see if this affects the</font>

85
00:06:11,840 --> 00:06:14,440
<font color="#CCCCCC">reading of logs</font>

86
00:06:26,169 --> 00:06:28,479
as we can see the<font color="#E5E5E5"> JavaScript</font><font color="#CCCCCC"> code has</font>

87
00:06:28,479 --> 00:06:30,099
<font color="#CCCCCC">been executed which makes this an</font>

88
00:06:30,099 --> 00:06:31,840
<font color="#E5E5E5">instance of a cross-site scripting</font>

89
00:06:31,840 --> 00:06:35,379
attack these types of attacks<font color="#CCCCCC"> will be</font>

90
00:06:35,379 --> 00:06:37,659
discussed in greater<font color="#E5E5E5"> detail in</font><font color="#CCCCCC"> module 14</font>

91
00:06:37,659 --> 00:06:40,449
<font color="#E5E5E5">for now remember</font><font color="#CCCCCC"> to never underestimate</font>

92
00:06:40,449 --> 00:06:42,699
the<font color="#E5E5E5"> risk connected with inadequate user</font>

93
00:06:42,699 --> 00:06:46,389
input parsing we could use the HTML

94
00:06:46,389 --> 00:06:48,099
<font color="#E5E5E5">special cars</font><font color="#CCCCCC"> functions to convert</font>

95
00:06:48,099 --> 00:06:50,199
characters used in HTML tags into

96
00:06:50,199 --> 00:06:52,270
entities that are displayed but not

97
00:06:52,270 --> 00:06:53,370
interpreted

98
00:06:53,370 --> 00:06:56,509
[Music]

99
00:07:19,670 --> 00:07:22,020
let's see how the script will behave in

100
00:07:22,020 --> 00:07:25,740
<font color="#E5E5E5">this situation clear the</font><font color="#CCCCCC"> edit</font><font color="#E5E5E5"> data from</font>

101
00:07:25,740 --> 00:07:28,110
the database<font color="#CCCCCC"> and execute another</font><font color="#E5E5E5"> HTML</font>

102
00:07:28,110 --> 00:07:30,290
request

103
00:07:51,510 --> 00:07:54,630
[Music]

104
00:07:58,720 --> 00:08:00,740
[Music]

105
00:08:00,740 --> 00:08:03,020
as you can see special<font color="#E5E5E5"> characters have</font>

106
00:08:03,020 --> 00:08:05,599
<font color="#CCCCCC">been converted to</font><font color="#E5E5E5"> HTML entities they are</font>

107
00:08:05,599 --> 00:08:07,729
displayed on<font color="#CCCCCC"> the page but JavaScript</font>

108
00:08:07,729 --> 00:08:10,970
code has not been<font color="#E5E5E5"> executed which means</font>

109
00:08:10,970 --> 00:08:12,259
that we've managed<font color="#CCCCCC"> to successfully</font>

110
00:08:12,259 --> 00:08:14,000
<font color="#E5E5E5">protect ourselves against a code</font>

111
00:08:14,000 --> 00:08:16,699
injection<font color="#E5E5E5"> vulnerability that's all in</font>

112
00:08:16,699 --> 00:08:19,370
module 12<font color="#E5E5E5"> thanks</font><font color="#CCCCCC"> for your</font><font color="#E5E5E5"> attention and</font>

113
00:08:19,370 --> 00:08:21,319
<font color="#CCCCCC">see you</font><font color="#E5E5E5"> in the next module which will</font>

114
00:08:21,319 --> 00:08:26,139
focus<font color="#E5E5E5"> on SQL injection see you there</font>

115
00:08:31,620 --> 00:08:34,380
welcome to module<font color="#E5E5E5"> 13</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> module will</font>

116
00:08:34,380 --> 00:08:37,500
focus on SQL<font color="#E5E5E5"> injection many web</font>

117
00:08:37,500 --> 00:08:39,510
applications<font color="#CCCCCC"> today make use of databases</font>

118
00:08:39,510 --> 00:08:43,890
to<font color="#E5E5E5"> store data if that's the case SQL</font>

119
00:08:43,890 --> 00:08:45,840
queries need to be an integral<font color="#E5E5E5"> part</font><font color="#CCCCCC"> of</font>

120
00:08:45,840 --> 00:08:48,360
these applications SQL queries are used

121
00:08:48,360 --> 00:08:50,520
to retrieve<font color="#CCCCCC"> and pre-process specific</font>

122
00:08:50,520 --> 00:08:54,150
data stored in a site database<font color="#E5E5E5"> these</font>

123
00:08:54,150 --> 00:08:56,280
queries are often generated dynamically

124
00:08:56,280 --> 00:08:58,260
<font color="#E5E5E5">using input parameters passed through</font>

125
00:08:58,260 --> 00:09:02,700
the get and post methods<font color="#E5E5E5"> an SQL</font>

126
00:09:02,700 --> 00:09:04,410
<font color="#E5E5E5">injection vulnerability occurs when</font>

127
00:09:04,410 --> 00:09:06,450
users can manipulate the final<font color="#E5E5E5"> content</font>

128
00:09:06,450 --> 00:09:12,960
of an executed SQL query take a look at

129
00:09:12,960 --> 00:09:14,430
a sample script<font color="#E5E5E5"> designed to illustrate</font>

130
00:09:14,430 --> 00:09:17,820
<font color="#E5E5E5">this the first page we'll discuss is a</font>

131
00:09:17,820 --> 00:09:19,800
simple login<font color="#CCCCCC"> form which first connects</font>

132
00:09:19,800 --> 00:09:22,460
to a<font color="#E5E5E5"> database</font>

133
00:09:23,520 --> 00:09:26,630
[Music]

134
00:09:30,880 --> 00:09:34,540
<font color="#CCCCCC">a form is displayed if the form</font><font color="#E5E5E5"> is</font>

135
00:09:34,540 --> 00:09:36,730
passed to<font color="#CCCCCC"> a script</font><font color="#E5E5E5"> an SQL query is</font>

136
00:09:36,730 --> 00:09:38,350
generated which<font color="#E5E5E5"> retrieves appropriate</font>

137
00:09:38,350 --> 00:09:40,270
database records for the<font color="#E5E5E5"> submitted user</font>

138
00:09:40,270 --> 00:09:44,260
credentials<font color="#E5E5E5"> if this operation</font><font color="#CCCCCC"> is</font>

139
00:09:44,260 --> 00:09:46,120
successful<font color="#CCCCCC"> an appropriate message</font><font color="#E5E5E5"> will</font>

140
00:09:46,120 --> 00:09:49,420
be displayed<font color="#CCCCCC"> if it fails</font><font color="#E5E5E5"> a corresponding</font>

141
00:09:49,420 --> 00:09:52,620
message<font color="#E5E5E5"> will appear</font><font color="#CCCCCC"> to the user</font>

142
00:10:03,670 --> 00:10:07,200
let's see how the script works

143
00:10:19,880 --> 00:10:21,650
here's the<font color="#CCCCCC"> login script</font>

144
00:10:21,650 --> 00:10:24,750
[Music]

145
00:10:27,980 --> 00:10:29,900
we have successfully<font color="#E5E5E5"> logged in because</font>

146
00:10:29,900 --> 00:10:31,820
<font color="#CCCCCC">the database</font><font color="#E5E5E5"> contains records for the</font>

147
00:10:31,820 --> 00:10:34,400
admin<font color="#E5E5E5"> user holding the test password now</font>

148
00:10:34,400 --> 00:10:45,220
enter invalid<font color="#E5E5E5"> user credentials as</font>

149
00:10:45,220 --> 00:10:50,090
expected the login has failed<font color="#E5E5E5"> notice</font>

150
00:10:50,090 --> 00:10:52,490
<font color="#E5E5E5">that user supplied data is not filtered</font>

151
00:10:52,490 --> 00:10:57,140
or validated in any manner this means

152
00:10:57,140 --> 00:10:58,910
<font color="#E5E5E5">that users have control over the result</font>

153
00:10:58,910 --> 00:11:02,930
SQL query try to<font color="#E5E5E5"> think what a potential</font>

154
00:11:02,930 --> 00:11:06,340
<font color="#E5E5E5">attacker could do in this situation</font>

155
00:11:06,340 --> 00:11:08,540
let's see what will<font color="#CCCCCC"> happen if the</font>

156
00:11:08,540 --> 00:11:11,590
<font color="#E5E5E5">following data is sent</font>

157
00:11:19,770 --> 00:11:22,890
[Music]

158
00:11:27,330 --> 00:11:29,500
while these<font color="#E5E5E5"> credentials are certainly</font>

159
00:11:29,500 --> 00:11:32,260
invalid<font color="#E5E5E5"> altering the SQL query results</font>

160
00:11:32,260 --> 00:11:39,340
in a successful<font color="#CCCCCC"> login take a look at</font>

161
00:11:39,340 --> 00:11:41,790
<font color="#E5E5E5">another example</font>

162
00:11:51,280 --> 00:11:53,380
we can see here<font color="#CCCCCC"> a</font><font color="#E5E5E5"> simple application</font>

163
00:11:53,380 --> 00:11:55,930
<font color="#E5E5E5">which loads articles using an identifier</font>

164
00:11:55,930 --> 00:12:00,910
<font color="#CCCCCC">pass through get the ID 1 value holds a</font>

165
00:12:00,910 --> 00:12:03,130
sample article with<font color="#E5E5E5"> the content test</font>

166
00:12:03,130 --> 00:12:12,460
article let's see what will happen<font color="#CCCCCC"> if</font><font color="#E5E5E5"> we</font>

167
00:12:12,460 --> 00:12:15,690
change the query slightly

168
00:12:17,900 --> 00:12:21,020
[Music]

169
00:12:23,820 --> 00:12:26,070
since no content has been displayed we

170
00:12:26,070 --> 00:12:27,570
might assume that<font color="#E5E5E5"> the application is</font>

171
00:12:27,570 --> 00:12:29,870
vulnerable<font color="#CCCCCC"> to SQL injection attacks</font>

172
00:12:29,870 --> 00:12:32,540
<font color="#E5E5E5">let's try to verify if this is the case</font>

173
00:12:32,540 --> 00:12:36,540
<font color="#CCCCCC">add in a string which will constitute an</font>

174
00:12:36,540 --> 00:12:38,700
invalid identifier but which<font color="#E5E5E5"> won't</font>

175
00:12:38,700 --> 00:12:41,010
<font color="#E5E5E5">change the behavior of an SQL query in</font>

176
00:12:41,010 --> 00:12:43,880
which it's placed

177
00:12:53,910 --> 00:12:56,160
<font color="#E5E5E5">as we can see the approach has worked</font>

178
00:12:56,160 --> 00:12:58,590
<font color="#E5E5E5">this confirms our suspicions we may</font>

179
00:12:58,590 --> 00:13:01,070
freely alter the end of an SQL query

180
00:13:01,070 --> 00:13:04,140
<font color="#E5E5E5">still we need to find out which table</font>

181
00:13:04,140 --> 00:13:06,420
<font color="#E5E5E5">the query works</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> how many columns the</font>

182
00:13:06,420 --> 00:13:10,350
table has by<font color="#CCCCCC"> using the order by keyword</font>

183
00:13:10,350 --> 00:13:12,360
used<font color="#E5E5E5"> to sort records</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> may discover</font>

184
00:13:12,360 --> 00:13:14,490
the number<font color="#CCCCCC"> of columns returned by an SQL</font>

185
00:13:14,490 --> 00:13:17,820
query order by might be used<font color="#E5E5E5"> to specify</font>

186
00:13:17,820 --> 00:13:20,070
<font color="#E5E5E5">the number of a column by which columns</font>

187
00:13:20,070 --> 00:13:23,850
will be<font color="#E5E5E5"> ordered if the number</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> greater</font>

188
00:13:23,850 --> 00:13:25,470
<font color="#E5E5E5">than the</font><font color="#CCCCCC"> amount of columns returned by</font>

189
00:13:25,470 --> 00:13:27,720
the query the query will<font color="#CCCCCC"> be incorrect</font>

190
00:13:27,720 --> 00:13:31,430
<font color="#CCCCCC">and won't</font><font color="#E5E5E5"> return the requested result if</font>

191
00:13:31,430 --> 00:13:34,830
we submit<font color="#E5E5E5"> one as the specified value</font><font color="#CCCCCC"> the</font>

192
00:13:34,830 --> 00:13:36,270
columns will<font color="#CCCCCC"> be sorted by</font><font color="#E5E5E5"> the first</font>

193
00:13:36,270 --> 00:13:39,480
column<font color="#E5E5E5"> which should always exist confirm</font>

194
00:13:39,480 --> 00:13:42,860
this by<font color="#CCCCCC"> entering the following address</font>

195
00:13:48,500 --> 00:13:51,570
let's now try<font color="#E5E5E5"> to specify</font><font color="#CCCCCC"> as the value a</font>

196
00:13:51,570 --> 00:13:53,130
number so great it probably won't

197
00:13:53,130 --> 00:13:54,660
correspond to the number of<font color="#E5E5E5"> columns</font>

198
00:13:54,660 --> 00:13:59,370
returned by a query in this way we'll

199
00:13:59,370 --> 00:14:00,720
<font color="#E5E5E5">make sure the query is working as</font>

200
00:14:00,720 --> 00:14:03,230
predicted

201
00:14:15,250 --> 00:14:17,650
as we can see the query indeed has not

202
00:14:17,650 --> 00:14:20,080
contained 100 columns this is why no

203
00:14:20,080 --> 00:14:22,510
content has<font color="#E5E5E5"> been displayed the database</font>

204
00:14:22,510 --> 00:14:24,220
engine<font color="#E5E5E5"> has interpreted the query as</font>

205
00:14:24,220 --> 00:14:25,000
incorrect

206
00:14:25,000 --> 00:14:27,460
<font color="#E5E5E5">now let's submit several values to</font>

207
00:14:27,460 --> 00:14:35,940
discover the exact number of<font color="#E5E5E5"> columns as</font>

208
00:14:35,940 --> 00:14:38,740
we can see the query fails with the

209
00:14:38,740 --> 00:14:43,320
parameter<font color="#CCCCCC"> of</font><font color="#E5E5E5"> 10 it does not work with</font><font color="#CCCCCC"> 5</font>

210
00:14:43,740 --> 00:14:46,120
the operation is successful<font color="#CCCCCC"> with the</font>

211
00:14:46,120 --> 00:14:48,250
number<font color="#E5E5E5"> 2 so we know that</font><font color="#CCCCCC"> there are at</font>

212
00:14:48,250 --> 00:14:50,440
<font color="#CCCCCC">least</font><font color="#E5E5E5"> two columns but no more than</font><font color="#CCCCCC"> 5</font>

213
00:14:50,440 --> 00:15:01,390
<font color="#CCCCCC">let's try with 3</font><font color="#E5E5E5"> the query fails for</font>

214
00:15:01,390 --> 00:15:03,310
this value which means that it returns

215
00:15:03,310 --> 00:15:08,350
exactly<font color="#CCCCCC"> two columns</font><font color="#E5E5E5"> we'll</font><font color="#CCCCCC"> use the Union</font>

216
00:15:08,350 --> 00:15:10,120
function which allows<font color="#CCCCCC"> you to</font><font color="#E5E5E5"> combine</font>

217
00:15:10,120 --> 00:15:12,220
result sets of select statements from

218
00:15:12,220 --> 00:15:14,650
<font color="#E5E5E5">both sides Union</font><font color="#CCCCCC"> requires the statements</font>

219
00:15:14,650 --> 00:15:17,880
<font color="#E5E5E5">to have the same number of columns</font>

220
00:15:19,460 --> 00:15:22,570
[Music]

221
00:15:24,260 --> 00:15:27,000
the attempt has succeeded<font color="#E5E5E5"> we now know</font>

222
00:15:27,000 --> 00:15:28,560
that<font color="#E5E5E5"> the database supports the Union</font>

223
00:15:28,560 --> 00:15:31,620
function none<font color="#E5E5E5"> of the values we passed</font>

224
00:15:31,620 --> 00:15:33,600
has been displayed<font color="#E5E5E5"> the reason for this</font>

225
00:15:33,600 --> 00:15:35,640
is<font color="#CCCCCC"> that the page</font><font color="#E5E5E5"> only displays the first</font>

226
00:15:35,640 --> 00:15:37,620
<font color="#E5E5E5">result set while the ignored second</font>

227
00:15:37,620 --> 00:15:39,570
result<font color="#CCCCCC"> is the one which was</font><font color="#E5E5E5"> added by</font>

228
00:15:39,570 --> 00:15:41,940
Union<font color="#E5E5E5"> once we had the and one equals</font>

229
00:15:41,940 --> 00:15:44,130
<font color="#E5E5E5">zero string to the first request will</font>

230
00:15:44,130 --> 00:15:46,560
cause it to<font color="#E5E5E5"> return no results and so our</font>

231
00:15:46,560 --> 00:15:48,540
request which is<font color="#CCCCCC"> glued by Union becomes</font>

232
00:15:48,540 --> 00:15:58,860
the only<font color="#E5E5E5"> request this time</font><font color="#CCCCCC"> one of the</font>

233
00:15:58,860 --> 00:16:00,510
numbers we passed in a select statement

234
00:16:00,510 --> 00:16:04,080
has been<font color="#E5E5E5"> displayed the displayed number</font>

235
00:16:04,080 --> 00:16:05,820
<font color="#CCCCCC">two</font><font color="#E5E5E5"> means that the value</font><font color="#CCCCCC"> of the second</font>

236
00:16:05,820 --> 00:16:08,010
column<font color="#E5E5E5"> is displayed on</font><font color="#CCCCCC"> the page and may</font>

237
00:16:08,010 --> 00:16:09,930
be used for<font color="#E5E5E5"> passing data we'd like to</font>

238
00:16:09,930 --> 00:16:16,200
retrieve from the database let's<font color="#E5E5E5"> use</font>

239
00:16:16,200 --> 00:16:19,170
several standard functions the user

240
00:16:19,170 --> 00:16:21,060
function returns the<font color="#E5E5E5"> name of the</font><font color="#CCCCCC"> current</font>

241
00:16:21,060 --> 00:16:23,750
database<font color="#E5E5E5"> user</font>

242
00:16:32,970 --> 00:16:36,610
in this case this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the test user</font>

243
00:16:36,610 --> 00:16:38,470
working<font color="#CCCCCC"> on a computer where a database</font>

244
00:16:38,470 --> 00:16:40,750
server has<font color="#CCCCCC"> been launched</font><font color="#E5E5E5"> the version</font>

245
00:16:40,750 --> 00:16:42,340
function returns the<font color="#E5E5E5"> version of the</font>

246
00:16:42,340 --> 00:16:50,320
database what else could be<font color="#CCCCCC"> done in this</font>

247
00:16:50,320 --> 00:16:54,610
situation<font color="#E5E5E5"> starting with</font><font color="#CCCCCC"> MySQL 5</font><font color="#E5E5E5"> the</font>

248
00:16:54,610 --> 00:16:56,350
<font color="#E5E5E5">software is equipped with information</font>

249
00:16:56,350 --> 00:16:58,480
<font color="#CCCCCC">schema a special database</font><font color="#E5E5E5"> used for</font>

250
00:16:58,480 --> 00:17:00,310
storing information<font color="#E5E5E5"> on the structure</font><font color="#CCCCCC"> of</font>

251
00:17:00,310 --> 00:17:02,560
all other databases<font color="#E5E5E5"> and tables which can</font>

252
00:17:02,560 --> 00:17:05,109
be<font color="#E5E5E5"> accessed by users this</font><font color="#CCCCCC"> is a form</font><font color="#E5E5E5"> of a</font>

253
00:17:05,109 --> 00:17:09,790
database reflection mechanism the first

254
00:17:09,790 --> 00:17:12,069
way<font color="#CCCCCC"> of using</font><font color="#E5E5E5"> it in SQL injection attacks</font>

255
00:17:12,069 --> 00:17:15,710
entails<font color="#E5E5E5"> the discovery of table names</font>

256
00:17:15,710 --> 00:17:18,829
[Music]

257
00:17:28,250 --> 00:17:30,780
select table name from<font color="#E5E5E5"> information</font>

258
00:17:30,780 --> 00:17:32,730
schema<font color="#CCCCCC"> in tables which contains</font>

259
00:17:32,730 --> 00:17:34,860
<font color="#CCCCCC">information on all tables viewable by</font>

260
00:17:34,860 --> 00:17:46,230
<font color="#E5E5E5">the current user the head of the</font><font color="#CCCCCC"> table</font>

261
00:17:46,230 --> 00:17:48,210
contains the<font color="#E5E5E5"> system tables as</font><font color="#CCCCCC"> well</font><font color="#E5E5E5"> as</font>

262
00:17:48,210 --> 00:17:51,780
information schema tables to discover

263
00:17:51,780 --> 00:17:53,610
other tables use the limit function

264
00:17:53,610 --> 00:17:57,680
<font color="#E5E5E5">which allows you to set a result range</font>

265
00:18:06,650 --> 00:18:09,749
[Music]

266
00:18:13,830 --> 00:18:16,950
[Music]

267
00:18:20,020 --> 00:18:29,840
<font color="#E5E5E5">100 is too big while 20 still shows</font><font color="#CCCCCC"> the</font>

268
00:18:29,840 --> 00:18:32,559
system tables

269
00:18:40,850 --> 00:18:43,530
the xxx value has returned the<font color="#E5E5E5"> users</font>

270
00:18:43,530 --> 00:18:48,150
<font color="#E5E5E5">table the name looks promising will now</font>

271
00:18:48,150 --> 00:18:49,530
use the<font color="#E5E5E5"> columns table from the</font>

272
00:18:49,530 --> 00:18:53,100
<font color="#E5E5E5">information schema</font><font color="#CCCCCC"> as you can imagine</font>

273
00:18:53,100 --> 00:18:55,679
<font color="#E5E5E5">the file contains column names viewable</font>

274
00:18:55,679 --> 00:18:58,429
by<font color="#CCCCCC"> a current</font><font color="#E5E5E5"> user</font>

275
00:19:04,780 --> 00:19:07,880
[Music]

276
00:19:11,950 --> 00:19:15,079
[Music]

277
00:19:16,560 --> 00:19:19,210
at a<font color="#E5E5E5"> condition which specifies that</font>

278
00:19:19,210 --> 00:19:23,070
we're interested in user table columns

279
00:19:31,440 --> 00:19:33,760
column name is the name of<font color="#CCCCCC"> a</font><font color="#E5E5E5"> database</font>

280
00:19:33,760 --> 00:19:37,800
field<font color="#E5E5E5"> which contains column names</font>

281
00:19:45,789 --> 00:19:48,820
as we can see<font color="#CCCCCC"> id is the first</font><font color="#E5E5E5"> column</font>

282
00:19:48,820 --> 00:20:02,529
<font color="#E5E5E5">name the second is disabled attempts the</font>

283
00:20:02,529 --> 00:20:06,389
next is<font color="#CCCCCC"> login</font><font color="#E5E5E5"> which looks interesting</font>

284
00:20:07,440 --> 00:20:12,159
the fourth column is<font color="#CCCCCC"> pass in this way we</font>

285
00:20:12,159 --> 00:20:14,080
have<font color="#CCCCCC"> specified a current user</font><font color="#E5E5E5"> and can</font>

286
00:20:14,080 --> 00:20:16,090
access<font color="#E5E5E5"> the users table which contains</font>

287
00:20:16,090 --> 00:20:18,809
the login<font color="#E5E5E5"> and password</font>

288
00:20:34,090 --> 00:20:37,210
<font color="#E5E5E5">as you can see the first record of the</font>

289
00:20:37,210 --> 00:20:40,179
<font color="#E5E5E5">table defines administrator we can also</font>

290
00:20:40,179 --> 00:20:43,380
display the<font color="#CCCCCC"> past column</font>

291
00:20:53,130 --> 00:20:57,000
to see the password unencrypted to

292
00:20:57,000 --> 00:20:58,860
prevent this<font color="#E5E5E5"> we need to remember several</font>

293
00:20:58,860 --> 00:21:02,280
steps the first<font color="#E5E5E5"> step</font><font color="#CCCCCC"> is to put all</font>

294
00:21:02,280 --> 00:21:06,870
<font color="#CCCCCC">parameters in quotes while this isn't</font><font color="#E5E5E5"> a</font>

295
00:21:06,870 --> 00:21:09,270
security measure per se<font color="#E5E5E5"> it is the basis</font>

296
00:21:09,270 --> 00:21:10,860
allowing<font color="#E5E5E5"> for the data to be filtered</font>

297
00:21:10,860 --> 00:21:14,550
further<font color="#E5E5E5"> in the case of this script the</font>

298
00:21:14,550 --> 00:21:16,410
identifier is always a numerical value

299
00:21:16,410 --> 00:21:19,140
<font color="#E5E5E5">using</font><font color="#CCCCCC"> the info function</font><font color="#E5E5E5"> we can make sure</font>

300
00:21:19,140 --> 00:21:21,180
<font color="#CCCCCC">that the return value will</font><font color="#E5E5E5"> always</font><font color="#CCCCCC"> be a</font>

301
00:21:21,180 --> 00:21:23,280
<font color="#CCCCCC">number if a string</font><font color="#E5E5E5"> is placed at</font><font color="#CCCCCC"> the</font>

302
00:21:23,280 --> 00:21:25,770
start<font color="#E5E5E5"> of a function the zero value will</font>

303
00:21:25,770 --> 00:21:28,290
be returned<font color="#E5E5E5"> let's see how this works in</font>

304
00:21:28,290 --> 00:21:30,470
<font color="#CCCCCC">practice</font>

305
00:21:55,800 --> 00:21:59,610
as we can see the attack has<font color="#CCCCCC"> failed</font><font color="#E5E5E5"> what</font>

306
00:21:59,610 --> 00:22:01,380
can<font color="#E5E5E5"> be</font><font color="#CCCCCC"> done if the query</font><font color="#E5E5E5"> has to be made</font>

307
00:22:01,380 --> 00:22:14,760
up of strings notice that if attackers

308
00:22:14,760 --> 00:22:16,830
are to manipulate the content of an SQL

309
00:22:16,830 --> 00:22:21,750
query<font color="#CCCCCC"> they need to use quotes you</font><font color="#E5E5E5"> can</font>

310
00:22:21,750 --> 00:22:23,820
now filter input data<font color="#CCCCCC"> for quotes using</font>

311
00:22:23,820 --> 00:22:25,350
the MySQL real escape

312
00:22:25,350 --> 00:22:28,590
<font color="#E5E5E5">preg replace add slashes or HTML special</font>

313
00:22:28,590 --> 00:22:34,920
cars functions the HTML special<font color="#E5E5E5"> cars</font>

314
00:22:34,920 --> 00:22:36,690
function can also help you protect

315
00:22:36,690 --> 00:22:39,930
yourself from XSS attacks<font color="#E5E5E5"> let's see if</font>

316
00:22:39,930 --> 00:22:42,380
this works

317
00:22:57,250 --> 00:23:00,380
[Music]

318
00:23:04,460 --> 00:23:07,569
[Music]

319
00:23:42,710 --> 00:23:45,080
as you can see this time the attack has

320
00:23:45,080 --> 00:23:48,110
failed<font color="#E5E5E5"> as well</font><font color="#CCCCCC"> let's also</font><font color="#E5E5E5"> see what could</font>

321
00:23:48,110 --> 00:23:49,460
<font color="#E5E5E5">happen</font><font color="#CCCCCC"> if a user working</font><font color="#E5E5E5"> with the</font>

322
00:23:49,460 --> 00:23:53,320
database has rights to operate<font color="#E5E5E5"> on files</font>

323
00:23:53,320 --> 00:23:56,000
<font color="#E5E5E5">the rights are set while creating users</font>

324
00:23:56,000 --> 00:23:59,929
or granted by administrator<font color="#CCCCCC"> a normal</font>

325
00:23:59,929 --> 00:24:02,029
user very rarely has file operation

326
00:24:02,029 --> 00:24:04,190
rights but they are enabled<font color="#E5E5E5"> by default</font>

327
00:24:04,190 --> 00:24:07,370
<font color="#E5E5E5">for the root user use the load file</font>

328
00:24:07,370 --> 00:24:09,470
function in SQL which enables you to

329
00:24:09,470 --> 00:24:12,850
load the contents of the file

330
00:24:52,640 --> 00:24:56,900
<font color="#E5E5E5">as you can see the contents of PHP in</font><font color="#CCCCCC"> E</font>

331
00:24:56,900 --> 00:24:59,210
have been displayed the function enables

332
00:24:59,210 --> 00:25:01,430
users<font color="#CCCCCC"> to access</font><font color="#E5E5E5"> all files to</font><font color="#CCCCCC"> which the</font>

333
00:25:01,430 --> 00:25:03,440
<font color="#E5E5E5">current database server user has access</font>

334
00:25:03,440 --> 00:25:08,180
rights logging data<font color="#E5E5E5"> to a file is also</font>

335
00:25:08,180 --> 00:25:10,610
possible<font color="#E5E5E5"> first let's prepare a string</font>

336
00:25:10,610 --> 00:25:11,990
which will be saved<font color="#E5E5E5"> in the website</font>

337
00:25:11,990 --> 00:25:14,500
directory

338
00:25:29,570 --> 00:25:33,950
<font color="#CCCCCC">a PHP</font><font color="#E5E5E5"> code which calls the PHP info</font>

339
00:25:33,950 --> 00:25:36,430
function

340
00:25:44,930 --> 00:25:49,120
the directory contains<font color="#CCCCCC"> only two files</font>

341
00:25:51,610 --> 00:25:54,760
[Music]

342
00:25:57,020 --> 00:25:59,840
as you can see a<font color="#E5E5E5"> test PHP file has been</font>

343
00:25:59,840 --> 00:26:06,590
<font color="#E5E5E5">created after sending a request you can</font>

344
00:26:06,590 --> 00:26:13,670
<font color="#CCCCCC">even run it the value</font><font color="#E5E5E5"> one comes from our</font>

345
00:26:13,670 --> 00:26:15,980
<font color="#E5E5E5">select statement as the</font><font color="#CCCCCC"> Select into out</font>

346
00:26:15,980 --> 00:26:18,020
file<font color="#E5E5E5"> function logs all columns returned</font>

347
00:26:18,020 --> 00:26:21,560
by a query this<font color="#E5E5E5"> won't do much to stop</font><font color="#CCCCCC"> an</font>

348
00:26:21,560 --> 00:26:23,660
attacker from saving<font color="#CCCCCC"> the file with</font><font color="#E5E5E5"> PHP</font>

349
00:26:23,660 --> 00:26:26,300
code so how do we protect<font color="#E5E5E5"> ourselves</font>

350
00:26:26,300 --> 00:26:30,560
against SQL injection attacks<font color="#E5E5E5"> as you can</font>

351
00:26:30,560 --> 00:26:32,840
see if database user configuration is

352
00:26:32,840 --> 00:26:36,790
poor file operation becomes possible

353
00:26:36,790 --> 00:26:39,050
remember<font color="#E5E5E5"> you shouldn't work with your</font>

354
00:26:39,050 --> 00:26:41,060
database<font color="#CCCCCC"> using the root account as the</font>

355
00:26:41,060 --> 00:26:42,740
root user<font color="#CCCCCC"> has full file rights</font>

356
00:26:42,740 --> 00:26:44,810
<font color="#E5E5E5">permissions to operate on files and</font>

357
00:26:44,810 --> 00:26:47,440
<font color="#E5E5E5">unlimited access to all database tables</font>

358
00:26:47,440 --> 00:26:50,090
it's good to disable file operation

359
00:26:50,090 --> 00:26:51,770
permissions while creating<font color="#CCCCCC"> new database</font>

360
00:26:51,770 --> 00:26:57,920
users that's all in module<font color="#E5E5E5"> 13 thanks for</font>

361
00:26:57,920 --> 00:26:59,570
your<font color="#E5E5E5"> attention and see</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> in the next</font>

362
00:26:59,570 --> 00:27:01,520
<font color="#CCCCCC">module which</font><font color="#E5E5E5"> will focus on cross-site</font>

363
00:27:01,520 --> 00:27:04,660
scripting vulnerabilities

364
00:27:11,669 --> 00:27:16,659
welcome to module<font color="#E5E5E5"> 11 in this module</font>

365
00:27:16,659 --> 00:27:18,850
we'll<font color="#CCCCCC"> focus on the PHP injection</font>

366
00:27:18,850 --> 00:27:21,999
vulnerability this vulnerability occurs

367
00:27:21,999 --> 00:27:23,679
where a user has the opportunity<font color="#E5E5E5"> to</font>

368
00:27:23,679 --> 00:27:25,899
execute<font color="#E5E5E5"> a malicious PHP code by</font>

369
00:27:25,899 --> 00:27:27,850
modifying the parameters passed<font color="#E5E5E5"> to a web</font>

370
00:27:27,850 --> 00:27:33,039
application<font color="#CCCCCC"> this situation could</font><font color="#E5E5E5"> take</font>

371
00:27:33,039 --> 00:27:34,690
place<font color="#E5E5E5"> if input parameters are passed</font>

372
00:27:34,690 --> 00:27:37,119
<font color="#CCCCCC">into the PHP functions that allow</font><font color="#E5E5E5"> the</font>

373
00:27:37,119 --> 00:27:41,730
<font color="#E5E5E5">direct or indirect PHP code execution</font>

374
00:27:42,149 --> 00:27:44,859
the first function group are the include

375
00:27:44,859 --> 00:27:47,619
family functions include require and

376
00:27:47,619 --> 00:27:50,139
require once which serve<font color="#CCCCCC"> to include and</font>

377
00:27:50,139 --> 00:27:54,249
parse files containing PHP code the

378
00:27:54,249 --> 00:27:56,200
second<font color="#E5E5E5"> function of this type</font><font color="#CCCCCC"> is eval</font>

379
00:27:56,200 --> 00:27:58,269
<font color="#E5E5E5">which parses and executes provided</font>

380
00:27:58,269 --> 00:28:03,070
strings the third function<font color="#E5E5E5"> is pregger</font>

381
00:28:03,070 --> 00:28:06,899
place used to verify regular expressions

382
00:28:06,899 --> 00:28:09,639
the parameter e could<font color="#E5E5E5"> be passed to this</font>

383
00:28:09,639 --> 00:28:11,559
function<font color="#E5E5E5"> allowing for the execution of</font>

384
00:28:11,559 --> 00:28:13,749
PHP code<font color="#E5E5E5"> passed in a part of a regular</font>

385
00:28:13,749 --> 00:28:18,249
<font color="#CCCCCC">expression</font><font color="#E5E5E5"> as the two</font><font color="#CCCCCC"> latter functions</font>

386
00:28:18,249 --> 00:28:20,049
are rarely utilized in standard web

387
00:28:20,049 --> 00:28:21,759
applications<font color="#E5E5E5"> we'll focus on the first</font>

388
00:28:21,759 --> 00:28:27,789
<font color="#E5E5E5">function this sample source code will</font>

389
00:28:27,789 --> 00:28:31,049
help you understand the concept

390
00:28:34,540 --> 00:28:37,700
you can see here<font color="#CCCCCC"> a simple</font><font color="#E5E5E5"> PHP script</font>

391
00:28:37,700 --> 00:28:39,290
which<font color="#E5E5E5"> utilizes the user provided</font>

392
00:28:39,290 --> 00:28:41,750
variable<font color="#CCCCCC"> site</font><font color="#E5E5E5"> for specifying which page</font>

393
00:28:41,750 --> 00:28:45,730
should<font color="#E5E5E5"> be</font><font color="#CCCCCC"> added to</font><font color="#E5E5E5"> the include function</font>

394
00:28:51,340 --> 00:28:54,170
the content of the<font color="#CCCCCC"> website is</font><font color="#E5E5E5"> provided</font>

395
00:28:54,170 --> 00:28:59,720
<font color="#CCCCCC">depending on a specified file as we can</font>

396
00:28:59,720 --> 00:29:01,880
see user provided parameters are not

397
00:29:01,880 --> 00:29:04,820
<font color="#E5E5E5">filtered in any manner</font><font color="#CCCCCC"> a user has</font>

398
00:29:04,820 --> 00:29:07,010
virtually<font color="#E5E5E5"> full control over the file</font>

399
00:29:07,010 --> 00:29:10,430
name let's see how<font color="#E5E5E5"> this works in</font>

400
00:29:10,430 --> 00:29:20,540
practice<font color="#E5E5E5"> we can browse the website</font><font color="#CCCCCC"> and</font>

401
00:29:20,540 --> 00:29:22,400
as we're doing<font color="#E5E5E5"> so the file names in the</font>

402
00:29:22,400 --> 00:29:26,990
address bar are changing assume<font color="#CCCCCC"> that a</font>

403
00:29:26,990 --> 00:29:28,970
hacker has successfully<font color="#E5E5E5"> uploaded a file</font>

404
00:29:28,970 --> 00:29:32,140
<font color="#E5E5E5">which contains a PHP code to the server</font>

405
00:29:32,140 --> 00:29:35,180
<font color="#E5E5E5">perhaps you're a bit skeptical after all</font>

406
00:29:35,180 --> 00:29:37,040
uploading PHP files is certainly

407
00:29:37,040 --> 00:29:39,020
disallowed by the site or<font color="#E5E5E5"> the service</font>

408
00:29:39,020 --> 00:29:44,990
doesn't accept any<font color="#E5E5E5"> files from users it's</font>

409
00:29:44,990 --> 00:29:46,730
common though that websites allow users

410
00:29:46,730 --> 00:29:48,620
to<font color="#E5E5E5"> upload avatars pictures and other</font>

411
00:29:48,620 --> 00:29:55,460
image files let's see if an attacker can

412
00:29:55,460 --> 00:29:58,370
still smuggle in a malicious PHP code if

413
00:29:58,370 --> 00:30:01,990
files are checked<font color="#CCCCCC"> for correct format</font>

414
00:30:06,160 --> 00:30:07,960
[Music]

415
00:30:07,960 --> 00:30:10,249
you can see here a specially crafted

416
00:30:10,249 --> 00:30:13,210
image<font color="#E5E5E5"> that looks like a normal JPEG file</font>

417
00:30:13,210 --> 00:30:16,219
<font color="#CCCCCC">its content is displayed</font><font color="#E5E5E5"> all image</font>

418
00:30:16,219 --> 00:30:17,929
functions will interpret<font color="#E5E5E5"> it as a correct</font>

419
00:30:17,929 --> 00:30:23,210
image file but let's take<font color="#E5E5E5"> a look at</font>

420
00:30:23,210 --> 00:30:25,779
what's hidden inside

421
00:30:26,169 --> 00:30:32,090
as we can see<font color="#E5E5E5"> PHP code has been</font><font color="#CCCCCC"> embedded</font>

422
00:30:32,090 --> 00:30:34,429
in the image<font color="#E5E5E5"> let's try to pass</font><font color="#CCCCCC"> it in the</font>

423
00:30:34,429 --> 00:30:46,489
<font color="#CCCCCC">address bar as you</font><font color="#E5E5E5"> can see the script</font>

424
00:30:46,489 --> 00:30:47,899
<font color="#E5E5E5">injected into the image has been</font>

425
00:30:47,899 --> 00:30:52,070
<font color="#CCCCCC">executed</font><font color="#E5E5E5"> but even if an application</font><font color="#CCCCCC"> has</font>

426
00:30:52,070 --> 00:30:54,289
disabled uploading images<font color="#E5E5E5"> a hacker could</font>

427
00:30:54,289 --> 00:30:56,029
still use other vulnerabilities<font color="#CCCCCC"> to</font>

428
00:30:56,029 --> 00:30:59,539
launch a PHP injection attack file

429
00:30:59,539 --> 00:31:02,960
operations<font color="#E5E5E5"> in PHP like including allow</font>

430
00:31:02,960 --> 00:31:05,179
not only<font color="#E5E5E5"> direct file references but</font><font color="#CCCCCC"> also</font>

431
00:31:05,179 --> 00:31:08,269
enable protocols such as FTP HTTP and

432
00:31:08,269 --> 00:31:11,559
special data protocol

433
00:31:16,000 --> 00:31:18,490
in the case<font color="#E5E5E5"> of data protocol it is</font>

434
00:31:18,490 --> 00:31:20,260
<font color="#E5E5E5">possible to pass file content in</font>

435
00:31:20,260 --> 00:31:22,210
protocol reference parameters<font color="#E5E5E5"> since the</font>

436
00:31:22,210 --> 00:31:28,480
file is<font color="#CCCCCC"> generated</font><font color="#E5E5E5"> on the spot the data</font>

437
00:31:28,480 --> 00:31:34,120
is encoded<font color="#E5E5E5"> in base64 let's use an online</font>

438
00:31:34,120 --> 00:31:38,370
encoder to<font color="#E5E5E5"> generate an encoded stream</font>

439
00:31:54,600 --> 00:31:56,800
try to encode the following string

440
00:31:56,800 --> 00:32:00,460
converting it into a base64<font color="#CCCCCC"> string use</font>

441
00:32:00,460 --> 00:32:02,650
special data<font color="#CCCCCC"> streams syntax</font><font color="#E5E5E5"> and paste</font>

442
00:32:02,650 --> 00:32:25,120
the encoded PHP code as we can see the

443
00:32:25,120 --> 00:32:28,000
code has been<font color="#CCCCCC"> executed let's try to</font>

444
00:32:28,000 --> 00:32:29,290
<font color="#E5E5E5">think of how</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> can protect ourselves</font>

445
00:32:29,290 --> 00:32:32,680
against this attack<font color="#E5E5E5"> the first solution</font>

446
00:32:32,680 --> 00:32:35,050
<font color="#CCCCCC">is to modify</font><font color="#E5E5E5"> the configuration of PHP</font>

447
00:32:35,050 --> 00:32:37,290
any

448
00:32:46,750 --> 00:32:49,690
the allow URL include option might be

449
00:32:49,690 --> 00:32:51,820
<font color="#E5E5E5">used to enable or disable the inclusion</font>

450
00:32:51,820 --> 00:32:53,650
of special files which are accessed

451
00:32:53,650 --> 00:32:57,210
<font color="#E5E5E5">through</font><font color="#CCCCCC"> the protocols we've mentioned</font>

452
00:32:57,360 --> 00:33:00,130
after disabling<font color="#E5E5E5"> the function you need to</font>

453
00:33:00,130 --> 00:33:01,659
restart<font color="#CCCCCC"> the server for changes to take</font>

454
00:33:01,659 --> 00:33:03,840
<font color="#CCCCCC">effect</font>

455
00:33:16,300 --> 00:33:20,560
as you<font color="#E5E5E5"> can see this time the attack has</font>

456
00:33:20,560 --> 00:33:24,450
failed<font color="#CCCCCC"> because the options were disabled</font>

457
00:33:35,059 --> 00:33:37,859
<font color="#CCCCCC">attacks</font><font color="#E5E5E5"> which utilize images are however</font>

458
00:33:37,859 --> 00:33:45,690
still<font color="#CCCCCC"> feasible as you can see the</font>

459
00:33:45,690 --> 00:33:47,309
underlying<font color="#E5E5E5"> cause</font><font color="#CCCCCC"> of the problem is the</font>

460
00:33:47,309 --> 00:33:48,929
fact<font color="#CCCCCC"> that users</font><font color="#E5E5E5"> practically have full</font>

461
00:33:48,929 --> 00:33:50,789
control<font color="#CCCCCC"> over</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> string pest - the</font>

462
00:33:50,789 --> 00:33:53,639
include function you can deal<font color="#CCCCCC"> with this</font>

463
00:33:53,639 --> 00:33:55,830
by adding static extensions<font color="#E5E5E5"> to included</font>

464
00:33:55,830 --> 00:33:58,070
files

465
00:33:58,660 --> 00:34:01,769
[Music]

466
00:34:11,590 --> 00:34:14,330
by doing<font color="#E5E5E5"> this we can prevent an attacker</font>

467
00:34:14,330 --> 00:34:17,890
for<font color="#E5E5E5"> manipulating the extension</font>

468
00:34:27,020 --> 00:34:29,030
the image has not been<font color="#E5E5E5"> included this</font>

469
00:34:29,030 --> 00:34:38,540
<font color="#CCCCCC">time controlling extensions in this</font><font color="#E5E5E5"> way</font>

470
00:34:38,540 --> 00:34:41,000
is enough for<font color="#CCCCCC"> PHP 5.3</font><font color="#E5E5E5"> and newer</font>

471
00:34:41,000 --> 00:34:43,699
<font color="#E5E5E5">additions but older PHP versions allowed</font>

472
00:34:43,699 --> 00:34:45,679
the usage<font color="#E5E5E5"> of special character percent</font>

473
00:34:45,679 --> 00:34:51,409
<font color="#CCCCCC">zero zero the null byte</font><font color="#E5E5E5"> or end of string</font>

474
00:34:51,409 --> 00:34:53,570
marker was placed<font color="#CCCCCC"> in the target</font><font color="#E5E5E5"> string</font>

475
00:34:53,570 --> 00:34:55,940
passed to system functions<font color="#E5E5E5"> causing the</font>

476
00:34:55,940 --> 00:34:58,040
extension included by a web developer to

477
00:34:58,040 --> 00:35:00,430
be dropped

478
00:35:01,000 --> 00:35:03,320
since this<font color="#E5E5E5"> vulnerability was often</font>

479
00:35:03,320 --> 00:35:05,840
exploited<font color="#E5E5E5"> for attacks while the need to</font>

480
00:35:05,840 --> 00:35:07,700
include<font color="#E5E5E5"> the percent zero zero marker and</font>

481
00:35:07,700 --> 00:35:10,190
user provided parameters was rare<font color="#E5E5E5"> the</font>

482
00:35:10,190 --> 00:35:20,210
character has been<font color="#CCCCCC"> disabled you can also</font>

483
00:35:20,210 --> 00:35:22,490
specify a folder<font color="#E5E5E5"> in which the function</font>

484
00:35:22,490 --> 00:35:24,260
<font color="#E5E5E5">include will operate to prevent users</font>

485
00:35:24,260 --> 00:35:25,820
from tampering with the beginnings of

486
00:35:25,820 --> 00:35:29,740
<font color="#CCCCCC">filenames</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> disable special protocols</font>

487
00:35:46,060 --> 00:35:48,520
the next step is to<font color="#CCCCCC"> use the preg</font><font color="#E5E5E5"> replace</font>

488
00:35:48,520 --> 00:35:50,230
<font color="#E5E5E5">function to remove the dot and slash</font>

489
00:35:50,230 --> 00:35:52,690
characters<font color="#E5E5E5"> which makes it impossible for</font>

490
00:35:52,690 --> 00:35:54,370
<font color="#E5E5E5">a potential attacker to control the</font>

491
00:35:54,370 --> 00:35:59,590
inclusion<font color="#E5E5E5"> path creating a list of files</font>

492
00:35:59,590 --> 00:36:01,270
which can be<font color="#E5E5E5"> included and blocking all</font>

493
00:36:01,270 --> 00:36:03,220
other references<font color="#E5E5E5"> seems like the best</font>

494
00:36:03,220 --> 00:36:06,460
solution if you can't<font color="#E5E5E5"> implement this</font>

495
00:36:06,460 --> 00:36:08,650
method<font color="#CCCCCC"> try to deter a potential attacker</font>

496
00:36:08,650 --> 00:36:18,580
<font color="#CCCCCC">by</font><font color="#E5E5E5"> filtering input that's all in module</font>

497
00:36:18,580 --> 00:36:21,340
<font color="#CCCCCC">11 thank you for your attention and see</font>

498
00:36:21,340 --> 00:36:23,050
you<font color="#E5E5E5"> in the next module which will cover</font>

499
00:36:23,050 --> 00:36:25,030
the direct static code<font color="#CCCCCC"> injection attack</font>

500
00:36:25,030 --> 00:00:00,000
<font color="#E5E5E5">see you there</font>

