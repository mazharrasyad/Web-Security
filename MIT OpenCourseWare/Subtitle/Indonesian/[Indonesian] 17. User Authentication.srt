1
00:00:00,000 --> 00:00:00,070


2
00:00:00,070 --> 00:00:02,430
 Konten berikut disediakan di bawah Materi Iklan 

3
00:00:02,430 --> 00:00:03,820
 Lisensi Commons. 

4
00:00:03,820 --> 00:00:06,060
 Dukungan Anda akan membantu MIT OpenCourseWare 

5
00:00:06,060 --> 00:00:10,140
 terus menawarkan sumber daya pendidikan berkualitas tinggi secara gratis. 

6
00:00:10,140 --> 00:00:12,690
 Untuk membuat sumbangan atau melihat materi tambahan 

7
00:00:12,690 --> 00:00:16,600
 dari ratusan kursus MIT, kunjungi MIT OpenCourseWare 

8
00:00:16,600 --> 00:00:17,255
 di ocw.mit.edu. 

9
00:00:17,255 --> 00:00:25,835


10
00:00:25,835 --> 00:00:26,960
 PROFESOR: Baiklah, teman-teman. 

11
00:00:26,960 --> 00:00:28,800
 Jadi, mari kita mulai. 

12
00:00:28,800 --> 00:00:31,190
 Selamat datang kembali dari apa yang saya harap adalah liburan yang menyenangkan 

13
00:00:31,190 --> 00:00:32,560
 untuk semua orang. 

14
00:00:32,560 --> 00:00:35,360
 Jadi hari ini kita akan berbicara tentang otentikasi pengguna. 

15
00:00:35,360 --> 00:00:37,890
 Jadi tantangan dasar yang ingin kita bahas hari ini 

16
00:00:37,890 --> 00:00:42,420
 adalah bagaimana pengguna manusia dapat membuktikan identitas mereka ke sebuah program? 

17
00:00:42,420 --> 00:00:45,680
 Khususnya, kertas yang ditugaskan untuk kelas hari ini 

18
00:00:45,680 --> 00:00:47,635
 membahas pertanyaan eksistensial 

19
00:00:47,635 --> 00:00:48,930
 di komunitas keamanan. 

20
00:00:48,930 --> 00:00:53,240
 Apakah ada yang lebih baik daripada kata sandi untuk otentikasi? 

21
00:00:53,240 --> 00:00:57,430
 Jadi pada tingkat tinggi sepertinya password adalah ide yang buruk. 

22
00:00:57,430 --> 00:01:00,010
 Jadi mereka memiliki entropi yang sangat rendah, sangat mudah bagi penyerang 

23
00:01:00,010 --> 00:01:01,380
 untuk menebaknya. 

24
00:01:01,380 --> 00:01:03,130
 Juga pertanyaan keamanan yang kami 

25
00:01:03,130 --> 00:01:05,480
 gunakan untuk memulihkan dari kata sandi yang hilang 

26
00:01:05,480 --> 00:01:07,480
 sering memiliki entropi yang lebih rendah daripada kata sandi 

27
00:01:07,480 --> 00:01:10,330
 diri mereka sendiri, yang juga tampak seperti masalah. 

28
00:01:10,330 --> 00:01:15,180
 Dan yang lebih buruk lagi, pengguna biasanya akan menggunakan kata sandi yang sama 

29
00:01:15,180 --> 00:01:16,987
 di banyak situs yang berbeda. 

30
00:01:16,987 --> 00:01:19,195
 Jadi itu berarti bahwa kerentanan dalam satu kata sandi, 

31
00:01:19,195 --> 00:01:22,820
 jika mudah ditebak, dapat mengekspos aktivitas pengguna 

32
00:01:22,820 --> 00:01:24,400
 di berbagai situs. 

33
00:01:24,400 --> 00:01:27,030
 Jadi seperti kertas untuk negara-negara kelas saat ini, 

34
00:01:27,030 --> 00:01:28,930
 Saya suka kutipan ini, "dominasi terus 

35
00:01:28,930 --> 00:01:31,620
 kata sandi atas semua metode 

36
00:01:31,620 --> 00:01:34,850
 otentikasi dalam-pengguna adalah hal yang sangat memalukan 

37
00:01:34,850 --> 00:01:36,110
 untuk peneliti keamanan. " 

38
00:01:36,110 --> 00:01:37,920
 Baiklah, jadi masyarakat hanya mendidih di sana, 

39
00:01:37,920 --> 00:01:39,460
 mereka menginginkan alternatif yang lebih baik. 

40
00:01:39,460 --> 00:01:41,380
 Tapi tidak jelas apakah sebenarnya ada 

41
00:01:41,380 --> 00:01:45,910
 adalah skema otentikasi yang benar-benar mendominasi 

42
00:01:45,910 --> 00:01:48,630
 kata sandi, itu lebih bermanfaat, itu lebih bisa disebarkan, 

43
00:01:48,630 --> 00:01:49,830
 itu lebih aman. 

44
00:01:49,830 --> 00:01:52,210
 Jadi dalam kuliah hari ini, pada dasarnya kami akan melakukan tiga hal. 

45
00:01:52,210 --> 00:01:53,710
 Jadi pertama-tama, kita akan melihat 

46
00:01:53,710 --> 00:01:55,970
 dan kita akan melihat bagaimana kata sandi saat ini dapat berfungsi. 

47
00:01:55,970 --> 00:01:58,660
 Lalu kita akan berbicara tentang properti yang diinginkan 

48
00:01:58,660 --> 00:02:01,630
 pada tingkat tinggi untuk skema otentikasi apa pun. 

49
00:02:01,630 --> 00:02:05,112
 Dan kemudian kita akhirnya akan melihat apa yang diberikan kertas itu kepada kita 

50
00:02:05,112 --> 00:02:07,320
 dalam hal metrik untuk otentikasi otentikasi 

51
00:02:07,320 --> 00:02:08,740
 skema, dan kita akan melihat caranya 

52
00:02:08,740 --> 00:02:10,156
 beberapa otentikasi lainnya ini 

53
00:02:10,156 --> 00:02:12,230
 skema sebenarnya dibandingkan dengan kata sandi. 

54
00:02:12,230 --> 00:02:14,860
 Jadi dalam [INAUDIBLE] apa itu kata sandi? 

55
00:02:14,860 --> 00:02:26,250
 Jadi kata sandi adalah rahasia yang dibagikan 

56
00:02:26,250 --> 00:02:30,400
 antara pengguna dan server. 

57
00:02:30,400 --> 00:02:34,540


58
00:02:34,540 --> 00:02:37,800
 Jadi penerapan skema kata sandi yang naif 

59
00:02:37,800 --> 00:02:41,160
 pada dasarnya hanya memiliki meja 

60
00:02:41,160 --> 00:02:44,780
 di sisi server yang pada dasarnya hanya memetakan 

61
00:02:44,780 --> 00:02:50,258
 nama pengguna ke kata sandi. 

62
00:02:50,258 --> 00:02:52,008
 Itulah cara paling sederhana untuk Anda bayangkan 

63
00:02:52,008 --> 00:02:54,980
 mengimplementasikan salah satu pengguna skema otentikasi-- 

64
00:02:54,980 --> 00:02:58,280
 masuk ke nama pengguna dan kata sandi mereka, server 

65
00:02:58,280 --> 00:02:59,826
 jaringan melakukan pencarian di meja ini, 

66
00:02:59,826 --> 00:03:01,700
 membandingkan kata sandi dari klien yang disediakan, 

67
00:03:01,700 --> 00:03:02,360
 apa yang ada di sini. 

68
00:03:02,360 --> 00:03:04,320
 Jika semuanya bagus, pengguna diautentikasi. 

69
00:03:04,320 --> 00:03:06,176
 Jadi jelas masalahnya dengan ini 

70
00:03:06,176 --> 00:03:09,212
 bahwa jika penyerang merusak server, 

71
00:03:09,212 --> 00:03:10,670
 maka dia hanya bisa melihat meja ini 

72
00:03:10,670 --> 00:03:13,959
 dan kemudian dapatkan semua kata sandi yang digunakan dalam antrean. 

73
00:03:13,959 --> 00:03:15,270
 Jadi itu jelas hal yang buruk. 

74
00:03:15,270 --> 00:03:19,170
 Jadi mungkin solusi yang lebih baik adalah 

75
00:03:19,170 --> 00:03:23,280
 agar server menyimpan tabel yang terlihat seperti. 

76
00:03:23,280 --> 00:03:25,320
 Jadi sekali lagi, itu akan cocok dengan nama pengguna 

77
00:03:25,320 --> 00:03:31,055
 tetapi sekarang benar-benar cocok dengan hash dari kata sandi. 

78
00:03:31,055 --> 00:03:34,360


79
00:03:34,360 --> 00:03:37,000
 Jadi klien pengguna akan menyediakan teks yang jelas 

80
00:03:37,000 --> 00:03:39,590
 kata sandi ke server, server 

81
00:03:39,590 --> 00:03:41,480
 kemudian akan mengambil kata sandi teks yang jelas itu, 

82
00:03:41,480 --> 00:03:43,870
 hash itu, jangan melihat ke meja, dan sekali lagi lihat 

83
00:03:43,870 --> 00:03:46,620
 jika pengguna adalah siapa dia mengatakan bahwa mereka. 

84
00:03:46,620 --> 00:03:49,490
 Jadi keuntungan dari skema ini adalah 

85
00:03:49,490 --> 00:03:52,080
 bahwa dengan mendesain fungsi hash ini 

86
00:03:52,080 --> 00:03:54,040
 sulit untuk dibalik. 

87
00:03:54,040 --> 00:03:57,304
 Jadi jika meja ini hilang, entah bagaimana itu bocor 

88
00:03:57,304 --> 00:03:58,928
 atau penyerang mengkompromikan server, 

89
00:03:58,928 --> 00:04:00,969
 dan penyerang dapat melihat hal-hal ini di sini, 

90
00:04:00,969 --> 00:04:03,180
 tetapi sulit bagi para penyerang 

91
00:04:03,180 --> 00:04:05,695
 untuk mengatakan, OK, ini semacam string alpha acak 

92
00:04:05,695 --> 00:04:07,460
 karakter numerik di sini. 

93
00:04:07,460 --> 00:04:10,592
 Berikut ini gambar awal yang digunakan sebagai input 

94
00:04:10,592 --> 00:04:13,660
 dari fungsi rendah [TIDAK JELAS] nilai itu di sana. 

95
00:04:13,660 --> 00:04:16,089
 Setidaknya itu hal yang menyenangkan 

96
00:04:16,089 --> 00:04:18,720
 tentang hash ini dalam teori. 

97
00:04:18,720 --> 00:04:21,370
 Sekarang dalam prakteknya, penyerang tidak benar-benar 

98
00:04:21,370 --> 00:04:23,540
 harus meluncurkan serangan brute force 

99
00:04:23,540 --> 00:04:28,150
 untuk mencari tahu apa preimages untuk nilai hash ini. 

100
00:04:28,150 --> 00:04:30,770
 Jadi para penyerang dapat benar-benar memanfaatkan fakta tersebut 

101
00:04:30,770 --> 00:04:36,595
 bahwa kata sandi dalam praktik memiliki distribusi yang miring. 

102
00:04:36,595 --> 00:04:40,200


103
00:04:40,200 --> 00:04:43,150
 Dan dengan distribusi miring, maksud saya 

104
00:04:43,150 --> 00:04:45,850
 itu-- katakanlah kita tahu bahwa semua kata sandi itu 

105
00:04:45,850 --> 00:04:47,150
 Panjang 20 karakter. 

106
00:04:47,150 --> 00:04:50,460
 Bukan seperti pengguna yang benar-benar memilih kata sandi itu 

107
00:04:50,460 --> 00:04:54,080
 semacam ada di semua tempat di ruang 20 itu 

108
00:04:54,080 --> 00:04:55,340
 karakter yang mungkin. 

109
00:04:55,340 --> 00:05:00,580
 Dalam praktiknya, orang memilih kata sandi seperti 1, 2, 3 atau todd 

110
00:05:00,580 --> 00:05:02,002
 atau hal-hal seperti ini. 

111
00:05:02,002 --> 00:05:03,960
 Jadi sebenarnya sudah ada studi empiris ini 

112
00:05:03,960 --> 00:05:08,180
 tentang cara kerja kata sandi dan banyak waktu 

113
00:05:08,180 --> 00:05:18,764
 studi ini menemukan hal-hal seperti 5.000 kata kunci teratas 

114
00:05:18,764 --> 00:05:21,710
 mencakup sekitar 20% pengguna. 

115
00:05:21,710 --> 00:05:25,032


116
00:05:25,032 --> 00:05:26,490
 Jadi apa artinya itu, dengan kata lain, 

117
00:05:26,490 --> 00:05:29,970
 adalah bahwa penyerang memiliki database dari 5.000 orang itu 

118
00:05:29,970 --> 00:05:30,840
 kata sandi. 

119
00:05:30,840 --> 00:05:32,830
 Penyerang hanya dapat memiliki mereka, 

120
00:05:32,830 --> 00:05:37,050
 dan kemudian ketika penyerang melihat tabel kata sandi yang dicuri ini, 

121
00:05:37,050 --> 00:05:39,640
 hanya bisa melihat apakah salah satu hal itu 

122
00:05:39,640 --> 00:05:44,408
 berasal dari 5.000 daftar pertandingan besar di sini. 

123
00:05:44,408 --> 00:05:46,344
 Dan secara empiris berbicara, penyerang 

124
00:05:46,344 --> 00:05:49,260
 akan dapat memulihkan sekitar 20% dari kata sandi dengan cara itu. 

125
00:05:49,260 --> 00:05:55,050
 Jadi, orang-orang di Yahoo menemukan kata sandi itu 

126
00:05:55,050 --> 00:06:02,832
 memiliki sekitar 10 hingga 20 bit rumit, 10 hingga 20 bit 

127
00:06:02,832 --> 00:06:04,760
 keacakan di dalamnya. 

128
00:06:04,760 --> 00:06:08,360
 Dan itu sebenarnya tidak sebesar itu. 

129
00:06:08,360 --> 00:06:10,435
 Jadi, misalnya, jika Anda berpikir tentang apa yang mungkin terjadi 

130
00:06:10,435 --> 00:06:11,560
 fungsi hash ini di sini menjadi? 

131
00:06:11,560 --> 00:06:14,620
 Jadi mungkin itu seperti toko, sesuatu seperti ini. 

132
00:06:14,620 --> 00:06:17,880
 Jadi mesin modern sebenarnya menghitung jutaan 

133
00:06:17,880 --> 00:06:20,260
 dari hash ini setiap detik. 

134
00:06:20,260 --> 00:06:22,660
 Jadi fakta bahwa hash berfungsi berdasarkan desain 

135
00:06:22,660 --> 00:06:25,050
 kira mudah dihitung 

136
00:06:25,050 --> 00:06:26,450
 jadi itu akan cepat dihitung. 

137
00:06:26,450 --> 00:06:27,950
 Dikombinasikan dengan kenyataan inilah yang akan terjadi 

138
00:06:27,950 --> 00:06:29,700
 distribusi kata sandi yang miring, 

139
00:06:29,700 --> 00:06:32,500
 Berarti pada prinsipnya, skema ini di sini tidak aman 

140
00:06:32,500 --> 00:06:34,510
 seperti yang terlihat. 

141
00:06:34,510 --> 00:06:36,800
 Jadi satu hal yang dapat Anda bayangkan untuk dicoba 

142
00:06:36,800 --> 00:06:40,660
 untuk membuat hidup lebih sulit pada penyerang 

143
00:06:40,660 --> 00:06:46,860
 apakah Anda bisa membayangkan bahwa Anda menggunakan derivasi kunci yang mahal 

144
00:06:46,860 --> 00:06:47,360
 fungsi. 

145
00:06:47,360 --> 00:06:53,290


146
00:06:53,290 --> 00:06:55,280
 Dan dengan fungsi derivasi kunci, 

147
00:06:55,280 --> 00:06:58,867
 Saya hanya bermaksud hal ini di sini. 

148
00:06:58,867 --> 00:07:01,200
 Hal ini yang mengambil kata sandi sebagai masukan dan kemudian 

149
00:07:01,200 --> 00:07:03,505
 menghasilkan sesuatu yang disimpan di server. 

150
00:07:03,505 --> 00:07:05,213
 Jadi apa yang baik tentang derivasi kunci ini 

151
00:07:05,213 --> 00:07:09,915
 fungsi-fungsi itu sebenarnya memiliki biaya merdu. 

152
00:07:09,915 --> 00:07:11,930
 Jadi pada dasarnya Anda dapat memutar kenop ini 

153
00:07:11,930 --> 00:07:14,516
 dan membuat fungsi itu berjalan lebih lambat atau lebih cepat 

154
00:07:14,516 --> 00:07:15,640
 tergantung apa yang kamu inginkan. 

155
00:07:15,640 --> 00:07:17,525
 Dan gagasannya di sini adalah, katakanlah 

156
00:07:17,525 --> 00:07:19,650
 bahwa Anda akan menggunakan fungsi derivasi kunci. 

157
00:07:19,650 --> 00:07:28,020
 Jadi asumsikan contoh-contoh ini seperti PBKDF2, atau mungkin BCrypt 

158
00:07:28,020 --> 00:07:30,901
 sehingga Anda dapat melihat ini menggunakan keajaiban internet 

159
00:07:30,901 --> 00:07:32,400
 jika Anda ingin tahu lebih banyak tentang mereka. 

160
00:07:32,400 --> 00:07:34,330
 Tapi ide dasarnya adalah bayangkan 

161
00:07:34,330 --> 00:07:36,040
 bahwa salah satu fungsi derivasi kunci ini 

162
00:07:36,040 --> 00:07:40,820
 mengambil satu detik untuk menghitung, dibandingkan dengan beberapa milidetik. 

163
00:07:40,820 --> 00:07:42,490
 Itu benar-benar membuat pekerjaan penyerang 

164
00:07:42,490 --> 00:07:45,760
 jauh lebih sulit. Karena ketika penyerang sedang mencoba 

165
00:07:45,760 --> 00:07:49,090
 untuk, katakanlah, menghasilkan nilai untuk 5.000 teratas ini 

166
00:07:49,090 --> 00:07:51,720
 kata sandi, itu akan mengambil penyerang lebih lama 

167
00:07:51,720 --> 00:07:52,760
 untuk melakukannya. 

168
00:07:52,760 --> 00:07:55,770
 Jadi, apakah semua itu masuk akal bagaimana semua ini bekerja? 

169
00:07:55,770 --> 00:07:56,940
 Cukup lurus ke depan. 

170
00:07:56,940 --> 00:07:59,260
 Jadi secara internal fungsi derivasi kunci ini 

171
00:07:59,260 --> 00:08:02,675
 sering beroperasi dengan berulang kali memanggil beberapa hash, 

172
00:08:02,675 --> 00:08:03,500
 beberapa kali. 

173
00:08:03,500 --> 00:08:05,960
 Jadi itu semua sangat mudah. 

174
00:08:05,960 --> 00:08:08,712
 Jadi Anda mungkin berkata, yah, apakah ini memecahkan masalah? 

175
00:08:08,712 --> 00:08:10,753
 Jadi bisakah kita menggunakan derivasi kunci yang mahal ini 

176
00:08:10,753 --> 00:08:12,590
 berfungsi dan dilakukan dengan itu? 

177
00:08:12,590 --> 00:08:14,920
 Jadi jika ini adalah kelas keamanan, jawabannya tidak. 

178
00:08:14,920 --> 00:08:17,820
 Jadi satu masalah adalah musuh dapat membangun sesuatu 

179
00:08:17,820 --> 00:08:23,470
 disebut tabel pelangi. 

180
00:08:23,470 --> 00:08:29,990
 Jadi meja pelangi pada dasarnya hanyalah sebuah peta 

181
00:08:29,990 --> 00:08:35,490
 kata sandi untuk hash. 

182
00:08:35,490 --> 00:08:39,039


183
00:08:39,039 --> 00:08:43,532
 Dan wawasan di sini adalah bahwa bahkan jika sistem sedang menggunakan 

184
00:08:43,532 --> 00:08:45,665
 salah satu fungsi derivasi kunci yang mahal ini, 

185
00:08:45,665 --> 00:08:49,840
 penyerang dapat menghitung salah satu dari tabel ini satu kali. 

186
00:08:49,840 --> 00:08:52,396
 Ini mungkin sedikit menyakitkan karena setiap derivasi kunci 

187
00:08:52,396 --> 00:08:53,950
 indikasi fungsi lambat. 

188
00:08:53,950 --> 00:08:56,780
 Tetapi penyerang dapat membangun tabel ini sekali dan kemudian digunakan 

189
00:08:56,780 --> 00:09:00,030
 bahwa untuk memecahkan semua sistem selanjutnya, penyerang bisa 

190
00:09:00,030 --> 00:09:04,120
 masuk ke dalam penggunaan itu fungsi derivasi kunci yang sama. 

191
00:09:04,120 --> 00:09:05,980
 Jadi itulah bagaimana meja pelangi bekerja. 

192
00:09:05,980 --> 00:09:07,827
 Dan sekali lagi, untuk memaksimalkan manfaat biaya 

193
00:09:07,827 --> 00:09:09,660
 membangun meja pelangi ini, penyerang 

194
00:09:09,660 --> 00:09:12,700
 bisa mengambil keuntungan dari distribusi kata sandi miring 

195
00:09:12,700 --> 00:09:13,450
 Saya bisa melihat di sini. 

196
00:09:13,450 --> 00:09:15,040
 Jadi penyerang mungkin hanya membangun meja pelangi 

197
00:09:15,040 --> 00:09:17,245
 untuk beberapa set kecil dari semua kata sandi yang mungkin. 

198
00:09:17,245 --> 00:09:19,910
 AUDIENCE: Jadi penggaraman membuat ini jauh lebih sulit. 

199
00:09:19,910 --> 00:09:21,410
 PROFESOR: Ya, ya, itu benar. 

200
00:09:21,410 --> 00:09:24,250
 Jadi kita akan sampai ke pengasinan, saya percaya dalam beberapa detik. 

201
00:09:24,250 --> 00:09:24,890
 Betul. 

202
00:09:24,890 --> 00:09:27,290
 Jadi pada tingkat yang tinggi, jika Anda tidak menggunakan pengasinan, 

203
00:09:27,290 --> 00:09:29,620
 tabel pelangi benar-benar memungkinkan penyerang 

204
00:09:29,620 --> 00:09:32,030
 untuk menghabiskan beberapa upaya offline, hitung tabel ini, 

205
00:09:32,030 --> 00:09:34,430
 dan kemudian semacam diamortisasi biayanya 

206
00:09:34,430 --> 00:09:36,119
 menghitung tabel di atas melanggar 

207
00:09:36,119 --> 00:09:37,535
 banyak basis data kata sandi yang berbeda. 

208
00:09:37,535 --> 00:09:41,455


209
00:09:41,455 --> 00:09:44,510
 Jadi hal berikutnya yang bisa kita pikirkan untuk memperbaiki keadaan 

210
00:09:44,510 --> 00:09:45,255
 adalah pengasinan. 

211
00:09:45,255 --> 00:09:46,630
 Aku bersumpah orang itu bukan tanaman, 

212
00:09:46,630 --> 00:09:49,180
 Saya akan memberi Anda $ 20 setelah kelas. 

213
00:09:49,180 --> 00:09:50,990
 Jadi bagaimana cara kerja pengasinan? 

214
00:09:50,990 --> 00:09:52,448
 Jadi hal mendasar yang Anda inginkan 

215
00:09:52,448 --> 00:09:54,950
 masukan beberapa keacakan tambahan ke jalan 

216
00:09:54,950 --> 00:09:56,750
 bahwa kata sandi dihasilkan. 

217
00:09:56,750 --> 00:10:02,450
 Jadi pada dasarnya, Anda ingin mengambil fungsi hash ini 

218
00:10:02,450 --> 00:10:05,172
 dan kamu ingin menaruh garam di sana-- yang mana 

219
00:10:05,172 --> 00:10:08,657
 Saya akan menjelaskan dalam detik-- dan kemudian kata sandinya. 

220
00:10:08,657 --> 00:10:10,865
 Dan ini adalah hal yang Anda lihat di sisi server 

221
00:10:10,865 --> 00:10:11,656
 di [TIDAK JELAS]. 

222
00:10:11,656 --> 00:10:12,660
 Jadi garam apa ini? 

223
00:10:12,660 --> 00:10:16,880
 Dan Anda hanya menganggapnya sebagai string, string panjang itu 

224
00:10:16,880 --> 00:10:20,370
 disediakan sebagai semacam bagian pertama untuk fungsi hash ini. 

225
00:10:20,370 --> 00:10:23,640
 Jadi mengapa lebih baik menggunakan skema ini? 

226
00:10:23,640 --> 00:10:25,440
 Dan ketahuilah bahwa garam itu sebenarnya 

227
00:10:25,440 --> 00:10:28,500
 disimpan pada teks yang jelas di sisi server. 

228
00:10:28,500 --> 00:10:30,879
 Jadi Anda mungkin berpikir OK, baik jika garam itu disimpan 

229
00:10:30,879 --> 00:10:32,640
 pada teks yang jelas di sisi server, 

230
00:10:32,640 --> 00:10:36,030
 sepertinya server bisa mencuri meja yang cocok 

231
00:10:36,030 --> 00:10:38,330
 nama pengguna ke kata sandi dan penyerang juga bisa 

232
00:10:38,330 --> 00:10:41,109
 mencuri garam. Jadi mengapa itu berguna? 

233
00:10:41,109 --> 00:10:43,650
 AUDIENCE: Karena jika Anda memilih kata sandi yang paling umum, 

234
00:10:43,650 --> 00:10:46,107
 Anda tidak bisa hanya menggunakannya sekali dan menemukan pengguna baru. 

235
00:10:46,107 --> 00:10:47,440
 PROFESOR: Itu tepat sekali. 

236
00:10:47,440 --> 00:10:49,180
 Jadi pada dasarnya apa yang dilakukan ini adalah ini 

237
00:10:49,180 --> 00:10:52,580
 mencegah penyerang membangun meja pelangi tunggal 

238
00:10:52,580 --> 00:10:56,050
 dan kemudian menggunakan meja pelangi itu melawan semua contoh 

239
00:10:56,050 --> 00:10:57,930
 fungsi hash itu. 

240
00:10:57,930 --> 00:10:59,970
 Jadi pada dasarnya Anda dapat memikirkan ini 

241
00:10:59,970 --> 00:11:02,776
 sebagai semacam kata sandi yang unik bahkan jika mereka 

242
00:11:02,776 --> 00:11:04,810
 pada dasarnya sama. 

243
00:11:04,810 --> 00:11:07,166
 Jadi inilah yang dilakukan oleh banyak sistem dalam praktik, mereka 

244
00:11:07,166 --> 00:11:09,370
 gunakan pengertian garam ini di sini. 

245
00:11:09,370 --> 00:11:10,840
 Dan itulah praktik terbaik untuk ini 

246
00:11:10,840 --> 00:11:12,360
 jadi kamu ingin memilih garam itu 

247
00:11:12,360 --> 00:11:14,776
 panjang Karena Anda pada dasarnya akan berpikir tentang garam 

248
00:11:14,776 --> 00:11:18,240
 seperti menambahkan lebih banyak bit ke kanan pseudo-password ini. 

249
00:11:18,240 --> 00:11:19,490
 Jadi lebih banyak bit selalu lebih baik. 

250
00:11:19,490 --> 00:11:21,031
 Dan hal lain yang ingin Anda lakukan 

251
00:11:21,031 --> 00:11:23,390
 adalah bahwa setiap kali pengguna mengubah kata sandinya, 

252
00:11:23,390 --> 00:11:25,480
 Anda biasanya ingin mengubah garam itu juga. 

253
00:11:25,480 --> 00:11:29,165
 Jadi salah satu alasannya adalah bahwa pengguna malas 

254
00:11:29,165 --> 00:11:31,750
 dan mereka ingin memilih kata sandi yang sama beberapa kali. 

255
00:11:31,750 --> 00:11:34,678
 Mengubah garam akan memastikan hal itu 

256
00:11:34,678 --> 00:11:37,303
 disimpan dalam database kata sandi sebenarnya akan berbeda 

257
00:11:37,303 --> 00:11:38,440
 kata sandinya sama. 

258
00:11:38,440 --> 00:11:40,106
 Saya pikir ada pertanyaan di suatu tempat. 

259
00:11:40,106 --> 00:11:41,550
 AUDIENCE: Mengapa itu disebut garam? 

260
00:11:41,550 --> 00:11:43,750
 PROFESOR: Saya sebenarnya tidak yakin mengapa ini disebut 

261
00:11:43,750 --> 00:11:45,060
 garam, itu pertanyaan yang bagus. 

262
00:11:45,060 --> 00:11:46,680
 Saya yakin ada beberapa jawaban untuk ini. 

263
00:11:46,680 --> 00:11:47,450
 Ini seperti mengapa cookie disebut cookie? 

264
00:11:47,450 --> 00:11:49,836
 Internet akan tahu tetapi saya sebenarnya tidak tahu. 

265
00:11:49,836 --> 00:11:52,800
 AUDIENCE: Tambahkan beberapa [TIDAK JELAS] ke nomor hash 

266
00:11:52,800 --> 00:11:55,270
 hash [TIDAK JELAS]. 

267
00:11:55,270 --> 00:11:56,382
 PROFESOR: Di sana kami pergi. 

268
00:11:56,382 --> 00:11:58,090
 Saya senang bahwa kami mendapatkan ini di film, 

269
00:11:58,090 --> 00:11:59,255
 karena aku merasakan ini bagaimana kita akan pergi 

270
00:11:59,255 --> 00:12:00,338
 untuk mendapatkan penghargaan Touring kami. 

271
00:12:00,338 --> 00:12:01,530
 Betul. 

272
00:12:01,530 --> 00:12:03,790
 Saya yakin ada beberapa jawaban di internet, 

273
00:12:03,790 --> 00:12:05,370
 jadi saya akan melihatnya nanti. 

274
00:12:05,370 --> 00:12:08,280
 Tetapi apakah itu semua pada dasarnya masuk akal? 

275
00:12:08,280 --> 00:12:12,720
 OK jadi pendekatan ini cukup mudah. 

276
00:12:12,720 --> 00:12:16,980
 Jadi apa yang saya anggap sejauh ini adalah entah bagaimana klien 

277
00:12:16,980 --> 00:12:20,466
 mentransmisikan kata sandi ke server. 

278
00:12:20,466 --> 00:12:23,090
 Tapi saya belum benar-benar menjelaskan bagaimana transisi itu sebenarnya 

279
00:12:23,090 --> 00:12:23,923
 akan berlangsung. 

280
00:12:23,923 --> 00:12:27,270


281
00:12:27,270 --> 00:12:35,880
 Jadi bagaimana cara mengirimkan kata sandi ini? 

282
00:12:35,880 --> 00:12:39,500
 Jadi ide pertama yang Anda miliki adalah, 

283
00:12:39,500 --> 00:12:43,960
 baik, kami hanya akan mengirimkan kata sandi 

284
00:12:43,960 --> 00:12:46,730
 dalam membersihkan jaringan. 

285
00:12:46,730 --> 00:12:49,344
 Ini jelas sangat buruk, 

286
00:12:49,344 --> 00:12:51,510
 karena kemudian bisa ada penyerang jaringan siapa 

287
00:12:51,510 --> 00:12:54,007
 pada dasarnya mengintip dan melihat lalu lintas 

288
00:12:54,007 --> 00:12:54,840
 yang Anda kirim. 

289
00:12:54,840 --> 00:12:56,798
 Dan mari kita lihat apakah kita bisa mengambil kata sandi itu 

290
00:12:56,798 --> 00:12:59,249
 langsung dari kabel dan kemudian meniru identitas Anda. 

291
00:12:59,249 --> 00:13:00,790
 Jadi kita selalu mulai dengan manusia jerami 

292
00:13:00,790 --> 00:13:02,970
 sebelum saya menunjukkan kepada Anda pria-pria jerami lainnya, yang tentu saja 

293
00:13:02,970 --> 00:13:03,840
 juga sangat cacat. 

294
00:13:03,840 --> 00:13:05,815
 Hal pertama yang Anda pikirkan adalah pengiriman 

295
00:13:05,815 --> 00:13:07,285
 kata sandi yang jelas. 

296
00:13:07,285 --> 00:13:08,785
 Hal lain yang mungkin Anda pikirkan, yang mana 

297
00:13:08,785 --> 00:13:10,860
 akan menjadi sedikit lebih baik mungkin, 

298
00:13:10,860 --> 00:13:18,200
 mungkin kita mengirim kata sandi melalui koneksi terenkripsi. 

299
00:13:18,200 --> 00:13:23,345


300
00:13:23,345 --> 00:13:27,464
 Jadi kami menggunakan beberapa jenis kriptografi di sini. 

301
00:13:27,464 --> 00:13:29,630
 Mungkin ada kunci rahasia atau sesuatu seperti itu 

302
00:13:29,630 --> 00:13:31,540
 dan itulah yang kami gunakan untuk berubah 

303
00:13:31,540 --> 00:13:34,240
 kata sandi sebelum kami mengirimkannya melalui koneksi. 

304
00:13:34,240 --> 00:13:35,942
 Jadi pada level tinggi, enkripsi selalu 

305
00:13:35,942 --> 00:13:37,400
 tampaknya membuat segalanya lebih baik, kan? 

306
00:13:37,400 --> 00:13:38,200
 Merek dagang. 

307
00:13:38,200 --> 00:13:41,179
 Tetapi masalahnya adalah bahwa kecuali Anda berpikir dengan hati-hati 

308
00:13:41,179 --> 00:13:43,595
 tentang bagaimana Anda menggunakan hal-hal seperti enkripsi dan hashing, 

309
00:13:43,595 --> 00:13:45,473
 Anda mungkin tidak mendapatkan manfaat keamanan 

310
00:13:45,473 --> 00:13:46,530
 yang menurut Anda Anda dapatkan. 

311
00:13:46,530 --> 00:13:48,120
 Karena, misalnya, bagaimana jika ada 

312
00:13:48,120 --> 00:13:50,450
 seseorang yang duduk di antara kamu-- klien-- 

313
00:13:50,450 --> 00:13:53,426
 dan server, pria pepatah ini di penyerang tengah, 

314
00:13:53,426 --> 00:13:55,050
 siapa yang sebenarnya mengintip lalu lintas Anda 

315
00:13:55,050 --> 00:13:57,580
 dan berpura-pura menjadi server. 

316
00:13:57,580 --> 00:14:00,370
 Jika Anda mengirim data terenkripsi, Anda belum benar-benar melakukannya 

317
00:14:00,370 --> 00:14:02,600
 mengesahkan ujung yang lain, lalu 

318
00:14:02,600 --> 00:14:06,150
 Anda masih bisa membuka diri terhadap masalah. 

319
00:14:06,150 --> 00:14:07,960
 Karena jika klien saja, katakanlah, 

320
00:14:07,960 --> 00:14:10,410
 memilih beberapa kunci acak, mengirimkannya ke beberapa entitas 

321
00:14:10,410 --> 00:14:12,970
 di sisi lain yang mungkin atau mungkin bukan server. 

322
00:14:12,970 --> 00:14:15,906
 Ini bukan server, [TIDAK JELAS]. 

323
00:14:15,906 --> 00:14:19,490
 Anda mengirim sesuatu ke seseorang, yang kemudian akan menjadi 

324
00:14:19,490 --> 00:14:21,390
 bisa mendapatkan semua rahasiamu. 

325
00:14:21,390 --> 00:14:23,740
 Begitu juga, orang-orang mungkin berpikir dengan baik 

326
00:14:23,740 --> 00:14:25,810
 bagaimana jika saya tidak mengirim kata sandi mentah 

327
00:14:25,810 --> 00:14:27,615
 tapi saya mengirim hash dari kata sandi. 

328
00:14:27,615 --> 00:14:29,240
 Itu sebenarnya tidak memberi Anda apa pun 

329
00:14:29,240 --> 00:14:30,260
 dalam dan dari dirinya sendiri baik. 

330
00:14:30,260 --> 00:14:32,720
 Karena apakah Anda mengirim kata sandi atau hash 

331
00:14:32,720 --> 00:14:34,780
 dari kata sandi-- maksud saya, hash dari kata sandi 

332
00:14:34,780 --> 00:14:37,800
 memiliki kekuatan semantik yang sama dengan kata sandi asli 

333
00:14:37,800 --> 00:14:38,794
 diri. 

334
00:14:38,794 --> 00:14:40,585
 Jika Anda belum mengotentikasi sisi lain 

335
00:14:40,585 --> 00:14:43,110
 jika Anda belum mengotentikasi server atau hal-hal seperti ini. 

336
00:14:43,110 --> 00:14:44,740
 Jadi pokok bahasan dengan diskusi ini 

337
00:14:44,740 --> 00:14:49,440
 di sini hanya untuk menekankan fakta bahwa hanya menambahkan enkripsi 

338
00:14:49,440 --> 00:14:51,730
 atau hanya menambahkan hashing tidak perlu 

339
00:14:51,730 --> 00:14:53,690
 memberi Anda kekuatan tambahan apa pun. 

340
00:14:53,690 --> 00:14:56,160
 Jika klien tidak dapat mengotentikasi siapa yang dia kirim 

341
00:14:56,160 --> 00:14:59,620
 kata sandi untuk kemudian klien bisa salah mengungkap 

342
00:14:59,620 --> 00:15:03,430
 kata sandi itu dengan seseorang yang tidak ingin mereka ungkapkan. 

343
00:15:03,430 --> 00:15:07,620
 Jadi mungkin ide yang lebih baik daripada keduanya 

344
00:15:07,620 --> 00:15:12,155
 adalah menggunakan apa yang mereka sebut protokol respon tantangan. 

345
00:15:12,155 --> 00:15:17,200


346
00:15:17,200 --> 00:15:20,070
 Dan inilah contoh respons tantangan yang sangat sederhana 

347
00:15:20,070 --> 00:15:21,090
 protokol. 

348
00:15:21,090 --> 00:15:26,140
 Jadi katakanlah kita punya klien di sini, 

349
00:15:26,140 --> 00:15:30,700
 dan kemudian Anda mendapat server di sini. 

350
00:15:30,700 --> 00:15:36,340
 Jadi klien berkata, hai, aku Alice. 

351
00:15:36,340 --> 00:15:39,450


352
00:15:39,450 --> 00:15:45,470
 Dan kemudian respon server dengan beberapa jahitan tantangan, 

353
00:15:45,470 --> 00:15:48,900
 beberapa kuantitas yang harus dipilih oleh server. 

354
00:15:48,900 --> 00:15:54,670
 Dan kemudian klien akan merespons 

355
00:15:54,670 --> 00:15:58,950
 dengan hash server yang mengirim tantangan, 

356
00:15:58,950 --> 00:16:02,898
 lalu Anda dapat menggabungkannya dengan kata sandi. 

357
00:16:02,898 --> 00:16:06,350


358
00:16:06,350 --> 00:16:09,490
 Jadi pada titik ini, server dapat mengambil jumlah ini. 

359
00:16:09,490 --> 00:16:11,830
 Server tahu tantangan yang dikirimnya. 

360
00:16:11,830 --> 00:16:13,950
 Dan mungkin server tahu kata sandinya, 

361
00:16:13,950 --> 00:16:16,530
 sehingga server dapat [TIDAK JELAS] kuantitas ini 

362
00:16:16,530 --> 00:16:19,780
 dan melihatnya benar-benar cocok dengan apa yang dikirimkan pengguna. 

363
00:16:19,780 --> 00:16:21,720
 Jadi apa yang baik tentang protokol ini 

364
00:16:21,720 --> 00:16:24,950
 adalah bahwa jika kita mengabaikan manusia dalam serangan tengah untuk kedua, 

365
00:16:24,950 --> 00:16:28,985
 server sekarang yakin bahwa pengguna sebenarnya adalah Alice, 

366
00:16:28,985 --> 00:16:31,331
 karena hanya Alice yang tahu kata sandi ini di sini. 

367
00:16:31,331 --> 00:16:33,830
 Dan apa yang baik tentang ini adalah bahwa jika server sebenarnya 

368
00:16:33,830 --> 00:16:36,120
 penyerang-- jadi dengan kata lain, 

369
00:16:36,120 --> 00:16:39,442
 jika Alice mengirim benda ini kepada seseorang yang tidak 

370
00:16:39,442 --> 00:16:41,400
 orang yang dia coba autentikasi ke, 

371
00:16:41,400 --> 00:16:43,957
 maka penyerang masih tidak tahu kata sandinya. 

372
00:16:43,957 --> 00:16:45,990
 Karena penyerang harus memilih C, 

373
00:16:45,990 --> 00:16:48,126
 tapi penyerang tidak tahu apa ini. 

374
00:16:48,126 --> 00:16:49,500
 Dan pada dasarnya untuk penyerang 

375
00:16:49,500 --> 00:16:50,969
 untuk mencari tahu apa kata sandinya, 

376
00:16:50,969 --> 00:16:52,760
 penyerang harus bisa, sekali lagi, 

377
00:16:52,760 --> 00:16:54,324
 membalikkan fungsi hash ini. 

378
00:16:54,324 --> 00:16:55,282
 Apakah Anda punya pertanyaan? 

379
00:16:55,282 --> 00:16:57,282
 AUDIENCE: Saya hanya ingin tahu, bagaimana bisa Anda tidak membuatnya 

380
00:16:57,282 --> 00:17:01,178
 seorang klien melakukan hashing? 

381
00:17:01,178 --> 00:17:01,678
 [TIDAK JELAS] 

382
00:17:01,678 --> 00:17:10,329


383
00:17:10,329 --> 00:17:13,300
 PROFESOR: Jadi mari kita lihat, jadi skema yang Anda usulkan 

384
00:17:13,300 --> 00:17:20,369
 apakah sisi klien akan memanggil hal ini? 

385
00:17:20,369 --> 00:17:22,494
 AUDIENCE: Ya, jadi alih-alih menetapkan kata sandi, 

386
00:17:22,494 --> 00:17:26,477
 dan memiliki server hash password dan memeriksanya, 

387
00:17:26,478 --> 00:17:28,482
 klien hanya akan mengirim kata sandi hash. 

388
00:17:28,482 --> 00:17:30,815
 PROFESOR: Klien hanya akan mengirim kata sandi hash. 

389
00:17:30,815 --> 00:17:36,430


390
00:17:36,430 --> 00:17:37,980
 Jadi ada beberapa alasan. 

391
00:17:37,980 --> 00:17:40,642
 Jadi satu alasan, seperti yang akan kita diskusikan nanti, 

392
00:17:40,642 --> 00:17:42,350
 adalah bahwa akan ada hal-hal yang disebut 

393
00:17:42,350 --> 00:17:43,772
 pertahanan anti-pemalu yang tepat. 

394
00:17:43,772 --> 00:17:45,230
 Pertahanan anti-pemalu dirancang 

395
00:17:45,230 --> 00:17:48,544
 untuk mencegah klien yang buruk terus bertanya, 

396
00:17:48,544 --> 00:17:50,335
 apakah ini kata sandinya, apakah ini kata sandinya, 

397
00:17:50,335 --> 00:17:51,330
 apakah ini kata sandinya? 

398
00:17:51,330 --> 00:17:53,121
 Jadi sebagai hasilnya, lebih mudah untuk hal-hal 

399
00:17:53,121 --> 00:17:55,150
 berada di sisi server seperti pada sisi klien. 

400
00:17:55,150 --> 00:17:57,340
 Tetapi cukuplah untuk mengatakan, Anda dapat, pada kenyataannya, 

401
00:17:57,340 --> 00:17:59,882
 lakukan hash di sisi klien. 

402
00:17:59,882 --> 00:18:01,590
 Menggunakan JavaScript atau sesuatu seperti ini. 

403
00:18:01,590 --> 00:18:03,185
 Tetapi ide dasarnya adalah bahwa bagaimanapun juga Anda 

404
00:18:03,185 --> 00:18:06,770
 harus memiliki biaya komputasi sangat, sangat besar, 

405
00:18:06,770 --> 00:18:10,620
 karena itu akan mencegah penyerang dari hanya menebak 

406
00:18:10,620 --> 00:18:13,617
 apa kata sandinya dengan cepat. 

407
00:18:13,617 --> 00:18:14,700
 Apakah ada pertanyaan lain? 

408
00:18:14,700 --> 00:18:16,878
 AUDIENCE: Yah saya hanya ingin menunjukkan 

409
00:18:16,878 --> 00:18:18,822
 bahwa jika klien melakukan hashing, 

410
00:18:18,822 --> 00:18:23,196
 maka itu [TIDAK JELAS] karena kata sandi Anda adalah hash. 

411
00:18:23,196 --> 00:18:25,140
 PROFESOR: Jadi itu benar. 

412
00:18:25,140 --> 00:18:26,920
 AUDIENCE: Jadi jika seseorang mendapatkan meja 

413
00:18:26,920 --> 00:18:28,900
 dari server [INAUDIBLE] menggunakan 

414
00:18:28,900 --> 00:18:31,251
 untuk hash mereka bisa masuk. 

415
00:18:31,251 --> 00:18:32,250
 PROFESOR: Benar. 

416
00:18:32,250 --> 00:18:34,041
 Ya, terkadang agak halus 

417
00:18:34,041 --> 00:18:37,160
 tergantung pada siapa yang dapat memilih, misalnya, 

418
00:18:37,160 --> 00:18:38,487
 nilai-nilai tantangan ini. 

419
00:18:38,487 --> 00:18:40,820
 Karena jika klien dan server dapat memilih nilai tantangan, 

420
00:18:40,820 --> 00:18:43,130
 sehingga membuatnya lebih atau kurang sulit bagi klien 

421
00:18:43,130 --> 00:18:44,280
 untuk meluncurkan jenis-jenis serangan itu. 

422
00:18:44,280 --> 00:18:46,405
 Jadi misalnya, seperti satu masalah dengan protokol ini 

423
00:18:46,405 --> 00:18:49,700
 di sini adalah pada dasarnya klien 

424
00:18:49,700 --> 00:18:54,000
 tidak bisa memasukkan keacakan ke dalam ini. 

425
00:18:54,000 --> 00:18:55,500
 Jadi, Anda dapat membayangkan bahwa Anda dapat membuatnya 

426
00:18:55,500 --> 00:18:59,440
 protokol ini lebih sulit bagi server untuk membalikkan. 

427
00:18:59,440 --> 00:19:01,976
 Jika klien benar-benar harus memilih beberapa tantangan itu 

428
00:19:01,976 --> 00:19:04,476
 dimasukkan di sini, jadi Anda mendapat tantangan tantangan sisi server 

429
00:19:04,476 --> 00:19:05,720
 tantangan sisi klien. 

430
00:19:05,720 --> 00:19:06,886
 Tapi kamu benar tentang itu. 

431
00:19:06,886 --> 00:19:09,110


432
00:19:09,110 --> 00:19:11,670
 Ada pertanyaan lain? 

433
00:19:11,670 --> 00:19:13,790
 BAIK. 

434
00:19:13,790 --> 00:19:17,240
 Jadi ya, jadi segues ini adalah diskusi yang baru saja kita alami. 

435
00:19:17,240 --> 00:19:19,890


436
00:19:19,890 --> 00:19:22,960
 Jadi meski untuk memecahkan ini, server 

437
00:19:22,960 --> 00:19:25,860
 harus membalikkan hash ini, penyerang 

438
00:19:25,860 --> 00:19:29,132
 masih bisa mencoba melakukan salah satu dari serangan brute force ini. 

439
00:19:29,132 --> 00:19:30,840
 Jadi salah satu cara agar kami dapat mencegah server 

440
00:19:30,840 --> 00:19:32,160
 dari melakukan serangan brute force ini 

441
00:19:32,160 --> 00:19:33,876
 adalah memilih salah satu fungsi hash mahal ini 

442
00:19:33,876 --> 00:19:35,060
 seperti yang kita diskusikan sebelumnya. 

443
00:19:35,060 --> 00:19:36,559
 Hal lain, seperti yang baru saja kita bahas, 

444
00:19:36,559 --> 00:19:39,640
 adalah bahwa Anda benar-benar dapat memungkinkan klien untuk, 

445
00:19:39,640 --> 00:19:44,070
 misalnya, pilih tantangan yang dipilih kliennya sendiri 

446
00:19:44,070 --> 00:19:44,850
 disini. 

447
00:19:44,850 --> 00:19:46,225
 Dan itu pada dasarnya akan bertindak 

448
00:19:46,225 --> 00:19:48,960
 seperti garam yang dipilih klien. Jadi itu pada dasarnya 

449
00:19:48,960 --> 00:19:50,950
 membuatnya lebih sulit bagi peretas 

450
00:19:50,950 --> 00:19:52,760
 untuk melakukan hal-hal seperti membangun meja pelangi. 

451
00:19:52,760 --> 00:19:56,590
 Karena perhatikan bahwa jika server adalah penyerang di sini, 

452
00:19:56,590 --> 00:19:59,830
 server selalu dapat memilih nilai tantangan yang sama lagi, 

453
00:19:59,830 --> 00:20:02,190
 lagi, dan lagi, memungkinkan untuk membangun meja pelangi. 

454
00:20:02,190 --> 00:20:04,300
 Tetapi jika ketika klien membalas kembali, 

455
00:20:04,300 --> 00:20:06,870
 klien juga termasuk garam, 

456
00:20:06,870 --> 00:20:09,086
 beberapa tantangan yang dipilih klien yang disertakan, 

457
00:20:09,086 --> 00:20:10,460
 maka mereka akan mencegah penyerang 

458
00:20:10,460 --> 00:20:12,900
 dari membangun salah satu meja pelangi. 

459
00:20:12,900 --> 00:20:15,361
 Jadi apakah itu semua masuk akal? 

460
00:20:15,361 --> 00:20:15,860
 BAIK. 

461
00:20:15,860 --> 00:20:19,580


462
00:20:19,580 --> 00:20:23,300
 Jadi ya, satu hal yang saya sebutkan 

463
00:20:23,300 --> 00:20:26,920
 yang mungkin berguna untuk dilakukan adalah menerapkan 

464
00:20:26,920 --> 00:20:28,222
 pertahanan anti-palu ini. 

465
00:20:28,222 --> 00:20:33,770


466
00:20:33,770 --> 00:20:40,560
 Jadi pertahanan anti-palu pada dasarnya dirancang untuk menilai 

467
00:20:40,560 --> 00:20:50,800
 batasi jumlah tebakan kata sandi 

468
00:20:50,800 --> 00:20:53,630
 bahwa klien yang buruk dapat mengeluarkan. 

469
00:20:53,630 --> 00:20:59,900


470
00:20:59,900 --> 00:21:03,210
 Karena gagasannya di sini adalah jika Anda punya beberapa klien 

471
00:21:03,210 --> 00:21:05,320
 mencoba meluncurkan salah satu kekuatan kasar ini 

472
00:21:05,320 --> 00:21:06,754
 menebak kata sandi, Anda 

473
00:21:06,754 --> 00:21:08,670
 tidak ingin klien itu dapat duduk di sana 

474
00:21:08,670 --> 00:21:10,795
 dalam lingkaran yang ketat dan hanya mengatakan, apakah ini kata sandinya, 

475
00:21:10,795 --> 00:21:12,910
 apakah ini kata sandinya, apakah ini kata sandinya? 

476
00:21:12,910 --> 00:21:14,830
 Jadi salah satu cara yang bisa kita lakukan anti-hamming 

477
00:21:14,830 --> 00:21:16,556
 itu hanya membatasi tingkat itu. 

478
00:21:16,556 --> 00:21:18,170
 Jadi server akan mengatakan, saya hanya akan 

479
00:21:18,170 --> 00:21:21,150
 terima katakanlah tiga tebakan kata kunci per detik 

480
00:21:21,150 --> 00:21:22,650
 dari klien tertentu. 

481
00:21:22,650 --> 00:21:28,710
 Anda juga bisa menyebutkan membayangkan menerapkan waktu tunggu di sini. 

482
00:21:28,710 --> 00:21:31,550
 Jadi mungkin klien dapat mengeluarkan banyak permintaan kata sandi 

483
00:21:31,550 --> 00:21:33,970
 berturut-turut, tetapi kemudian setelah itu, katakanlah, 10 di antaranya salah, 

484
00:21:33,970 --> 00:21:35,594
 server mengatakan, OK Anda harus bertahan, 

485
00:21:35,594 --> 00:21:39,340
 Saya tidak akan menerima permintaan lagi dari Anda, 

486
00:21:39,340 --> 00:21:42,770
 katakanlah, 10 detik, sesuatu seperti itu. 

487
00:21:42,770 --> 00:21:44,610
 Jadi kedua hal ini dirancang 

488
00:21:44,610 --> 00:21:46,220
 untuk mencegah serangan brute force. 

489
00:21:46,220 --> 00:21:48,912
 Jadi, misalnya, seperti yang dimiliki beberapa mobil pintar 

490
00:21:48,912 --> 00:21:50,860
 jenis pertahanan ini, beberapa TPN 

491
00:21:50,860 --> 00:21:53,150
 memiliki pertahanan semacam ini pada dasarnya berhenti 

492
00:21:53,150 --> 00:21:56,000
 melawan serangan brute force ini. 

493
00:21:56,000 --> 00:21:58,250
 Jadi mengapa penting untuk Anda gunakan 

494
00:21:58,250 --> 00:21:59,880
 pertahanan anti-pemalu ini? 

495
00:21:59,880 --> 00:22:01,370
 Nah satu alasan mengapa itu penting 

496
00:22:01,370 --> 00:22:03,570
 seperti yang sudah kita bahas kata sandi ini miliki 

497
00:22:03,570 --> 00:22:05,640
 entropi begitu sedikit. 

498
00:22:05,640 --> 00:22:08,110
 Jadi karena kata sandi biasanya memiliki sedikit entropi, 

499
00:22:08,110 --> 00:22:10,337
 sangat penting untuk mencegah penyerang 

500
00:22:10,337 --> 00:22:12,670
 dari hanya mencoba untuk melewati ruang entropi yang rendah 

501
00:22:12,670 --> 00:22:13,940
 sangat, sangat cepat. 

502
00:22:13,940 --> 00:22:15,940
 Sehingga Anda mungkin sadar, banyak situs web 

503
00:22:15,940 --> 00:22:21,042
 memiliki batasan format yang mendorong Anda 

504
00:22:21,042 --> 00:22:22,630
 untuk kata sandi Anda. 

505
00:22:22,630 --> 00:22:24,437
 Mereka akan mengatakan hal-hal seperti kata sandi Anda harus 

506
00:22:24,437 --> 00:22:31,036
 memiliki tanda baca, harus memiliki campuran angka 

507
00:22:31,036 --> 00:22:33,410
 dan huruf, Anda harus memiliki huruf besar dan huruf kecil, 

508
00:22:33,410 --> 00:22:34,546
 begitu dan seterusnya. 

509
00:22:34,546 --> 00:22:36,920
 Dan apa kendala yang coba Anda lakukan 

510
00:22:36,920 --> 00:22:38,760
 adalah mereka mencoba membuat Anda berkembang 

511
00:22:38,760 --> 00:22:40,660
 entropi kata sandi. 

512
00:22:40,660 --> 00:22:43,490
 Tapi yang bermasalah adalah itu tidak benar 

513
00:22:43,490 --> 00:22:46,210
 kendala yang diformat ini yang harus kita perhatikan. 

514
00:22:46,210 --> 00:22:48,980
 Ini adalah entropi sebenarnya dari kata sandi itu sendiri. 

515
00:22:48,980 --> 00:22:51,680
 Jadi ternyata bahkan jika orang diberi kendala ini-- 

516
00:22:51,680 --> 00:22:52,960
 seperti Anda harus menggunakan tanda baca, karakter, 

517
00:22:52,960 --> 00:22:55,275
 dan hal-hal seperti itu-- entropi kata sandi yang dihasilkan 

518
00:22:55,275 --> 00:22:56,844
 seringkali cukup rendah. 

519
00:22:56,844 --> 00:22:58,885
 Jadi misalnya, orang akan sering memasang tanda baca 

520
00:22:58,885 --> 00:22:59,885
 di awal atau akhir. 

521
00:22:59,885 --> 00:23:02,218
 Karena mereka tidak ingin bermasalah untuk mengingat seperti, 

522
00:23:02,218 --> 00:23:04,900
 Apakah saya memiliki tanda dolar di tengah atau sesuatu? 

523
00:23:04,900 --> 00:23:08,720
 Dan ternyata, persyaratan format ini seringkali 

524
00:23:08,720 --> 00:23:11,850
 jangan membuat serangan kamus lebih sulit 

525
00:23:11,850 --> 00:23:14,070
 untuk musuh yang canggih. 

526
00:23:14,070 --> 00:23:18,240
 Dan alasannya adalah karena, pada dasarnya, kamus 

527
00:23:18,240 --> 00:23:20,540
 penyerang dapat memanfaatkan pengamatan ini 

528
00:23:20,540 --> 00:23:22,720
 tentang cara orang memilih kata sandi 

529
00:23:22,720 --> 00:23:24,360
 di hadapan kendala. 

530
00:23:24,360 --> 00:23:26,910
 Jadi misalnya, jika penyerang tahu bahwa orang biasanya 

531
00:23:26,910 --> 00:23:28,630
 menaruh tanda baca di awal atau akhir, 

532
00:23:28,630 --> 00:23:30,720
 masukkan saja ke dalam serangan kamus Anda. 

533
00:23:30,720 --> 00:23:32,595
 Dan sebuah situs web yang benar-benar menarik 

534
00:23:32,595 --> 00:23:35,995
 Anda bisa pergi ke yang disebut Telepathwords. 

535
00:23:35,995 --> 00:23:40,130


536
00:23:40,130 --> 00:23:41,770
 Dan apa yang rapi tentang situs ini 

537
00:23:41,770 --> 00:23:44,390
 adalah bahwa ia memiliki kotak teks kecil. 

538
00:23:44,390 --> 00:23:46,745
 Jadi Anda bisa mengetik karakter ke dalam kotak teks itu-- 

539
00:23:46,745 --> 00:23:48,870
 Anda berpura-pura bahwa Anda memasukkan kata sandi-- 

540
00:23:48,870 --> 00:23:51,070
 dan Telepathwords akan mencoba menerka 

541
00:23:51,070 --> 00:23:52,960
 apa karaktermu selanjutnya. 

542
00:23:52,960 --> 00:23:54,595
 Jadi saat Anda mengetik karakter tambahan, 

543
00:23:54,595 --> 00:23:56,800
 itu akan memiliki kotak tarik-turun kecil yang mengatakan, 

544
00:23:56,800 --> 00:23:59,091
 apakah Anda akan meletakkan ini, apakah Anda akan meletakkan ini? 

545
00:23:59,091 --> 00:24:02,380
 Ini akan memberi Anda sedikit uraian yang mengatakan, 

546
00:24:02,380 --> 00:24:04,035
 inilah yang saya pikir Anda akan pergi 

547
00:24:04,035 --> 00:24:05,650
 untuk memasukkan kata sandi berikutnya. 

548
00:24:05,650 --> 00:24:07,290
 Jadi bagaimana cara kerja Telepathwords? 

549
00:24:07,290 --> 00:24:09,350
 Jadi pada dasarnya memiliki banyak database. 

550
00:24:09,350 --> 00:24:11,705
 Ini memiliki database kata sandi umum. 

551
00:24:11,705 --> 00:24:15,030


552
00:24:15,030 --> 00:24:21,930
 Ini juga memiliki daftar frasa populer 

553
00:24:21,930 --> 00:24:25,504
 yang diambil dari situs web. 

554
00:24:25,504 --> 00:24:28,040
 Dan itu juga memiliki himpunan heuristik ini 

555
00:24:28,040 --> 00:24:36,570
 yang menggambarkan bias pengguna umum dalam memilih kata sandi. 

556
00:24:36,570 --> 00:24:38,210
 Jadi misalnya, satu bias lucu 

557
00:24:38,210 --> 00:24:39,796
 bahwa orang akan sering - ketika mereka 

558
00:24:39,796 --> 00:24:41,170
 dipaksa dengan batasan-batasan ini 

559
00:24:41,170 --> 00:24:43,503
 untuk mengatakan Anda harus menggunakan tanda baca, hal-hal seperti itu - banyak 

560
00:24:43,503 --> 00:24:47,460
 saat ketika mereka memilih karakter untuk kata sandi, 

561
00:24:47,460 --> 00:24:50,994
 mereka akan menggunakan kunci yang berdekatan satu sama lain. 

562
00:24:50,994 --> 00:24:52,660
 Jadi dengan kata lain, mereka akan sangat kecil 

563
00:24:52,660 --> 00:24:54,690
 edit jarak dalam ruang fisik dengan hormat 

564
00:24:54,690 --> 00:24:56,920
 untuk mengedit jarak dalam kata sandi yang sebenarnya. 

565
00:24:56,920 --> 00:24:59,510
 Jadi apa yang dilakukan Telepathwords adalah ia memiliki database di sini, 

566
00:24:59,510 --> 00:25:01,720
 jadi ketika Anda mengetikkan hal-hal itu menjalankan model-model ini. 

567
00:25:01,720 --> 00:25:02,670
 Dan itu mengatakan, secara statistik, 

568
00:25:02,670 --> 00:25:05,424
 inilah hal yang paling mungkin yang akan Anda ketik berikutnya. 

569
00:25:05,424 --> 00:25:07,652
 Jadi hampir seperti otomatis lengkap untuk kata sandi. 

570
00:25:07,652 --> 00:25:09,235
 Dan apa yang lucu adalah bahwa ini menunjukkan 

571
00:25:09,235 --> 00:25:11,151
 sekali lagi bahwa jika Anda memiliki kendala ini, 

572
00:25:11,151 --> 00:25:14,150
 mereka sebenarnya tidak terlalu melindungi Anda jika ada beberapa 

573
00:25:14,150 --> 00:25:17,500
 ini mendasari distribusi a priori hal 

574
00:25:17,500 --> 00:25:19,870
 bahwa penyerang tidak bisa memanfaatkan. 

575
00:25:19,870 --> 00:25:21,766
 Saya pikir ada sebuah pertanyaan? 

576
00:25:21,766 --> 00:25:25,970
 AUDIENCE: Ya jadi sepertinya jika seorang penyerang 

577
00:25:25,970 --> 00:25:28,162
 terlalu canggih yang mereka bisa 

578
00:25:28,162 --> 00:25:31,571
 coba tebak seperti sekumpulan alamat IP dan banyak hal 

579
00:25:31,571 --> 00:25:34,980
 yang hanya akan mencegah palu [tidak terdengar]. 

580
00:25:34,980 --> 00:25:42,684


581
00:25:42,684 --> 00:25:44,100
 PROFESOR: Ya, itu sangat rumit. 

582
00:25:44,100 --> 00:25:45,100
 Nah, itu poin yang bagus. 

583
00:25:45,100 --> 00:25:47,659
 Jadi anti-pemalu pada dasarnya terdengar bagus 

584
00:25:47,659 --> 00:25:50,500
 apa ruang lingkup serangan yang Anda coba cegah? 

585
00:25:50,500 --> 00:25:54,055
 Jadi jika Anda khawatir tentang penyerang didistribusikan 

586
00:25:54,055 --> 00:25:57,250
 dan sistem jaringan, itu menjadi sangat, sangat halus. 

587
00:25:57,250 --> 00:26:00,202
 Dan cukuplah untuk mengatakan bahwa gagasan anti-memalu 

588
00:26:00,202 --> 00:26:02,410
 atau [TIDAK JELAS] sistem, dan juga gagasan tentang berbagai hal 

589
00:26:02,410 --> 00:26:05,080
 seperti clipfraud, misalnya. 

590
00:26:05,080 --> 00:26:06,700
 Jadi dengan kata lain, bagaimana seseorang 

591
00:26:06,700 --> 00:26:08,590
 siapa yang menjalankan kampanye iklan online 

592
00:26:08,590 --> 00:26:10,665
 menentukan apakah seseorang benar-benar menempatkan tautan 

593
00:26:10,665 --> 00:26:13,070
 dan benar-benar membayar seseorang untuk klik itu, ayat-ayat 

594
00:26:13,070 --> 00:26:15,560
 ini hanya spammer yang mendapat beberapa kotak hanya duduk 

595
00:26:15,560 --> 00:26:17,200
 ada mengklik barang. 

596
00:26:17,200 --> 00:26:19,241
 Jadi cukuplah untuk mengatakan ada banyak didistribusikan 

597
00:26:19,241 --> 00:26:21,690
 heuristik yang mencoba memecahkan masalah tersebut. 

598
00:26:21,690 --> 00:26:23,980
 Dan dalam banyak kasus, itu bukan ilmu, ini adalah seni. 

599
00:26:23,980 --> 00:26:26,480
 Tapi Anda [TIDAK JELAS] benar dan dalam pengaturan terdistribusi, 

600
00:26:26,480 --> 00:26:30,980
 keadaan menjadi jauh lebih sulit. Baiklah, 

601
00:26:30,980 --> 00:26:32,930
 jadi ini semua masuk akal? 

602
00:26:32,930 --> 00:26:35,330
 AUDIENCE: Bagaimana dengan anti-pemalsuan cryptographic 

603
00:26:35,330 --> 00:26:36,770
 pertahanan? 

604
00:26:36,770 --> 00:26:40,800
 Sebagian besar waktu Anda akhirnya mengirimkan hash di telepon 

605
00:26:40,800 --> 00:26:44,855
 [TIDAK JELAS] bahwa ketika Anda keluar dari itu 

606
00:26:44,855 --> 00:26:46,595
 adalah persis apa yang akan kamu keluar 

607
00:26:46,595 --> 00:26:48,178
 kata sandi dari kata sandi yang dapat di-hash? 

608
00:26:48,178 --> 00:26:50,571


609
00:26:50,571 --> 00:26:52,490
 Saya tahu ada protokol seperti SRP 

610
00:26:52,490 --> 00:26:56,160
 atau ada beberapa protokol pengetahuan nol. 

611
00:26:56,160 --> 00:26:57,062
 PROFESOR: Ya, jadi-- 

612
00:26:57,062 --> 00:26:58,520
 AUDIENCE: Yang Anda gunakan dalam praktek? 

613
00:26:58,520 --> 00:26:59,311
 PROFESOR: Mereka melakukannya. 

614
00:26:59,311 --> 00:27:01,820


615
00:27:01,820 --> 00:27:03,980
 Protokol-protokol itu memberikan beberapa yang lebih kuat 

616
00:27:03,980 --> 00:27:05,160
 jaminan kriptografi. 

617
00:27:05,160 --> 00:27:06,500
 Banyak kali mereka tidak mundur 

618
00:27:06,500 --> 00:27:08,900
 kompatibel dengan sistem saat ini, itulah sebabnya dalam prakteknya Anda 

619
00:27:08,900 --> 00:27:09,470
 tidak melihat mereka banyak digunakan. 

620
00:27:09,470 --> 00:27:10,928
 Tapi ya, ada beberapa protokol, 

621
00:27:10,928 --> 00:27:14,900
 misalnya, yang memungkinkan server tidak 

622
00:27:14,900 --> 00:27:17,840
 memiliki gagasan tentang kata sandi sama sekali. 

623
00:27:17,840 --> 00:27:20,220
 Jadi ada beberapa jenis hal pengetahuan nol atau apa pun. 

624
00:27:20,220 --> 00:27:21,719
 Jadi hal-hal itu bekerja dalam praktek. 

625
00:27:21,719 --> 00:27:24,505
 Tetapi salah satu hal yang ditulis oleh makalah ini sangat menarik 

626
00:27:24,505 --> 00:27:26,880
 adalah bahwa Anda pada dasarnya melalui semua otentikasi ini 

627
00:27:26,880 --> 00:27:29,190
 skema dan mereka berkata, OK, inilah kata sandi. 

628
00:27:29,190 --> 00:27:30,190
 Ya, mereka agak payah. 

629
00:27:30,190 --> 00:27:31,360
 Inilah beberapa hal lain yang sebenarnya 

630
00:27:31,360 --> 00:27:32,770
 lebih kuat pada akses keamanan, 

631
00:27:32,770 --> 00:27:35,500
 tetapi kemudian mereka semua gagal pada deployability atau kegunaan 

632
00:27:35,500 --> 00:27:36,560
 dan hal-hal seperti itu. 

633
00:27:36,560 --> 00:27:39,970
 Dan itulah salah satu yang menarik dan sedikit menyedihkan 

634
00:27:39,970 --> 00:27:41,890
 hasil dari tulisan ini yang mungkin 

635
00:27:41,890 --> 00:27:44,185
 meskipun kita memiliki semua keamanan yang lebih kuat ini 

636
00:27:44,185 --> 00:27:46,680
 untuk protokol, kami tidak dapat menerapkannya 

637
00:27:46,680 --> 00:27:50,164
 untuk beberapa alasan kegunaan atau alasan [tidak terdengar]. 

638
00:27:50,164 --> 00:27:54,440


639
00:27:54,440 --> 00:27:56,277
 Jadi itu hanya situs yang menyenangkan untuk pergi ke kanan. 

640
00:27:56,277 --> 00:27:58,360
 Jadi mereka mengklaim bahwa mereka tidak menyimpan kata sandi Anda 

641
00:27:58,360 --> 00:28:00,660
 jadi Anda mengambil kata-kata mereka jika Anda mau. 

642
00:28:00,660 --> 00:28:03,520
 Tetapi sangat menarik untuk hanya duduk dan berpikir seperti, 

643
00:28:03,520 --> 00:28:04,870
 kata sandi apa yang saya hasilkan? 

644
00:28:04,870 --> 00:28:07,340
 Lalu ketikkan ini, dan lihat seberapa akuratnya 

645
00:28:07,340 --> 00:28:09,685
 itu adalah menebak apa yang akan terjadi selanjutnya. 

646
00:28:09,685 --> 00:28:12,090
 Bahkan mencakup hal-hal seperti heuristik populer 

647
00:28:12,090 --> 00:28:15,760
 seperti mengambil frasa populer yang memiliki banyak kata, 

648
00:28:15,760 --> 00:28:18,180
 lalu hanya mengambil huruf pertama dari setiap kata. 

649
00:28:18,180 --> 00:28:19,650
 Jadi benda ini sangat, sangat bagus. 

650
00:28:19,650 --> 00:28:21,100
 Sangat, sangat menakutkan juga. 

651
00:28:21,100 --> 00:28:23,402
 Oke jadi itu Telepathwords. 

652
00:28:23,402 --> 00:28:25,110
 Dan satu hal yang juga menarik 

653
00:28:25,110 --> 00:28:30,070
 ketika Anda memikirkannya dalam skema kata sandi Anda, 

654
00:28:30,070 --> 00:28:33,760
 apakah itu rentan terhadap tebakan offline. 

655
00:28:33,760 --> 00:28:37,290


656
00:28:37,290 --> 00:28:43,740
 Jadi ini adalah masalah yang Kerberos sebelum itu. 

657
00:28:43,740 --> 00:28:51,550
 Dan kemudian juga V5 tanpa hal ini yang mereka sebut preauth. 

658
00:28:51,550 --> 00:28:55,090
 Jadi ide dasarnya adalah bahwa dalam versi Kerberos ini, 

659
00:28:55,090 --> 00:28:58,530
 siapa pun bisa meminta KDC untuk tiket yang akan dienkripsi 

660
00:28:58,530 --> 00:29:00,610
 dengan kata sandi pengguna. 

661
00:29:00,610 --> 00:29:04,149
 Jadi pada dasarnya, KDC tidak mengautentikasi permintaan 

662
00:29:04,149 --> 00:29:05,440
 yang berasal dari klien. 

663
00:29:05,440 --> 00:29:07,500
 Sekarang hal yang akan dikembalikan KDC 

664
00:29:07,500 --> 00:29:12,180
 sebenarnya, ada beberapa kumpulan bit 

665
00:29:12,180 --> 00:29:13,980
 di sini bahwa KDC akan kembali. 

666
00:29:13,980 --> 00:29:16,275
 Saya yakin Anda tidak ingin memikirkan set jelek ini 

667
00:29:16,275 --> 00:29:17,340
 printer cryptographic lagi. 

668
00:29:17,340 --> 00:29:18,839
 Tetapi cukup untuk mengatakan, KDC akan 

669
00:29:18,839 --> 00:29:21,430
 kembalikan barang-barang ini yang dienkripsi 

670
00:29:21,430 --> 00:29:24,490
 dengan kunci klien. 

671
00:29:24,490 --> 00:29:26,510
 Itulah yang akan kembali ke sisi klien. 

672
00:29:26,510 --> 00:29:30,420
 Jadi masalah dengan ini adalah karena server tidak 

673
00:29:30,420 --> 00:29:34,730
 periksa siapa yang mengirim kumpulan hal terenkripsi ini ke, 

674
00:29:34,730 --> 00:29:38,520
 penyerang pada dasarnya bisa mendapatkan benda ini di sini dan kemudian 

675
00:29:38,520 --> 00:29:40,900
 coba tebak saja apa itu KC. 

676
00:29:40,900 --> 00:29:43,856
 Coba tebak bahwa KC adalah suatu nilai, cobalah untuk mengenkripsi ini, 

677
00:29:43,856 --> 00:29:44,980
 lihat apakah itu terlihat masuk akal. 

678
00:29:44,980 --> 00:29:47,720
 Jika tidak, coba tebak KC lain, dekripsi ini, 

679
00:29:47,720 --> 00:29:48,970
 lihat apakah itu terlihat masuk akal. 

680
00:29:48,970 --> 00:29:52,270
 Dan alasan mengapa penyerang dapat meluncurkan jenis serangan ini, 

681
00:29:52,270 --> 00:29:54,950
 adalah bahwa hal ini di sini, TGT ini sebenarnya 

682
00:29:54,950 --> 00:29:57,370
 memiliki format yang dikenal. 

683
00:29:57,370 --> 00:29:59,420
 Jadi ada hal-hal di sini seperti stempel waktu, 

684
00:29:59,420 --> 00:30:02,010
 dan memiliki banyak hal di sini seperti berbagai bidang tautan 

685
00:30:02,010 --> 00:30:03,870
 menjadi konsisten secara internal. 

686
00:30:03,870 --> 00:30:06,970
 Dan pada dasarnya membantu penyerang. 

687
00:30:06,970 --> 00:30:10,380
 Karena jika penyerang menebak KC, mendapatkan benda ini di sini, 

688
00:30:10,380 --> 00:30:12,550
 hal yang didekripsi, dan bidang internal 

689
00:30:12,550 --> 00:30:14,600
 jangan periksa, penyerang tahu 

690
00:30:14,600 --> 00:30:16,453
 bahwa itu memilih KC yang salah, jadi mereka 

691
00:30:16,453 --> 00:30:18,480
 dapat melanjutkan dan memilih KC yang lain. 

692
00:30:18,480 --> 00:30:24,570
 Jadi, di Kerberos V5, pada dasarnya klien 

693
00:30:24,570 --> 00:30:30,330
 harus mengirimkan hal ini yang dikirimkan ke KDC, 

694
00:30:30,330 --> 00:30:36,790
 pada dasarnya mengirimkan stempel waktu. 

695
00:30:36,790 --> 00:30:40,900
 Dan kemudian cap waktu ini akan dienkripsi dengan KC. 

696
00:30:40,900 --> 00:30:43,230
 Jadi ini dikirim ke server, dan server 

697
00:30:43,230 --> 00:30:46,240
 melihat ini dan memvalidasi bahwa sebelum itu akan mengirim sesuatu 

698
00:30:46,240 --> 00:30:47,280
 kembali ke klien. 

699
00:30:47,280 --> 00:30:49,930
 Sehingga menghilangkan masalah ini bahwa setiap klien acak 

700
00:30:49,930 --> 00:30:53,354
 dapat muncul dan hanya meminta hal ini di sini. 

701
00:30:53,354 --> 00:30:56,840


702
00:30:56,840 --> 00:31:00,824
 AUDIENCE: Jadi cap waktu yang terekam dalam pesan? 

703
00:31:00,824 --> 00:31:04,657
 Jadi, bukankah penyerangnya hanya memberikan pesan ini dan menegakkannya? 

704
00:31:04,657 --> 00:31:05,740
 PROFESOR: Mari kita lihat di sini. 

705
00:31:05,740 --> 00:31:09,670
 Jadi, bukankah penyerang dapat menerima pesan ini di sini? 

706
00:31:09,670 --> 00:31:11,902
 AUDIENCE: Ya, enkripsi [tidak terdengar]. 

707
00:31:11,902 --> 00:31:14,360
 PROFESOR: Jadi Anda berpikir di mana penyerang mungkin saja 

708
00:31:14,360 --> 00:31:15,500
 spoof ini, misalnya? 

709
00:31:15,500 --> 00:31:19,227
 AUDIENCE: Tidak, saya hanya brute memaksanya dan mengeluarkan KC. 

710
00:31:19,227 --> 00:31:19,810
 PROFESOR: OK. 

711
00:31:19,810 --> 00:31:21,185
 Jadi dengan kata lain, Anda khawatir 

712
00:31:21,185 --> 00:31:22,954
 seseorang bisa mengamati ini. 

713
00:31:22,954 --> 00:31:23,620
 AUDIENCE: Benar. 

714
00:31:23,620 --> 00:31:25,090
 PROFESOR: Jadi saya percaya ini 

715
00:31:25,090 --> 00:31:29,166
 dimasukkan ke dalam hal yang dienkripsi milik server, 

716
00:31:29,166 --> 00:31:30,540
 atau kunci milik server. 

717
00:31:30,540 --> 00:31:32,331
 Saya pikir untuk mencegah serangan itu. [TIDAK JELAS] 

718
00:31:32,331 --> 00:31:34,390
 jadi jangan mengutip saya tentang itu. 

719
00:31:34,390 --> 00:31:36,250
 Tetapi Anda benar itu tidak, misalnya. 

720
00:31:36,250 --> 00:31:37,625
 Dan jika penyerang, misalnya, 

721
00:31:37,625 --> 00:31:39,890
 tahu sesuatu tentang apa waktu saat ini, 

722
00:31:39,890 --> 00:31:42,400
 kira-kira, itu sebenarnya sangat berguna. 

723
00:31:42,400 --> 00:31:44,190
 Karena kemudian penyerang bisa menebak, 

724
00:31:44,190 --> 00:31:46,815
 oh, cap waktu harus kira-kira antara sini dan sini. 

725
00:31:46,815 --> 00:31:48,190
 Dan jika melihat itu jelas, 

726
00:31:48,190 --> 00:31:50,357
 ia dapat melakukan serangan yang sama persis seperti yang kami lakukan di sini. 

727
00:31:50,357 --> 00:31:52,648
 AUDIENCE: Ini sedikit lebih baik karena penyerang memiliki 

728
00:31:52,648 --> 00:31:54,712
 berada di tengah, tetapi masih rentan. 

729
00:31:54,712 --> 00:31:55,670
 PROFESOR: Itu benar. 

730
00:31:55,670 --> 00:31:57,150
 Ya, itu benar, penyerang 

731
00:31:57,150 --> 00:31:58,770
 harus berada di jaringan di suatu tempat 

732
00:31:58,770 --> 00:32:00,370
 ini [tidak terdengar] barang. 

733
00:32:00,370 --> 00:32:00,946
 Betul. 

734
00:32:00,946 --> 00:32:04,070


735
00:32:04,070 --> 00:32:06,350
 Jadi itu saja, saya tebak. 

736
00:32:06,350 --> 00:32:09,130
 Jadi, hal lain yang penting untuk dipikirkan 

737
00:32:09,130 --> 00:32:14,580
 adalah pemulihan kata sandi. 

738
00:32:14,580 --> 00:32:18,510


739
00:32:18,510 --> 00:32:20,950
 Jadi ini adalah ide bahwa Anda kehilangan kata sandi Anda, 

740
00:32:20,950 --> 00:32:23,380
 dan kemudian entah bagaimana Anda harus pergi ke layanan tersebut 

741
00:32:23,380 --> 00:32:26,636
 dan Anda harus meminta kata sandi lain. 

742
00:32:26,636 --> 00:32:28,010
 Tetapi sebelum Anda mendapatkan kata sandi itu, 

743
00:32:28,010 --> 00:32:30,220
 Anda harus membuktikan bahwa Anda adalah Anda dalam beberapa cara. 

744
00:32:30,220 --> 00:32:31,290
 Jadi bagaimana cara kerjanya? 

745
00:32:31,290 --> 00:32:32,650
 Bagaimana cara melakukan pemulihan kata sandi? 

746
00:32:32,650 --> 00:32:35,940
 Jadi yang menarik adalah orang-orang seringkali 

747
00:32:35,940 --> 00:32:39,190
 fokus pada entropi kata sandi itu sendiri. 

748
00:32:39,190 --> 00:32:43,430
 Tapi masalahnya adalah jika pemulihan kata sandi 

749
00:32:43,430 --> 00:32:45,570
 pertanyaan atau skema pemulihan kata sandi 

750
00:32:45,570 --> 00:32:47,420
 memiliki sedikit entropi, itu sebenarnya 

751
00:32:47,420 --> 00:32:50,113
 mempengaruhi entropi skema otentikasi keseluruhan. 

752
00:32:50,113 --> 00:32:55,240
 Jadi dengan kata lain, kekuatan skema keseluruhan 

753
00:32:55,240 --> 00:32:58,520
 pada dasarnya sama dengan minimum 

754
00:32:58,520 --> 00:33:07,440
 dari entropi kata sandi di entropi pertanyaan pemulihan. 

755
00:33:07,440 --> 00:33:11,589


756
00:33:11,589 --> 00:33:13,960
 Jadi Anda melihat ini benar-benar bermain 

757
00:33:13,960 --> 00:33:16,005
 dalam banyak skenario skenario. 

758
00:33:16,005 --> 00:33:18,380
 Ada banyak kasus terkenal, seperti kasus Sarah Palin, 

759
00:33:18,380 --> 00:33:21,700
 di mana pada dasarnya seseorang bisa pulih 

760
00:33:21,700 --> 00:33:25,300
 kata sandinya curang karena kesembuhannya 

761
00:33:25,300 --> 00:33:28,029
 pertanyaan adalah hal-hal yang dapat ditemukan oleh setiap orang secara acak. 

762
00:33:28,029 --> 00:33:30,070
 Dengan melihat artikel Wikipedia-nya, misalnya, 

763
00:33:30,070 --> 00:33:32,880
 cari tahu di mana dia pergi ke sekolah menengah dan hal-hal seperti itu. 

764
00:33:32,880 --> 00:33:35,840
 Dan sering kali pertanyaan pemulihan kata sandi ini 

765
00:33:35,840 --> 00:33:36,950
 tidak begitu bagus. 

766
00:33:36,950 --> 00:33:39,980
 Dan mereka tidak terlalu bagus karena beberapa alasan. 

767
00:33:39,980 --> 00:33:44,560
 Jadi kadang-kadang hal-hal ini hanya memiliki entropi yang sangat rendah. 

768
00:33:44,560 --> 00:33:46,990
 Jadi jika Anda memiliki pertanyaan pemulihan kata sandi itu 

769
00:33:46,990 --> 00:33:49,610
 adalah sesuatu seperti, apa warna favoritmu, 

770
00:33:49,610 --> 00:33:52,190
 jawaban yang paling populer akan menjadi seperti biru dan merah. 

771
00:33:52,190 --> 00:33:55,300
 Tidak ada yang akan mengatakan seperti putih, fuchsia, magenta. 

772
00:33:55,300 --> 00:33:57,150
 Jadi beberapa pertanyaan pemulihan ini 

773
00:33:57,150 --> 00:34:01,035
 secara intrinsik sangat sulit untuk memberikan banyak entropi 

774
00:34:01,035 --> 00:34:01,770
 untuk. 

775
00:34:01,770 --> 00:34:05,140
 Masalah lainnya adalah terkadang ini 

776
00:34:05,140 --> 00:34:11,560
 Pulihkan pertanyaan bisa bocor melalui media sosial. 

777
00:34:11,560 --> 00:34:14,270
 Jadi misalnya, jika salah satu pertanyaan pemulihan 

778
00:34:14,270 --> 00:34:16,020
 apa film favoritmu? 

779
00:34:16,020 --> 00:34:18,170
 Jadi mungkin ruang ini sedikit lebih besar, 

780
00:34:18,170 --> 00:34:20,540
 tetapi jika secara intrinsik saya bisa melihat, katakanlah, 

781
00:34:20,540 --> 00:34:22,530
 profil IMDB Anda, profil Facebook Anda, 

782
00:34:22,530 --> 00:34:24,482
 dan mencari tahu seperti, oh, hei, Anda benar-benar 

783
00:34:24,482 --> 00:34:25,940
 memberitahuku itu film favoritmu, 

784
00:34:25,940 --> 00:34:27,820
 ini juga tidak terlalu berguna. 

785
00:34:27,820 --> 00:34:29,500
 Dan masalah lain-- ini sebenarnya 

786
00:34:29,500 --> 00:34:32,270
 semacam yang terlucu-- adalah pengguna itu 

787
00:34:32,270 --> 00:34:38,270
 pertanyaan pemulihan yang dipilih seringkali sangat lemah. 

788
00:34:38,270 --> 00:34:42,396
 Jadi misalnya, orang telah melakukan survei 

789
00:34:42,396 --> 00:34:44,520
 seperti apa beberapa pertanyaan pemulihan ini, 

790
00:34:44,520 --> 00:34:46,370
 dan terkadang pengguna itu sendiri 

791
00:34:46,370 --> 00:34:51,820
 mengatur pertanyaan pemulihan yang hal-hal seperti apa 2 plus 3? 

792
00:34:51,820 --> 00:34:55,000
 Maka, pada saat itu, pengguna berpikir ini merupakan kerumitan besar, 

793
00:34:55,000 --> 00:34:56,409
 kita harus menggunakan ini. 

794
00:34:56,409 --> 00:34:59,680
 Tapi sepele kebanyakan manusia yang lulus Tes Turing 

795
00:34:59,680 --> 00:35:01,848
 dapat menjawab pertanyaan itu dengan sukses. 

796
00:35:01,848 --> 00:35:04,842
 Dan kemudian mengembalikan kata sandi pengguna. 

797
00:35:04,842 --> 00:35:12,340
 AUDIENCE: Jadi [TIDAK JELAS] seperti menggunakan kata sandi pemulihan? 

798
00:35:12,340 --> 00:35:16,462
 Pada dasarnya seperti Anda memasukkan nama Anda dan mungkin subjek 

799
00:35:16,462 --> 00:35:18,891
 dari beberapa email yang Anda kirim, seperti jumlah kecil 

800
00:35:18,891 --> 00:35:19,974
 informasi tambahan. 

801
00:35:19,974 --> 00:35:21,979
 Tetapi berdasarkan itu, dalam beberapa kasus mereka 

802
00:35:21,979 --> 00:35:26,200
 can-- adalah keamanan dari hal semacam itu? 

803
00:35:26,200 --> 00:35:28,771
 PROFESOR: Jadi saya tidak tahu ada studi formal seperti itu. 

804
00:35:28,771 --> 00:35:30,396
 Hal-hal itu sebenarnya jauh lebih baik. 

805
00:35:30,396 --> 00:35:32,770
 Saya sebenarnya tahu ini, karena saya 

806
00:35:32,770 --> 00:35:35,000
 mencoba membantu teman melalui proses ini. 

807
00:35:35,000 --> 00:35:38,630
 Jadi pada dasarnya dia kehilangan kendali atas akun Gmail-nya, 

808
00:35:38,630 --> 00:35:40,880
 dan dia mencoba membuktikan bahwa ini adalah akunnya. 

809
00:35:40,880 --> 00:35:43,840
 Dan ya, mereka akan menanyakan hal-hal seperti berbicara kasar, 

810
00:35:43,840 --> 00:35:46,100
 kapan Anda membuka akun ini. 

811
00:35:46,100 --> 00:35:48,573
 Secara kasar sebelum Anda kehilangan kendali atas akun ini 

812
00:35:48,573 --> 00:35:52,770
 untuk hesball atau apa pun, yang adalah beberapa orang 

813
00:35:52,770 --> 00:35:54,205
 yang kamu ajak bicara? 

814
00:35:54,205 --> 00:35:55,080
 Dan hal-hal seperti itu. 

815
00:35:55,080 --> 00:35:57,187
 Dan itu sebenarnya proses yang sangat melelahkan. 

816
00:35:57,187 --> 00:35:59,520
 Apa yang akhirnya terjadi adalah Anda pada umumnya benar, 

817
00:35:59,520 --> 00:36:01,950
 itu menjadi jauh lebih kuat daripada barang-barang ini. 

818
00:36:01,950 --> 00:36:04,920
 Dan sebenarnya saya tidak tahu ada studi formal tentang itu, 

819
00:36:04,920 --> 00:36:06,656
 tetapi tampaknya [TIDAK JELAS] jauh lebih kuat 

820
00:36:06,656 --> 00:36:07,886
 daripada hal-hal semacam ini. 

821
00:36:07,886 --> 00:36:11,259


822
00:36:11,259 --> 00:36:12,550
 Baiklah, ada pertanyaan lain? 

823
00:36:12,550 --> 00:36:16,350


824
00:36:16,350 --> 00:36:20,810
 Sekarang kita bisa mendapatkan kertas untuk hari ini. 

825
00:36:20,810 --> 00:36:24,010
 Jadi membaca untuk hari ini, pada dasarnya penulis 

826
00:36:24,010 --> 00:36:28,610
 mengusulkan banyak faktor yang dapat digunakan untuk mengevaluasi 

827
00:36:28,610 --> 00:36:30,465
 skema otentikasi ini. 

828
00:36:30,465 --> 00:36:32,506
 Dan apa yang benar-benar keren tentang tulisan ini, saya pikir, 

829
00:36:32,506 --> 00:36:35,010
 adalah bahwa pada dasarnya mencoba untuk mengatakan, lihat, banyak dari kita 

830
00:36:35,010 --> 00:36:37,460
 di komunitas keamanan hanya berkelahi 

831
00:36:37,460 --> 00:36:38,710
 berdasarkan prinsip estetika. 

832
00:36:38,710 --> 00:36:41,020
 Seperti, kita harus memilih ini karena saya hanya 

833
00:36:41,020 --> 00:36:43,260
 seperti cara kurung kurawal terlihat di buktinya. 

834
00:36:43,260 --> 00:36:46,161
 Kita harus memilih ini karena menggunakan banyak mode matematika. 

835
00:36:46,161 --> 00:36:48,660
 Dan apa yang mereka katakan adalah, lihat, mengapa kita tidak mencoba untuk menetapkan 

836
00:36:48,660 --> 00:36:50,050
 beberapa jenis kriteria? 

837
00:36:50,050 --> 00:36:52,510
 Mungkin beberapa kriteria sedikit subjektif. 

838
00:36:52,510 --> 00:36:54,630
 Mari mencoba cara taksonomi ini 

839
00:36:54,630 --> 00:36:56,620
 untuk mengevaluasi skema otentikasi. 

840
00:36:56,620 --> 00:36:59,900
 Dan mari kita lihat bagaimana berbagai skema ini menumpuk. 

841
00:36:59,900 --> 00:37:03,060
 Jadi penulis pada dasarnya mengusulkan tiga level tinggi 

842
00:37:03,060 --> 00:37:05,660
 metrik untuk mengevaluasi skema ini. 

843
00:37:05,660 --> 00:37:11,910
 Jadi, metrik pertama adalah kegunaan. 

844
00:37:11,910 --> 00:37:13,950
 Jadi, ide dasarnya adalah bagaimana caranya 

845
00:37:13,950 --> 00:37:16,520
 mudah bagi pengguna untuk berinteraksi dengan otentikasi ini 

846
00:37:16,520 --> 00:37:17,620
 skema. 

847
00:37:17,620 --> 00:37:20,000
 Jadi mereka menemukan beberapa properti yang menarik. 

848
00:37:20,000 --> 00:37:23,820
 Jadi misalnya, apakah mudah dipelajari? 

849
00:37:23,820 --> 00:37:26,580


850
00:37:26,580 --> 00:37:29,679
 Pada dasarnya ini hanya berarti apakah skema ini mudah dipelajari? 

851
00:37:29,679 --> 00:37:31,970
 Jadi beberapa kategori ini cukup mudah. 

852
00:37:31,970 --> 00:37:33,830
 Beberapa dari mereka sebenarnya melibatkan sedikit kehalusan. 

853
00:37:33,830 --> 00:37:35,512
 Tapi yang satu ini masuk akal. 

854
00:37:35,512 --> 00:37:43,710
 Jadi jika kita melihat kata sandi, kata sandi lulus tes ini. 

855
00:37:43,710 --> 00:37:48,460
 Karena semua orang terbiasa menggunakan kata sandi, jadi kami akan mengatakannya 

856
00:37:48,460 --> 00:37:49,550
 mereka mudah dipelajari. 

857
00:37:49,550 --> 00:37:54,480
 Kategori lain adalah kesalahan yang jarang terjadi. 

858
00:37:54,480 --> 00:37:56,480
 Jadi itu berarti ketika Anda mencoba 

859
00:37:56,480 --> 00:37:58,583
 untuk mengotentikasi sistem, jika Anda 

860
00:37:58,583 --> 00:38:01,189
 adalah pengguna sebenarnya yang dimaksud, apakah itu 

861
00:38:01,189 --> 00:38:03,230
 kasus yang sering Anda dapat mengotentikasi sendiri 

862
00:38:03,230 --> 00:38:04,990
 tanpa menghasilkan kesalahan? 

863
00:38:04,990 --> 00:38:09,050
 Maka, di sini penulis mengatakan quasi-ya. 

864
00:38:09,050 --> 00:38:12,970


865
00:38:12,970 --> 00:38:15,316
 Jadi awalan kuasi adalah salah satu yang lebih menghibur 

866
00:38:15,316 --> 00:38:17,190
 aspek kertas, karena penulis semacam 

867
00:38:17,190 --> 00:38:20,010
 akui ada unsur subjektivitas ini. 

868
00:38:20,010 --> 00:38:24,350
 Jadi kita tidak bisa selalu mengatakan dengan presisi yang tajam ya, tidak, hal-hal 

869
00:38:24,350 --> 00:38:25,020
 seperti ini. 

870
00:38:25,020 --> 00:38:26,760
 Jadi alasan mengapa mereka mengatakan quasi-ya 

871
00:38:26,760 --> 00:38:30,120
 karena, secara umum, Anda dapat mengotentikasi kata sandi 

872
00:38:30,120 --> 00:38:30,700
 berhasil. 

873
00:38:30,700 --> 00:38:33,109
 Tapi kita semua pernah berada di tempat seperti ini jam 3 pagi, 

874
00:38:33,109 --> 00:38:34,900
 kami mencoba masuk ke server email kami, 

875
00:38:34,900 --> 00:38:36,060
 pikiran kita tidak berada di tempat yang tepat, 

876
00:38:36,060 --> 00:38:38,060
 dan kami memasukkan banyak kesalahan beberapa kali. 

877
00:38:38,060 --> 00:38:41,030
 Jadi mereka mengatakan quasi-ya untuk ini. 

878
00:38:41,030 --> 00:38:46,510
 Kategori lain adalah skalabel untuk pengguna. 

879
00:38:46,510 --> 00:38:50,006


880
00:38:50,006 --> 00:38:54,867
 Jadi ide dasarnya di sini adalah jika pengguna memilikinya 

881
00:38:54,867 --> 00:38:56,950
 sekelompok layanan berbeda yang dia inginkan 

882
00:38:56,950 --> 00:39:01,160
 untuk mengotentikasi ke, apakah skala skema ini baik? 

883
00:39:01,160 --> 00:39:04,110
 Apakah pengguna harus mengingat beberapa hal baru 

884
00:39:04,110 --> 00:39:06,290
 untuk masing-masing skema? 

885
00:39:06,290 --> 00:39:11,200
 Maka, untuk di sini, penulis mengatakan tidak. 

886
00:39:11,200 --> 00:39:14,480
 Karena dalam praktiknya, sangat sulit bagi pengguna 

887
00:39:14,480 --> 00:39:18,130
 untuk mengingat kata sandi terpisah untuk setiap situs tunggal 

888
00:39:18,130 --> 00:39:18,880
 yang mereka datangi. 

889
00:39:18,880 --> 00:39:21,500
 Inilah salah satu alasan mengapa orang menggunakan kembali kata sandinya 

890
00:39:21,500 --> 00:39:23,660
 sering. 

891
00:39:23,660 --> 00:39:27,216
 Jadi properti kegunaan lain adalah pemulihan yang mudah. 

892
00:39:27,216 --> 00:39:30,370


893
00:39:30,370 --> 00:39:34,230
 Jadi apa yang terjadi jika Anda kehilangan otentikasi Anda 

894
00:39:34,230 --> 00:39:37,160
 token-- dalam hal ini, kata sandi Anda-- apakah mudah disetel ulang? 

895
00:39:37,160 --> 00:39:42,060
 Dan dalam hal ini, jawaban untuk kata sandi adalah ya. 

896
00:39:42,060 --> 00:39:44,670
 Bahkan, mereka mungkin terlalu mudah diatur ulang, 

897
00:39:44,670 --> 00:39:46,620
 seperti yang baru saja kita bahas beberapa menit yang lalu. 

898
00:39:46,620 --> 00:39:49,690
 Jadi itu ya. 

899
00:39:49,690 --> 00:39:52,210
 Jadi yang lain tidak ada yang bisa dibawa. 

900
00:39:52,210 --> 00:39:54,730


901
00:39:54,730 --> 00:39:58,690
 Jadi banyak protokol otentikasi Barouque 

902
00:39:58,690 --> 00:40:01,190
 mengharuskan Anda menjalankan beberapa aplikasi ponsel cerdas, 

903
00:40:01,190 --> 00:40:03,880
 atau Anda memiliki beberapa token keamanan atau kartu pintar atau benda 

904
00:40:03,880 --> 00:40:04,790
 seperti itu. 

905
00:40:04,790 --> 00:40:07,370
 Jadi itu beban. 

906
00:40:07,370 --> 00:40:08,870
 Mungkin tidak dengan smartphone begitu banyak, 

907
00:40:08,870 --> 00:40:11,350
 tetapi harus membawa-bawa salah satu gadget lain ini 

908
00:40:11,350 --> 00:40:12,310
 mungkin rasa sakit. 

909
00:40:12,310 --> 00:40:17,300
 Dan ini sebenarnya adalah salah satu fitur sandi yang bagus, 

910
00:40:17,300 --> 00:40:20,340
 Anda pada dasarnya hanya perlu membawa-bawa di otak Anda, 

911
00:40:20,340 --> 00:40:22,570
 yang merupakan salah satu yang harus Anda miliki setiap saat. 

912
00:40:22,570 --> 00:40:25,427
 Jadi pada dasarnya apa yang tampak seperti kegunaan. 

913
00:40:25,427 --> 00:40:27,010
 Ini sangat menarik dalam level yang tinggi 

914
00:40:27,010 --> 00:40:30,600
 bahwa banyak kali faktor semacam ini 

915
00:40:30,600 --> 00:40:33,705
 diberikan sedikit perhatian singkat di masyarakat. 

916
00:40:33,705 --> 00:40:36,080
 Keamanan dapat terjadi ketika orang mengevaluasi skema ini. 

917
00:40:36,080 --> 00:40:38,770
 Mereka berkata, oh, benda ini menggunakan jutaan entropi, 

918
00:40:38,770 --> 00:40:41,090
 dan hanya bisa dipatahkan oleh Death Star atau apalah. 

919
00:40:41,090 --> 00:40:42,464
 Tetapi kemudian orang tidak perlu 

920
00:40:42,464 --> 00:40:46,040
 ingat ini sebenarnya adalah faktor yang sangat penting juga. 

921
00:40:46,040 --> 00:40:52,550
 Oke jadi kategori tingkat tinggi berikutnya 

922
00:40:52,550 --> 00:40:56,210
 yang penulis gunakan untuk mengevaluasi skema otentikasi 

923
00:40:56,210 --> 00:40:58,350
 adalah deployability. 

924
00:40:58,350 --> 00:41:00,652
 Jadi ide dasarnya adalah betapa mudahnya 

925
00:41:00,652 --> 00:41:05,940
 apakah itu untuk memasukkan sistem ini ke layanan web saat ini. 

926
00:41:05,940 --> 00:41:07,890
 Jadi satu hal yang mereka lihat, misalnya, 

927
00:41:07,890 --> 00:41:12,753
 Apakah itu server yang kompatibel? 

928
00:41:12,753 --> 00:41:16,050


929
00:41:16,050 --> 00:41:18,350
 Dan ini pada dasarnya berarti saya dapat dengan mudah berintegrasi 

930
00:41:18,350 --> 00:41:22,200
 skema ini dengan server hari ini, yang didasarkan 

931
00:41:22,200 --> 00:41:24,230
 sekitar kata sandi berbasis teks? 

932
00:41:24,230 --> 00:41:27,440
 Dan karena keberhasilan di sini didefinisikan dengan hormat 

933
00:41:27,440 --> 00:41:30,820
 ke kata sandi, kata sandi berhasil. 

934
00:41:30,820 --> 00:41:35,700
 Jadi metrik lain adalah kompatibilitas browser. 

935
00:41:35,700 --> 00:41:37,225
 Jenis serupa. 

936
00:41:37,225 --> 00:41:41,130
 Dapatkah saya menggunakan skema ini dengan peramban saat ini 

937
00:41:41,130 --> 00:41:44,390
 tanpa harus menginstal plug-in, sesuatu seperti itu? 

938
00:41:44,390 --> 00:41:48,408
 Sekali lagi, kata sandi menang secara default. 

939
00:41:48,408 --> 00:41:50,396
 Dan yang menarik lainnya adalah kelebihan. 

940
00:41:50,396 --> 00:41:54,870


941
00:41:54,870 --> 00:41:58,802
 Begitu juga orang yang bisa menggunakan kata sandi sekarang, tapi mungkin 

942
00:41:58,802 --> 00:42:01,010
 memiliki beberapa jenis cacat fisik - mungkin mereka 

943
00:42:01,010 --> 00:42:03,987
 buta, atau mereka tidak bisa mendengar dengan baik, atau mereka tidak bisa memberi isyarat dengan baik, 

944
00:42:03,987 --> 00:42:04,820
 atau hal-hal seperti itu. 

945
00:42:04,820 --> 00:42:07,050
 Bisakah mereka benar-benar menggunakan skema ini? 

946
00:42:07,050 --> 00:42:08,580
 Ini sebenarnya sangat penting. 

947
00:42:08,580 --> 00:42:12,462
 Jadi sekali lagi, penulis mengatakan ya. 

948
00:42:12,462 --> 00:42:14,420
 Agak aneh, karena tidak jelas 

949
00:42:14,420 --> 00:42:16,880
 bahwa semua orang dengan segala keterbatasan dapat menggunakan kata sandi, 

950
00:42:16,880 --> 00:42:20,470
 tetapi mereka mengatakan ya di sini. 

951
00:42:20,470 --> 00:42:22,690
 Jadi ya, jadi ini adalah tiga hal yang menarik 

952
00:42:22,690 --> 00:42:24,890
 untuk memikirkan tentang deployability. 

953
00:42:24,890 --> 00:42:26,960
 Dan alasan mengapa kategori deployability ini 

954
00:42:26,960 --> 00:42:29,940
 sangat penting karena sangat sulit untuk mendapatkan siapa pun 

955
00:42:29,940 --> 00:42:33,220
 untuk meningkatkan apa pun yang pernah ada. 

956
00:42:33,220 --> 00:42:35,800
 Maksud saya orang bahkan tidak ingin me-reboot komputer mereka 

957
00:42:35,800 --> 00:42:38,155
 dan dapatkan pembaruan OS baru yang diinstal. 

958
00:42:38,155 --> 00:42:40,780
 Jadi sangat sulit skema ini membutuhkan perubahan yang dapat digunakan 

959
00:42:40,780 --> 00:42:42,749
 di server untuk membuat orang-orang di server 

960
00:42:42,749 --> 00:42:44,040
 untuk benar-benar melakukan hal yang berbeda. 

961
00:42:44,040 --> 00:42:45,340
 Ini kembali ke pertanyaan Anda, mengapa kita tidak melakukannya 

962
00:42:45,340 --> 00:42:46,480
 menggunakan hal-hal yang lebih baik ini? 

963
00:42:46,480 --> 00:42:47,590
 Penyebab deployability dalam banyak kasus 

964
00:42:47,590 --> 00:42:49,089
 super, super penting untuk orang. 

965
00:42:49,089 --> 00:42:51,920


966
00:42:51,920 --> 00:42:56,450
 Baiklah, jadi kategori terakhir yang akan kita lihat 

967
00:42:56,450 --> 00:42:57,125
 adalah keamanan. 

968
00:42:57,125 --> 00:43:00,690


969
00:43:00,690 --> 00:43:04,750
 Benar, jadi serangan macam apa yang bisa dicegah skema ini? 

970
00:43:04,750 --> 00:43:09,305
 Jadi banyak sekali properti keamanan ini 

971
00:43:09,305 --> 00:43:12,590
 tahan terhadap foo. 

972
00:43:12,590 --> 00:43:15,060
 Saya hanya akan mempersingkatnya. 

973
00:43:15,060 --> 00:43:21,750
 Jadi, apakah skema ini tangguh terhadap pengamatan fisik? 

974
00:43:21,750 --> 00:43:25,090


975
00:43:25,090 --> 00:43:27,970
 Jadi idenya di sini adalah bahwa penyerang tidak bisa 

976
00:43:27,970 --> 00:43:30,730
 menyamar sebagai pengguna setelah mengamati 

977
00:43:30,730 --> 00:43:33,400
 mereka mengotentikasi beberapa kali. 

978
00:43:33,400 --> 00:43:35,540
 Jadi bayangkan Anda memiliki surfer bahu. 

979
00:43:35,540 --> 00:43:37,280
 Jadi Anda di suatu tempat di lab komputer, 

980
00:43:37,280 --> 00:43:38,821
 seseorang melihat dari balik bahumu, 

981
00:43:38,821 --> 00:43:39,980
 melihat apa yang Anda ketik. 

982
00:43:39,980 --> 00:43:42,400
 Seseorang merekam Anda, mungkin seseorang 

983
00:43:42,400 --> 00:43:44,802
 mendapat mikrofon yang mendengarkan tanda akustik 

984
00:43:44,802 --> 00:43:46,677
 keyboard Anda dan mencoba mengekstrak sesuatu 

985
00:43:46,677 --> 00:43:49,630
 dari itu, seterusnya dan seterusnya. 

986
00:43:49,630 --> 00:43:53,820
 Jadi, penulis mengatakan bahwa kata sandi sebenarnya 

987
00:43:53,820 --> 00:43:55,190
 gagal dalam tes ini. 

988
00:43:55,190 --> 00:44:00,090
 Dan itu karena seseorang dapat merekam berbagai hal, 

989
00:44:00,090 --> 00:44:02,640
 mereka dapat dengan mudah mencari tahu huruf apa yang Anda ketikkan. 

990
00:44:02,640 --> 00:44:04,973
 Atau sebenarnya ada serangan-serangan ini di mana Anda bisa benar-benar 

991
00:44:04,973 --> 00:44:07,810
 dengarkan sidik jari akustik keyboard, 

992
00:44:07,810 --> 00:44:11,840
 dan mendeteksi apa yang diketik berdasarkan suara apa yang Anda dengar. 

993
00:44:11,840 --> 00:44:15,910
 Jadi kata sandi tidak tahan terhadap pengamatan fisik. 

994
00:44:15,910 --> 00:44:25,135
 Jadi properti lain tahan terhadap peniruan yang ditargetkan. 

995
00:44:25,135 --> 00:44:28,580


996
00:44:28,580 --> 00:44:30,630
 Dan demikianlah gagasan dasar di sini bahwa, adalah 

997
00:44:30,630 --> 00:44:33,570
 itu mungkin bagi seseorang yang mengenal Anda - seorang teman, 

998
00:44:33,570 --> 00:44:35,280
 seorang kenalan, pasangan, orang yang dicintai, 

999
00:44:35,280 --> 00:44:38,795
 anggota keluarga, apalah-- untuk berkedok 

1000
00:44:38,795 --> 00:44:44,290
 Anda menggunakan pengetahuan mereka tentang siapa Anda dan apa yang Anda lakukan. 

1001
00:44:44,290 --> 00:44:46,667
 Jadi bisakah temanmu mencoba berpura-pura menjadi kamu dengan mudah 

1002
00:44:46,667 --> 00:44:47,750
 dalam skema khusus ini? 

1003
00:44:47,750 --> 00:44:53,065
 Jadi di sini penulis pada dasarnya memiliki yang lain 

1004
00:44:53,065 --> 00:44:53,940
 dari quasi-ya ini. 

1005
00:44:53,940 --> 00:44:56,900


1006
00:44:56,900 --> 00:44:59,610
 Dan mereka mengatakan quasi-ya karena tidak 

1007
00:44:59,610 --> 00:45:03,095
 mengetahui setiap penelitian yang menunjukkan bahwa jika Anda mengenal seseorang, 

1008
00:45:03,095 --> 00:45:05,570
 Anda lebih mungkin menebak kata sandi mereka. 

1009
00:45:05,570 --> 00:45:07,190
 Jadi mereka mengatakan quasi-ya untuk itu. 

1010
00:45:07,190 --> 00:45:10,510
 Maka, perhatikan bahwa perlawanan adalah peniruan yang ditargetkan. 

1011
00:45:10,510 --> 00:45:12,260
 Di sinilah sebagian besar cadangan keamanan 

1012
00:45:12,260 --> 00:45:14,135
 pertanyaan gagal total. 

1013
00:45:14,135 --> 00:45:16,010
 Karena jika seseorang mengetahui sesuatu tentang Anda, 

1014
00:45:16,010 --> 00:45:19,595
 cukup mudah mereka dapat menebak pertanyaan keamanan Anda 

1015
00:45:19,595 --> 00:45:22,860
 dalam banyak kasus. 

1016
00:45:22,860 --> 00:45:27,450
 Jadi kita memiliki dua kategori yang melibatkan menebak. 

1017
00:45:27,450 --> 00:45:30,990
 Jadi yang pertama tangguh untuk menebak. 

1018
00:45:30,990 --> 00:45:34,930


1019
00:45:34,930 --> 00:45:42,080
 Dan apa artinya ini jika penyerang tidak bisa 

1020
00:45:42,080 --> 00:45:47,690
 masalah menebak pada tingkat baris, karena misalnya, 

1021
00:45:47,690 --> 00:45:51,880
 server menggunakan mekanisme anti-pemalu. 

1022
00:45:51,880 --> 00:45:56,720
 Apakah skema aman terhadap penyerang? 

1023
00:45:56,720 --> 00:46:01,060
 Dan di sini, mereka mengatakan tidak. 

1024
00:46:01,060 --> 00:46:02,670
 Dan alasan mengapa mereka mengatakan tidak, 

1025
00:46:02,670 --> 00:46:05,480
 karena dalam prakteknya kata sandi tidak hanya 

1026
00:46:05,480 --> 00:46:09,800
 memiliki semacam entropi warisan rendah karena mereka tidak begitu panjang, 

1027
00:46:09,800 --> 00:46:12,570
 tetapi juga mereka memiliki distribusi miring. 

1028
00:46:12,570 --> 00:46:15,860
 Dan apa artinya adalah bahwa bahkan jika penyerangnya 

1029
00:46:15,860 --> 00:46:18,260
 mencekik dalam beberapa cara, biasanya penyerang masih bisa 

1030
00:46:18,260 --> 00:46:20,040
 membuat kemajuan dan retakan ke depan yang baik 

1031
00:46:20,040 --> 00:46:22,140
 banyak kata sandi orang. 

1032
00:46:22,140 --> 00:46:26,010
 Jadi mereka mendefinisikan properti menebak lain 

1033
00:46:26,010 --> 00:46:29,960
 yang tahan terhadap tebakan yang tidak digoda. 

1034
00:46:29,960 --> 00:46:34,030


1035
00:46:34,030 --> 00:46:38,890
 Dan ini pada dasarnya mengatakan, anggaplah 

1036
00:46:38,890 --> 00:46:44,110
 bahwa penyerang dapat mengeluarkan pemalsuan otentikasi ini 

1037
00:46:44,110 --> 00:46:47,280
 meminta secepat yang dia inginkan. 

1038
00:46:47,280 --> 00:46:49,000
 Jadi dengan kata lain, penyerang hanya 

1039
00:46:49,000 --> 00:46:51,220
 dibatasi oleh kecepatan perangkat kerasnya. 

1040
00:46:51,220 --> 00:46:54,440
 Begitu juga skema otentikasi yang tangguh terhadap jenis itu 

1041
00:46:54,440 --> 00:46:55,290
 serangan? 

1042
00:46:55,290 --> 00:46:59,560
 Dan di sini mungkin jawaban ini juga tidak, karena alasan yang sama 

1043
00:46:59,560 --> 00:47:01,470
 bahwa jawabannya tidak ada di sini. 

1044
00:47:01,470 --> 00:47:04,040
 Jadi pada dasarnya kata sandi memiliki ruang entropi yang sangat kecil 

1045
00:47:04,040 --> 00:47:07,040
 dan mereka datang distribusi miring. 

1046
00:47:07,040 --> 00:47:10,690
 Jadi itu semua sangat mudah. 

1047
00:47:10,690 --> 00:47:13,603
 Salah satu yang menarik adalah resiliensi 

1048
00:47:13,603 --> 00:47:16,390
 untuk pengamatan internal. 

1049
00:47:16,390 --> 00:47:21,890


1050
00:47:21,890 --> 00:47:23,720
 Jadi ini berarti penyerang tidak bisa 

1051
00:47:23,720 --> 00:47:27,370
 menyamar sebagai pengguna seperti mencegat yang dimasukkan pengguna. 

1052
00:47:27,370 --> 00:47:31,770
 Misalnya, dengan menginstal logger keystroke 

1053
00:47:31,770 --> 00:47:34,675
 pada keyboard yang digunakan pengguna, 

1054
00:47:34,675 --> 00:47:37,640
 dan menggunakan logger itu untuk mencuri tombol yang ditekan. 

1055
00:47:37,640 --> 00:47:39,790
 Ini juga berarti, misalnya, ada 

1056
00:47:39,790 --> 00:47:41,450
 tidak ada cara untuk penyerang jaringan siapa 

1057
00:47:41,450 --> 00:47:44,270
 mengamati hal-hal yang dikirimkan klien melalui kawat 

1058
00:47:44,270 --> 00:47:48,670
 untuk menggunakan pengetahuan tentang lalu lintas jaringan 

1059
00:47:48,670 --> 00:47:50,710
 untuk nantinya meniru identitas pengguna. 

1060
00:47:50,710 --> 00:47:56,610
 Dan di sini mereka mengatakan kata sandi tidak memiliki skema ini. 

1061
00:47:56,610 --> 00:47:59,640
 Dan mereka pada dasarnya mengatakan itu karena kata sandi 

1062
00:47:59,640 --> 00:48:02,060
 adalah token statis. 

1063
00:48:02,060 --> 00:48:03,160
 Mereka tidak berubah. 

1064
00:48:03,160 --> 00:48:06,500
 Dan biasanya token statis rentan terhadap replay. 

1065
00:48:06,500 --> 00:48:08,920
 Jadi jika entah bagaimana, misalnya, seorang penyerang 

1066
00:48:08,920 --> 00:48:11,680
 menginstal logger keystroke dan mendapatkan kata sandi Anda, 

1067
00:48:11,680 --> 00:48:14,280
 maka pada dasarnya penyerang dapat menggunakan kata sandi itu 

1068
00:48:14,280 --> 00:48:17,020
 sampai kadaluarsa atau dicabut atau sesuatu itu. 

1069
00:48:17,020 --> 00:48:18,470
 Itu Anda hanya memutar ulang lagi itu akan 

1070
00:48:18,470 --> 00:48:20,960
 masuk ke server autentikasi di sisi lain. 

1071
00:48:20,960 --> 00:48:22,751
 Jadi di sini, kata sandi benar-benar gagal dalam pengujian itu. 

1072
00:48:22,751 --> 00:48:25,564


1073
00:48:25,564 --> 00:48:27,522
 Hal lain yang kami bicarakan sedikit 

1074
00:48:27,522 --> 00:48:29,340
 dalam phishing kelas ini. 

1075
00:48:29,340 --> 00:48:36,538
 Jadi ketahanan terhadap phishing adalah metrik keamanan lain. 

1076
00:48:36,538 --> 00:48:40,190
 Dan ide dasarnya di sini adalah bahwa, jika penyerang dapat mensimulasikan 

1077
00:48:40,190 --> 00:48:43,320
 service-- yang valid misalnya, dengan menyerang DNS 

1078
00:48:43,320 --> 00:48:45,870
 infrastruktur atau sesuatu seperti itu-- 

1079
00:48:45,870 --> 00:48:49,200
 maka penyerang tidak dapat mengumpulkan kredensial dari pengguna, 

1080
00:48:49,200 --> 00:48:53,300
 kemudian penyerang dapat menggunakannya untuk berpura-pura menjadi pengguna nantinya 

1081
00:48:53,300 --> 00:48:53,925
 di. 

1082
00:48:53,925 --> 00:48:58,300
 Dan jadi ini situs yang seharusnya dihukum 

1083
00:48:58,300 --> 00:49:03,580
 jangan memberi tahu pengguna dengan tegas, hei, saya 

1084
00:49:03,580 --> 00:49:06,850
 layanan khusus ini, sehingga Anda dapat merasa percaya diri untuk memberi saya 

1085
00:49:06,850 --> 00:49:07,950
 kredensial Anda. 

1086
00:49:07,950 --> 00:49:11,160
 Dan jika kata sandi di sini gagal hanya karena situs phishing 

1087
00:49:11,160 --> 00:49:13,217
 sangat, sangat populer. 

1088
00:49:13,217 --> 00:49:15,175
 Jadi kata sandi tidak benar-benar menyediakan secara intrinsik 

1089
00:49:15,175 --> 00:49:16,341
 perlindungan apa pun terhadap itu. 

1090
00:49:16,341 --> 00:49:20,620


1091
00:49:20,620 --> 00:49:23,170
 Sekarang dua berikutnya khususnya 

1092
00:49:23,170 --> 00:49:28,040
 menarik dalam konteks sistem terdistribusi skala besar. 

1093
00:49:28,040 --> 00:49:30,390
 Jadi tidak ada pihak ketiga yang tepercaya. 

1094
00:49:30,390 --> 00:49:33,760


1095
00:49:33,760 --> 00:49:35,270
 Ini pada dasarnya berarti yang lain 

1096
00:49:35,270 --> 00:49:38,410
 daripada klien dan server, tidak ada orang lain 

1097
00:49:38,410 --> 00:49:44,580
 dalam sistem yang terlibat dalam protokol otentikasi. 

1098
00:49:44,580 --> 00:49:47,719
 Jadi, itu berarti tidak ada pihak ketiga yang, 

1099
00:49:47,719 --> 00:49:49,260
 jika pihak ketiga itu dikompromikan, 

1100
00:49:49,260 --> 00:49:51,310
 seluruh integritas skema sekuritas 

1101
00:49:51,310 --> 00:49:52,040
 mungkin berantakan. 

1102
00:49:52,040 --> 00:49:54,343
 Jadi, ini sebenarnya adalah properti yang menarik 

1103
00:49:54,343 --> 00:49:56,780
 untuk melihat karena banyak masalah otentikasi 

1104
00:49:56,780 --> 00:49:59,900
 akan hilang jika kita hanya bisa menyimpan semua otentikasi kami 

1105
00:49:59,900 --> 00:50:01,863
 informasi di satu tempat. 

1106
00:50:01,863 --> 00:50:04,050
 Kami hanya menyimpannya di satu tempat, sangat sederhana, 

1107
00:50:04,050 --> 00:50:05,690
 kita tidak perlu mengingat banyak hal pada klien, 

1108
00:50:05,690 --> 00:50:07,850
 kami hanya mengatakan, layanan apa pun yang ingin Anda gunakan, 

1109
00:50:07,850 --> 00:50:10,110
 Anda selalu pergi ke pihak ketiga yang satu ini, 

1110
00:50:10,110 --> 00:50:11,980
 dan pihak ketiga itu akan selalu ada 

1111
00:50:11,980 --> 00:50:14,980
 mampu mengotentikasi Anda, dan kemudian 

1112
00:50:14,980 --> 00:50:17,090
 memungkinkan Anda untuk pergi. 

1113
00:50:17,090 --> 00:50:20,640
 Sekarang tentu saja pihak ketiga bermasalah dengan perspektif 

1114
00:50:20,640 --> 00:50:22,777
 kekokohan benar karena jika Anda 

1115
00:50:22,777 --> 00:50:24,360
 memiliki salah satu dari pihak ketiga global ini 

1116
00:50:24,360 --> 00:50:27,750
 bahwa semua orang percaya, jika pihak ketiga itu ditumbangkan kemudian 

1117
00:50:27,750 --> 00:50:29,660
 mungkin integritas dari semua situs 

1118
00:50:29,660 --> 00:50:32,400
 yang menggunakan pihak ketiga untuk mengotentikasi semua situs tersebut 

1119
00:50:32,400 --> 00:50:35,000
 berpotensi dalam bahaya. 

1120
00:50:35,000 --> 00:50:39,760
 Jadi mereka mengatakan bahwa kata sandi tidak memiliki pihak ketiga tepercaya 

1121
00:50:39,760 --> 00:50:43,142
 karena setiap pengguna dipaksa untuk memiliki kata sandi terpisah 

1122
00:50:43,142 --> 00:50:44,054
 untuk setiap situs. 

1123
00:50:44,054 --> 00:50:46,790


1124
00:50:46,790 --> 00:50:48,814
 Properti terkait adalah 

1125
00:50:48,814 --> 00:00:00,000


