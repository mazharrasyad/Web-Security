1
00:00:00,000 --> 00:00:00,070


2
00:00:00,070 --> 00:00:02,430
 Konten berikut disediakan di bawah Materi Iklan 

3
00:00:02,430 --> 00:00:03,820
 Lisensi Commons. 

4
00:00:03,820 --> 00:00:06,060
 Dukungan Anda akan membantu MIT OpenCourseWare 

5
00:00:06,060 --> 00:00:10,150
 terus menawarkan sumber daya pendidikan berkualitas tinggi secara gratis. 

6
00:00:10,150 --> 00:00:12,700
 Untuk membuat sumbangan atau melihat materi tambahan 

7
00:00:12,700 --> 00:00:16,600
 dari ratusan kursus MIT, kunjungi MIT OpenCourseWare 

8
00:00:16,600 --> 00:00:17,255
 di ocw.mit.edu. 

9
00:00:17,255 --> 00:00:27,415


10
00:00:27,415 --> 00:00:28,290
 PROFESOR: Baiklah. 

11
00:00:28,290 --> 00:00:33,220
 Jadi mari kita mulai dengan kuliah kedua 

12
00:00:33,220 --> 00:00:36,790
 dalam seri kami yang menakjubkan tentang keamanan web. 

13
00:00:36,790 --> 00:00:38,740
 Jadi untuk memulai kelas hari ini, saya sebenarnya 

14
00:00:38,740 --> 00:00:41,220
 ingin membahas beberapa demo cepat. 

15
00:00:41,220 --> 00:00:43,937
 Seperti yang Anda tahu, demo hampir tidak pernah berhasil. 

16
00:00:43,937 --> 00:00:46,270
 Jadi semoga, Anda tidak akan hanya melihat terminal kosong saya 

17
00:00:46,270 --> 00:00:46,770
 di sini. 

18
00:00:46,770 --> 00:00:48,360
 Tapi ide dasarnya adalah saya yang pertama 

19
00:00:48,360 --> 00:00:51,815
 ingin menunjukkan contoh bug Shellshock 

20
00:00:51,815 --> 00:00:52,940
 yang mungkin pernah Anda dengar. 

21
00:00:52,940 --> 00:00:55,940
 Ini merupakan topik yang cukup populer 

22
00:00:55,940 --> 00:00:57,320
 dalam literatur keamanan. 

23
00:00:57,320 --> 00:00:59,200
 Dan orang-orang mengatakan itu Heartbleed 

24
00:00:59,200 --> 00:01:01,265
 seperti 10 dari 10 keamanan [? bug. ?] 

25
00:01:01,265 --> 00:01:03,640
 Tetapi orang-orang berkata, seperti, kita seharusnya tidak memesan 

26
00:01:03,640 --> 00:01:04,971
 10 dari 10 untuk Heartbleed. 

27
00:01:04,971 --> 00:01:06,055
 Ini berpotensi lebih buruk. 

28
00:01:06,055 --> 00:01:06,620
 Baiklah? 

29
00:01:06,620 --> 00:01:08,280
 Jadi saya pikir ini akan menjadi ide bagus untuk kalian 

30
00:01:08,280 --> 00:01:10,790
 untuk melihat beberapa riwayat hidup, dan agar Anda memberi tahu orang tua Anda 

31
00:01:10,790 --> 00:01:13,165
 itu, Anda tahu, mereka mendapatkan nilai kuliah mereka 

32
00:01:13,165 --> 00:01:13,710
 dari MIT. 

33
00:01:13,710 --> 00:01:18,350
 Jadi apa ide dasar di balik bug Shellshock? 

34
00:01:18,350 --> 00:01:19,890
 Yah, itu contoh yang sangat bagus 

35
00:01:19,890 --> 00:01:22,760
 mengapa sangat sulit membangun web aman 

36
00:01:22,760 --> 00:01:25,520
 aplikasi yang menjangkau berbagai teknologi 

37
00:01:25,520 --> 00:01:28,060
 tumpukan, beberapa bahasa, beberapa OS, seterusnya dan sebagainya 

38
00:01:28,060 --> 00:01:28,740
 sebagainya. 

39
00:01:28,740 --> 00:01:31,100
 Jadi ide dasarnya adalah Shellshock 

40
00:01:31,100 --> 00:01:33,620
 akan mengambil keuntungan dari fakta itu 

41
00:01:33,620 --> 00:01:37,610
 bahwa penyerang dapat membuat HTTP khusus 

42
00:01:37,610 --> 00:01:40,860
 meminta ke server dan mengontrol header itu 

43
00:01:40,860 --> 00:01:42,230
 ada dalam permintaan itu. 

44
00:01:42,230 --> 00:01:45,502
 Jadi saya menulis sebuah contoh di sini. 

45
00:01:45,502 --> 00:01:46,210
 Sangat sederhana. 

46
00:01:46,210 --> 00:01:49,940
 Jadi katakanlah bahwa penyerang ingin mengirim beberapa permintaan GET. 

47
00:01:49,940 --> 00:01:53,890
 Mereka akan mengirim permintaan itu ke beberapa antarmuka CGI. 

48
00:01:53,890 --> 00:01:55,890
 Dan kemudian akan ada tanda tanya. 

49
00:01:55,890 --> 00:01:57,389
 Orang itu ingin mencari kucing, 

50
00:01:57,389 --> 00:01:59,165
 karena itulah yang dicari orang. 

51
00:01:59,165 --> 00:02:01,320
 Lalu ada beberapa header standar di sini, 

52
00:02:01,320 --> 00:02:02,730
 seperti tuan rumah, misalnya. 

53
00:02:02,730 --> 00:02:06,610
 Jadi ini mengatakan bahwa URL ini di sini 

54
00:02:06,610 --> 00:02:08,750
 tergantung dari example.com. 

55
00:02:08,750 --> 00:02:12,360
 Sekarang, perhatikan bahwa penyerang juga dapat menentukan header khusus. 

56
00:02:12,360 --> 00:02:12,860
 Kanan? 

57
00:02:12,860 --> 00:02:14,485
 Jadi penyerang bisa mengatakan, saya mau 

58
00:02:14,485 --> 00:02:16,300
 untuk menemukan beberapa header khusus aplikasi 

59
00:02:16,300 --> 00:02:19,122
 disebut Custom-header, dan saya ingin menentukan beberapa nilai di sana, 

60
00:02:19,122 --> 00:02:21,580
 karena Anda dapat membayangkan bahwa aplikasi web mungkin menentukan 

61
00:02:21,580 --> 00:02:22,996
 fungsi-fungsi tertentu yang tidak bisa 

62
00:02:22,996 --> 00:02:25,811
 diungkapkan menggunakan header HTTP sederhana yang telah ditentukan sebelumnya. 

63
00:02:25,811 --> 00:02:26,310
 BAIK. 

64
00:02:26,310 --> 00:02:28,280
 Sehingga semua tampaknya cukup tidak berbahaya. 

65
00:02:28,280 --> 00:02:32,000
 Tapi yang akhirnya terjadi adalah di banyak web CGI ini 

66
00:02:32,000 --> 00:02:35,640
 server, mereka benar-benar akan mengambil nilai header khusus ini 

67
00:02:35,640 --> 00:02:39,430
 dan gunakan mereka untuk mengatur variabel lingkungan untuk Bash. 

68
00:02:39,430 --> 00:02:40,070
 BAIK? 

69
00:02:40,070 --> 00:02:43,480
 Jadi mereka akan menggunakan header ini untuk membuat nama variabel Bash 

70
00:02:43,480 --> 00:02:44,320
 tajuk khusus. 

71
00:02:44,320 --> 00:02:45,970
 Maka mereka akan mengambil nilai ini di sini 

72
00:02:45,970 --> 00:02:48,440
 bahwa penyerang telah disediakan, dan digunakan 

73
00:02:48,440 --> 00:02:51,360
 itu menjadi nilai dari variabel Bash itu, kan? 

74
00:02:51,360 --> 00:02:53,290
 Dan kemudian setelah variabel tersebut disiapkan, 

75
00:02:53,290 --> 00:02:57,110
 maka server CGI akan melakukan pemrosesan 

76
00:02:57,110 --> 00:02:58,940
 dalam konteks lingkungan itu. 

77
00:02:58,940 --> 00:02:59,440
 Kanan? 

78
00:02:59,440 --> 00:03:00,550
 Jadi ini jelas buruk. 

79
00:03:00,550 --> 00:03:02,440
 Anda mungkin bisa melihat di mana ini terjadi. 

80
00:03:02,440 --> 00:03:05,020
 Server web seharusnya tidak mengambil nilai sewenang-wenang ini 

81
00:03:05,020 --> 00:03:07,000
 dari massa tidak dicuci sewenang-wenang. 

82
00:03:07,000 --> 00:03:09,780
 Jadi dalam contoh khusus bug Shellshock, 

83
00:03:09,780 --> 00:03:13,470
 apa yang akhirnya terjadi adalah jika Anda mengatur variabel Bash Anda 

84
00:03:13,470 --> 00:03:17,280
 untuk ini, hal yang keliru seperti ini, yang tampak jahat 

85
00:03:17,280 --> 00:03:19,070
 akan ada kegilaan yang terjadi. 

86
00:03:19,070 --> 00:03:21,730
 Pada dasarnya, ini adalah format yang salah [? Pilih?] Fungsi 

87
00:03:21,730 --> 00:03:24,597
 definisi dalam bahasa scripting Bash. 

88
00:03:24,597 --> 00:03:26,680
 Anda tidak perlu khawatir tentang spesifikasinya. 

89
00:03:26,680 --> 00:03:30,020
 Tapi apa yang dimaksudkan untuk terjadi, jika Bash benar, 

90
00:03:30,020 --> 00:03:32,650
 apakah bagian ini di sini tidak akan dieksekusi. 

91
00:03:32,650 --> 00:03:35,335
 Jadi pada dasarnya, Anda baru saja mendefinisikan beberapa fungsi bodoh di sini 

92
00:03:35,335 --> 00:03:36,376
 itu tidak melakukan apa-apa. 

93
00:03:36,376 --> 00:03:38,330
 Dan di [INAUDIBLE] berakhir di sini. 

94
00:03:38,330 --> 00:03:40,370
 Namun urutan karakter ini sebenarnya 

95
00:03:40,370 --> 00:03:42,006
 membingungkan parser Bash. 

96
00:03:42,006 --> 00:03:44,380
 Dan akhirnya apa yang terjadi adalah itu semacam tersandung 

97
00:03:44,380 --> 00:03:46,180
 melalui omong kosong ini di sini. 

98
00:03:46,180 --> 00:03:48,430
 Dan kemudian dikatakan, oh, saya mungkin juga terus melakukan parsing 

99
00:03:48,430 --> 00:03:50,680
 dan jalankan beberapa perintah di sini, kan? 

100
00:03:50,680 --> 00:03:53,262
 Dan dalam hal ini, ini hanya melakukan perintah bin / id, 

101
00:03:53,262 --> 00:03:55,220
 yang menampilkan beberapa informasi tentang pengguna. 

102
00:03:55,220 --> 00:03:57,080
 Tapi ini bisa menjadi kode apa pun di sini. 

103
00:03:57,080 --> 00:03:59,267
 Jadi itulah inti dari kerentanan. 

104
00:03:59,267 --> 00:04:01,100
 Jadi saya akan memberikan contoh yang sangat sederhana di sini, 

105
00:04:01,100 --> 00:04:02,650
 jadi Anda lihat di layar. 

106
00:04:02,650 --> 00:04:07,400
 Jadi pada dasarnya, kami punya server Python yang sangat sederhana di sini, 

107
00:04:07,400 --> 00:04:09,400
 hanya yang paling bodoh yang bisa Anda bayangkan. 

108
00:04:09,400 --> 00:04:11,380
 Ini punya metode GET. 

109
00:04:11,380 --> 00:04:13,200
 Demikian juga dengan metode do GET, itu 

110
00:04:13,200 --> 00:04:18,709
 pada dasarnya akan melakukan iterasi melalui semua tajuk HTTP 

111
00:04:18,709 --> 00:04:19,450
 dalam permintaan itu. 

112
00:04:19,450 --> 00:04:19,950
 BAIK? 

113
00:04:19,950 --> 00:04:23,270
 Jadi itulah yang keempat nilai kunci ini untuk header 

114
00:04:23,270 --> 00:04:25,787
 dan nilai dalam permintaan ini. 

115
00:04:25,787 --> 00:04:28,120
 Dan kemudian itu hanya akan mencetak header yang ditemukannya. 

116
00:04:28,120 --> 00:04:29,900
 Dan kemudian dalam contoh sederhana ini, 

117
00:04:29,900 --> 00:04:31,691
 itu akan melakukan sesuatu yang sangat bodoh, yang mana 

118
00:04:31,691 --> 00:04:34,960
 jalankan panggilan sistem dan langsung atur 

119
00:04:34,960 --> 00:04:39,640
 nilai lingkungan ke nilai yang ditentukan di header. 

120
00:04:39,640 --> 00:04:41,390
 Jadi itulah akar seluruh kerentanan. 

121
00:04:41,390 --> 00:04:45,465
 Jadi jika saya datang ke sini dan saya memulai server web korban saya-- 

122
00:04:45,465 --> 00:04:48,190
 Oke, jadi sekarang siap menerima permintaan. 

123
00:04:48,190 --> 00:04:52,140
 Dan kemudian saya dapat menulis klien Shellshock khusus saya seperti itu. 

124
00:04:52,140 --> 00:04:54,530
 Dan ini sebenarnya sangat sederhana. 

125
00:04:54,530 --> 00:04:58,900
 Jadi di sini, saya hanya mendefinisikan salah satu string yang salah ini. 

126
00:04:58,900 --> 00:05:01,856
 Jadi saya memiliki karakter menyebalkan seperti ini di awal. 

127
00:05:01,856 --> 00:05:04,230
 Dan kemudian saya tahu bahwa semuanya setelah ini pada dasarnya 

128
00:05:04,230 --> 00:05:07,250
 akan dieksekusi atas nama saya di sisi server. 

129
00:05:07,250 --> 00:05:08,834
 Jadi dalam hal ini, saya memilih sesuatu itu 

130
00:05:08,834 --> 00:05:10,083
 sebenarnya cukup tidak berbahaya. 

131
00:05:10,083 --> 00:05:11,720
 Itu hanya mengatakan, echo, saya memiliki mesin Anda. 

132
00:05:11,720 --> 00:05:13,670
 Tapi ini bisa menjadi apa pun di sini. 

133
00:05:13,670 --> 00:05:17,170
 Anda dapat memulai jenis shell Bash lain seperti yang saya lakukan di sini. 

134
00:05:17,170 --> 00:05:20,680
 Dan kemudian, gema perintah penyerang, di mana di dunia nyata, 

135
00:05:20,680 --> 00:05:22,890
 yang sebenarnya bisa menjadi sesuatu yang sangat berbahaya. 

136
00:05:22,890 --> 00:05:27,364
 Jadi saya mengatur header dan permintaan khusus saya. 

137
00:05:27,364 --> 00:05:29,655
 Dan kemudian saya hanya menggunakan Python untuk membuat koneksi HTTP 

138
00:05:29,655 --> 00:05:31,047
 dan kirimkan saja ke server. 

139
00:05:31,047 --> 00:05:32,130
 Jadi apa yang akhirnya terjadi? 

140
00:05:32,130 --> 00:05:37,190
 Jadi saya jalankan klien Shellshock saya di sini. 

141
00:05:37,190 --> 00:05:38,900
 Jadi itu mengatakan bahwa saya memiliki 404 di sini, 

142
00:05:38,900 --> 00:05:41,400
 karena tidak masalah file apa yang saya minta. 

143
00:05:41,400 --> 00:05:44,760
 Jadi saya hanya memasukkan beberapa indeks, sebuah HTML yang tidak ada. 

144
00:05:44,760 --> 00:05:48,070
 Tetapi jika kita melihat di sini, ini adalah output untuk server. 

145
00:05:48,070 --> 00:05:51,450
 Jadi apa yang Anda lihat adalah Anda memiliki output ini, 

146
00:05:51,450 --> 00:05:53,690
 Saya SENDIRI MESIN UR, dan PENYIANG CMD. 

147
00:05:53,690 --> 00:05:56,400
 Dan itu karena ketika server mendapat header itu, 

148
00:05:56,400 --> 00:05:58,120
 itu mengatur variabel Bash. 

149
00:05:58,120 --> 00:06:00,020
 Ini mengaturnya dengan hal aneh di sini. 

150
00:06:00,020 --> 00:06:02,310
 Dan sebagai hasilnya, perintah yang dikendalikan ATTACKER 

151
00:06:02,310 --> 00:06:03,800
 dapat lari. 

152
00:06:03,800 --> 00:06:06,422
 Jadi apakah itu semua masuk akal? 

153
00:06:06,422 --> 00:06:12,714
 AUDIENCE: Jadi apakah ini terjadi jika program dijalankan di bawah itu? 

154
00:06:12,714 --> 00:06:14,774
 Saya masih belum jelas, like-- 

155
00:06:14,774 --> 00:06:15,440
 PROFESOR: Ya. 

156
00:06:15,440 --> 00:06:17,840
 Jadi spesifik tentang bagaimana sebenarnya serangan itu bekerja 

157
00:06:17,840 --> 00:06:20,600
 tergantung apakah Anda menjalankan Apache, seperti apa sebenarnya 

158
00:06:20,600 --> 00:06:21,900
 server web Anda terlihat seperti. 

159
00:06:21,900 --> 00:06:23,900
 Jadi dalam contoh ini, itu sedikit dibuat-buat, 

160
00:06:23,900 --> 00:06:26,890
 karena saya benar-benar memanggil [TIDAK JELAS] secara eksplisit menelurkan 

161
00:06:26,890 --> 00:06:29,932
 off shell Bash yang lain, atur variabel lingkungan di sana, 

162
00:06:29,932 --> 00:06:31,140
 dan kemudian kami siap untuk pergi. 

163
00:06:31,140 --> 00:06:33,440
 Tetapi Anda bisa membayangkan bahwa jika Anda bertelur 

164
00:06:33,440 --> 00:06:35,827
 proses yang berbeda untuk setiap koneksi masuk, 

165
00:06:35,827 --> 00:06:38,160
 Anda bisa mengatur variabel lingkungan untuk itu secara langsung 

166
00:06:38,160 --> 00:06:40,660
 jika orang itu menggunakan-- tinggal di dalam 

167
00:06:40,660 --> 00:06:41,905
 lingkungan Bash. 

168
00:06:41,905 --> 00:06:44,244
 AUDIENCE: Jadi jika Anda kembali ke kode server web Anda, 

169
00:06:44,244 --> 00:06:47,600
 tampaknya Anda memiliki kerentanan yang jauh lebih buruk 

170
00:06:47,600 --> 00:06:50,386
 daripada Shellshock, karena Anda menelepon [? meskipun?] 

171
00:06:50,386 --> 00:06:50,886
 sebuah sistem. 

172
00:06:50,886 --> 00:06:55,117
 Dan saya bisa menjalankan perintah hanya dengan mengatur header custom 

173
00:06:55,117 --> 00:06:56,200
 untuk sesuatu [? bahwa saya ?]. 

174
00:06:56,200 --> 00:06:59,032
 Saya tidak perlu menggunakan bug Shellshock dalam contoh ini. 

175
00:06:59,032 --> 00:07:00,115
 PROFESOR: Itu benar. 

176
00:07:00,115 --> 00:07:00,230
 Ya. 

177
00:07:00,230 --> 00:07:02,480
 Jadi di server web khusus ini, yang merupakan sesuatu 

178
00:07:02,480 --> 00:07:04,150
 Saya menulis hanya untuk semacam nilai mengajar, 

179
00:07:04,150 --> 00:07:06,233
 ya, hal ini kamu tidak boleh percaya untuk apa pun. 

180
00:07:06,233 --> 00:07:07,790
 AUDIENCE: Tetapi Shellshock mengeksploitasi 

181
00:07:07,790 --> 00:07:10,677
 sedang menugaskan sesuatu yang berbahaya ke suatu lingkungan 

182
00:07:10,677 --> 00:07:12,760
 variabel menggunakan [? atur N?] atau sesuatu seperti itu, 

183
00:07:12,760 --> 00:07:13,420
 yang merupakan sesuatu [tidak terdengar]. 

184
00:07:13,420 --> 00:07:13,724
 PROFESOR: Oh, ya, ya. 

185
00:07:13,724 --> 00:07:14,840
 Jadi itu kembali ke pertanyaannya. 

186
00:07:14,840 --> 00:07:15,410
 Betul. 

187
00:07:15,410 --> 00:07:17,954
 Jadi jika Anda punya, misalnya, katakanlah, Apache di sini, 

188
00:07:17,954 --> 00:07:19,995
 Apache agak sedikit rumit untuk mengonfigurasi 

189
00:07:19,995 --> 00:07:21,350
 dengan cara yang jelas apa yang terjadi. 

190
00:07:21,350 --> 00:07:22,391
 Tapi kamu benar sekali. 

191
00:07:22,391 --> 00:07:24,580
 Jadi Apache akan memanggil Set nth, yang mana 

192
00:07:24,580 --> 00:07:26,970
 adalah cara lain yang Anda dapat langsung mengatur lingkungan 

193
00:07:26,970 --> 00:07:28,845
 nilai untuk layanan tertentu apa pun [? Saya?] 

194
00:07:28,845 --> 00:07:29,745
 proses yang Anda miliki. 

195
00:07:29,745 --> 00:07:31,370
 Tetapi Anda juga sebenarnya memiliki beberapa server 

196
00:07:31,370 --> 00:07:33,690
 seperti ini yang dapat Anda bayangkan bahwa mereka sebenarnya 

197
00:07:33,690 --> 00:07:36,370
 melakukan proses terpisah dan melakukan sesuatu yang sangat bermoral 

198
00:07:36,370 --> 00:07:37,220
 setara dengan ini. 

199
00:07:37,220 --> 00:07:38,803
 Tapi kamu benar, itulah jalannya 

200
00:07:38,803 --> 00:07:41,070
 bahwa sebuah patch secara khusus dilanggar 

201
00:07:41,070 --> 00:07:44,580
 adalah cara yang Anda gambarkan. 

202
00:07:44,580 --> 00:07:45,790
 Jadi itu semua masuk akal? 

203
00:07:45,790 --> 00:07:48,730


204
00:07:48,730 --> 00:07:49,240
 BAIK. 

205
00:07:49,240 --> 00:07:52,725
 Jadi itu semacam contoh cepat dan kotor 

206
00:07:52,725 --> 00:07:55,310
 dari barang-barang Shellshock. 

207
00:07:55,310 --> 00:07:57,210
 Dan contoh lain yang ingin saya berikan 

208
00:07:57,210 --> 00:08:01,460
 Anda adalah contoh skrip lintas situs. 

209
00:08:01,460 --> 00:08:03,031
 Jadi bug Shellshock itu semacam 

210
00:08:03,031 --> 00:08:06,885
 contoh bagaimana sanitasi konten sangat penting. 

211
00:08:06,885 --> 00:08:09,010
 Jadi seperti yang baru saja kita bahas, Anda tidak seharusnya begitu saja 

212
00:08:09,010 --> 00:08:10,700
 mengambil masukan dari orang yang sewenang-wenang 

213
00:08:10,700 --> 00:08:14,000
 dan mereka menggunakannya secara langsung dalam berbagai jenis perintah. 

214
00:08:14,000 --> 00:08:16,490
 Jadi serangan skrip lintas situs adalah contoh lain 

215
00:08:16,490 --> 00:08:18,550
 bagaimana sesuatu bisa salah. 

216
00:08:18,550 --> 00:08:21,670
 Jadi dalam contoh ini, saya memiliki jenis lain 

217
00:08:21,670 --> 00:08:24,950
 server CGI bodoh di sini. 

218
00:08:24,950 --> 00:08:28,000
 Dan jika kita melihat server CGI ini, 

219
00:08:28,000 --> 00:08:29,450
 jadi apa yang akan dilakukannya? 

220
00:08:29,450 --> 00:08:31,580
 Jadi sekali lagi, saya telah menulis sesuatu yang sangat sederhana 

221
00:08:31,580 --> 00:08:32,532
 dengan Python. 

222
00:08:32,532 --> 00:08:33,990
 Ini akan menjadi pegangan itu 

223
00:08:33,990 --> 00:08:36,792
 dijalankan saat ada permintaan dari klien. 

224
00:08:36,792 --> 00:08:38,250
 Dan pada dasarnya, apa yang terjadi adalah 

225
00:08:38,250 --> 00:08:42,701
 bahwa di sini, saya akan mencetak beberapa header untuk tanggapannya. 

226
00:08:42,701 --> 00:08:44,159
 Jadi saya akan mengatakan, tanggapan saya adalah 

227
00:08:44,159 --> 00:08:46,250
 akan menjadi tipe teks HTML. 

228
00:08:46,250 --> 00:08:48,934
 Baris ini di sini akan kami jelaskan dalam hitungan detik. 

229
00:08:48,934 --> 00:08:51,350
 Jadi ternyata, browser memiliki beberapa mekanisme keamanan 

230
00:08:51,350 --> 00:08:54,250
 untuk mencoba mencegah serangan yang akan aku tunjukkan padamu. 

231
00:08:54,250 --> 00:08:56,560
 Jadi saya menaruh contoh ini - saya taruh baris header di sana 

232
00:08:56,560 --> 00:08:59,060
 untuk mematikan beberapa perlindungan. 

233
00:08:59,060 --> 00:09:01,640
 Dan kemudian apa yang dilakukan skrip CGI 

234
00:09:01,640 --> 00:09:06,625
 apakah itu mendapat akses ke semua bidang dan permintaan CGI. 

235
00:09:06,625 --> 00:09:09,180
 Jadi bayangkan semuanya dalam string kueri 

236
00:09:09,180 --> 00:09:13,140
 setelah tanda tanya ini-- seperti header dan nilai ini, 

237
00:09:13,140 --> 00:09:15,740
 itulah yang masuk ke dalam contoh bentuk di sana. 

238
00:09:15,740 --> 00:09:18,510
 Jadi apa yang dilakukan oleh skrip CGI adalah sesuatu yang sangat sederhana. 

239
00:09:18,510 --> 00:09:22,960
 Itu langsung mencetak nilai sesuatu itu 

240
00:09:22,960 --> 00:09:25,280
 disahkan dari penyerang. 

241
00:09:25,280 --> 00:09:26,150
 Ide dasar yang sama. 

242
00:09:26,150 --> 00:09:28,600
 Ini ide yang buruk, karena pernyataan Cetak ini, 

243
00:09:28,600 --> 00:09:32,200
 itu mencetak langsung ke HTML itu sendiri. 

244
00:09:32,200 --> 00:09:35,840
 Jadi apa yang bisa terjadi adalah sebagai berikut. 

245
00:09:35,840 --> 00:09:40,740
 Jadi katakanlah saya memiliki banyak pertanyaan yang ingin saya jalankan. 

246
00:09:40,740 --> 00:09:44,760
 Jadi dalam kueri pertama ini di sini, saya hanya menyetel nilai pesan 

247
00:09:44,760 --> 00:09:46,350
 untuk Hello. 

248
00:09:46,350 --> 00:09:50,567
 Jadi jika saya pergi ke sini dan saya menjalankan halaman itu, 

249
00:09:50,567 --> 00:09:52,900
 baik, maka Anda akan melihat bahwa ini Hello muncul, 

250
00:09:52,900 --> 00:09:54,983
 karena sekali lagi, server mengambil langsung 

251
00:09:54,983 --> 00:09:55,740
 apa yang saya lulus untuk itu. 

252
00:09:55,740 --> 00:09:57,140
 Dan itu mencetak Hello. 

253
00:09:57,140 --> 00:09:59,150
 Jadi tidak ada kejutan besar di sana. 

254
00:09:59,150 --> 00:10:01,890
 Sekarang katakanlah saya menyadari bahwa saya dapat benar-benar 

255
00:10:01,890 --> 00:10:03,950
 lulus HTML sewenang-wenang di sana. 

256
00:10:03,950 --> 00:10:09,930
 Jadi sekarang saya benar-benar mencoba untuk menanamkan beberapa gaya di sana. 

257
00:10:09,930 --> 00:10:12,550
 Jadi saya katakan, h1 dan kemudian Hello lagi / h1. 

258
00:10:12,550 --> 00:10:13,550
 Jadi itu berhasil, bukan? 

259
00:10:13,550 --> 00:10:16,310
 Jadi sekali lagi, kami mencetak langsung ke [? pake. ?] 

260
00:10:16,310 --> 00:10:18,410
 Jadi sekarang Anda mungkin berpikir, oke, kita dalam bisnis sekarang. 

261
00:10:18,410 --> 00:10:18,951
 Ini keren. 

262
00:10:18,951 --> 00:10:23,530
 Jadi mari kita langsung menanamkan kode JavaScript di sana. 

263
00:10:23,530 --> 00:10:24,030
 Baiklah. 

264
00:10:24,030 --> 00:10:25,761
 Jadi saya melakukan ini. 

265
00:10:25,761 --> 00:10:28,010
 Dan di sini, saya sebenarnya hanya memasukkan-- untuk pesan itu, 

266
00:10:28,010 --> 00:10:29,050
 Saya menaruh skrip. 

267
00:10:29,050 --> 00:10:34,067
 Dan kemudian saya ingin hanya mengingatkan XSS dan kemudian skrip. 

268
00:10:34,067 --> 00:10:35,150
 Jadi sekarang itu menarik. 

269
00:10:35,150 --> 00:10:37,220
 Jadi sepertinya ada sesuatu yang tidak berhasil. 

270
00:10:37,220 --> 00:10:38,320
 Jadi saya tidak melihat output apa pun. 

271
00:10:38,320 --> 00:10:39,569
 Saya juga tidak melihat peringatan itu. 

272
00:10:39,569 --> 00:10:43,840
 Dan jika saya benar-benar melihat output untuk server web-- 

273
00:10:43,840 --> 00:10:46,700
 dan apa yang saya lihat adalah di sini, web 

274
00:10:46,700 --> 00:10:49,950
 Server itu sendiri sebenarnya tidak mendapatkan tag skrip trailing. 

275
00:10:49,950 --> 00:10:52,190
 Jadi sepertinya browser itu sendiri entah bagaimana 

276
00:10:52,190 --> 00:10:54,470
 mendeteksi sesuatu yang jahat meskipun saya mencoba 

277
00:10:54,470 --> 00:10:58,244
 untuk menonaktifkan filter XSS. 

278
00:10:58,244 --> 00:10:59,160
 Jadi itu menarik. 

279
00:10:59,160 --> 00:11:02,805
 Kita akan sampai pada mekanisme pertahanan ini sedikit 

280
00:11:02,805 --> 00:11:03,430
 di kuliah. 

281
00:11:03,430 --> 00:11:05,429
 Tetapi cukup untuk mengatakan, sepertinya browser 

282
00:11:05,429 --> 00:11:07,822
 sedang mencoba untuk menolak serangan skrip lintas situs ini. 

283
00:11:07,822 --> 00:11:09,530
 Namun tentu saja, apa yang bisa kita manfaatkan 

284
00:11:09,530 --> 00:11:13,730
 adalah fakta bahwa HTML, dan CSS, dan JavaScript, 

285
00:11:13,730 --> 00:11:15,910
 mereka adalah bahasa yang sangat rumit. 

286
00:11:15,910 --> 00:11:18,910
 Dan mereka menyusun cara-cara yang sangat sulit dimengerti ini. 

287
00:11:18,910 --> 00:11:21,510
 Jadi di sini, ini adalah apa yang saya telah mengatur string serangan saya di sini. 

288
00:11:21,510 --> 00:11:23,380
 Ini adalah URL yang salah. 

289
00:11:23,380 --> 00:11:25,350
 Saya katakan, gambar, dan kemudian tiga kutipan 

290
00:11:25,350 --> 00:11:27,340
 menandai berturut-turut, dan kemudian tag skrip. 

291
00:11:27,340 --> 00:11:29,330
 Seperti, ini seharusnya tidak benar-benar mengurai. 

292
00:11:29,330 --> 00:11:30,900
 Tapi apa yang akhirnya akan terjadi 

293
00:11:30,900 --> 00:11:34,740
 adalah bahwa browser akan menjadi bingung di sini. 

294
00:11:34,740 --> 00:11:38,560
 Jadi itu built-in deteksi scripting lintas situs 

295
00:11:38,560 --> 00:11:40,210
 sebenarnya gagal di sini. 

296
00:11:40,210 --> 00:11:42,710
 Dan apa yang akhirnya terjadi adalah sekarang Anda melihat peringatan. 

297
00:11:42,710 --> 00:11:43,230
 BAIK? 

298
00:11:43,230 --> 00:11:45,146
 Dan yang menarik adalah jika Anda benar-benar 

299
00:11:45,146 --> 00:11:48,130
 lihat isi halaman sekarang, agak kacau. 

300
00:11:48,130 --> 00:11:51,520
 Seperti, di mana tanda kutip dan penjepit ini masuk? 

301
00:11:51,520 --> 00:11:53,690
 Jika kita melakukan Kontrol, U, kita bisa melihat 

302
00:11:53,690 --> 00:11:57,574
 bahwa ini tidak membuat peramban bahagia dalam beberapa cara. 

303
00:11:57,574 --> 00:11:58,740
 Itu sedikit tidak jelas. 

304
00:11:58,740 --> 00:12:01,430
 Tapi tidak masalah jika kita adalah penyerang mereka. 

305
00:12:01,430 --> 00:12:03,009
 Kami melihat peringatan itu. 

306
00:12:03,009 --> 00:12:04,800
 Itu artinya? kode kita?] berhasil. 

307
00:12:04,800 --> 00:12:06,750
 Dan dari perspektif penyerang, siapa yang peduli 

308
00:12:06,750 --> 00:12:08,041
 halaman itu kacau sekarang? 

309
00:12:08,041 --> 00:12:09,660
 Karena saya bisa menggunakan kode itu 

310
00:12:09,660 --> 00:12:11,932
 mencuri kue atau hal-hal seperti itu. 

311
00:12:11,932 --> 00:12:13,140
 Jadi apakah itu semua make-- ya? 

312
00:12:13,140 --> 00:12:15,137
 AUDIENCE: Apa aspek lintas situs? 

313
00:12:15,137 --> 00:12:15,720
 PROFESOR: Ah. 

314
00:12:15,720 --> 00:12:21,200
 Jadi aspek lintas situs adalah bahwa jika penyerang dapat meyakinkan 

315
00:12:21,200 --> 00:12:24,220
 pengguna untuk membuka URL seperti ini, 

316
00:12:24,220 --> 00:12:26,270
 maka penyeranglah yang menentukan 

317
00:12:26,270 --> 00:12:27,820
 hal-hal itu dalam pesan itu. 

318
00:12:27,820 --> 00:12:30,610
 Ini penyerang yang menentukan XSS peringatan 

319
00:12:30,610 --> 00:12:31,660
 atau semacam itu. 

320
00:12:31,660 --> 00:12:33,160
 Dan pada dasarnya, apa yang terjadi 

321
00:12:33,160 --> 00:12:35,890
 adalah halaman korban mengeksekusi kode 

322
00:12:35,890 --> 00:12:40,110
 atas nama seseorang yang bukan halaman itu. 

323
00:12:40,110 --> 00:12:42,535
 AUDIENCE: Dapatkah Anda menjelaskan dengan tepat apa peran browser 

324
00:12:42,535 --> 00:12:44,554
 adalah untuk membersihkan [? game?] untuk [? bermain? ?] 

325
00:12:44,554 --> 00:12:45,470
 PROFESOR: Ya, ya. 

326
00:12:45,470 --> 00:12:46,844
 Jadi kita akan membahasnya sebentar lagi. 

327
00:12:46,844 --> 00:12:49,750
 Jadi kita akan membahasnya sebentar lagi. 

328
00:12:49,750 --> 00:12:50,300
 BAIK. 

329
00:12:50,300 --> 00:12:55,745
 Jadi itu semua untuk waktu cerita. 

330
00:12:55,745 --> 00:12:57,110
 Dan mari kita lihat di sini. 

331
00:12:57,110 --> 00:12:59,644
 Jadi saya kira saya bisa mengubah orang ini. 

332
00:12:59,644 --> 00:13:07,991
 Dan mungkin dia akan [tidak terdengar] pria di sini. 

333
00:13:07,991 --> 00:13:08,589
 Orang ini di sini. 

334
00:13:08,589 --> 00:13:09,464
 AUDIENCE: Dinding depan. 

335
00:13:09,464 --> 00:13:10,214
 PROFESOR: Ah, oke. 

336
00:13:10,214 --> 00:13:11,745
 Ini dia. 

337
00:13:11,745 --> 00:13:12,245
 Baiklah. 

338
00:13:12,245 --> 00:13:13,245
 Kedelapan kalinya adalah pesona. 

339
00:13:13,245 --> 00:13:14,365
 Ok terima kasih. 

340
00:13:14,365 --> 00:13:14,865
 BAIK. 

341
00:13:14,865 --> 00:13:17,565
 Jadi ya, jadi itu hanya dua demo cepat untuk menunjukkan Anda 

342
00:13:17,565 --> 00:13:19,810
 dunia yang kotor dan kotor yang kita tinggali sekarang. 

343
00:13:19,810 --> 00:13:23,090
 Jadi mengapa scripting lintas situs begitu umum? 

344
00:13:23,090 --> 00:13:25,780
 Mengapa masalah ini menjadi masalah besar? 

345
00:13:25,780 --> 00:13:27,745
 Yah, alasannya adalah situs web itu 

346
00:13:27,745 --> 00:13:29,740
 semakin dinamis, 

347
00:13:29,740 --> 00:13:32,940
 dan mereka ingin memasukkan konten pengguna berkali-kali, 

348
00:13:32,940 --> 00:13:35,610
 atau mereka ingin memasukkan konten dari domain lain. 

349
00:13:35,610 --> 00:13:38,810
 Jadi pikirkan tentang bagian Komentar pada artikel berita. 

350
00:13:38,810 --> 00:13:40,895
 Komentar itu berasal dari orang-orang yang tidak dipercaya, 

351
00:13:40,895 --> 00:13:41,520
 dari para pengguna. 

352
00:13:41,520 --> 00:13:43,950
 Jadi entah bagaimana, situs-situs ini harus mencari tahu, 

353
00:13:43,950 --> 00:13:46,710
 apa aturan untuk menyusun hal-hal semacam itu? 

354
00:13:46,710 --> 00:13:50,410
 Dan juga, situs web mungkin meng-host dokumen yang diajukan pengguna, 

355
00:13:50,410 --> 00:13:53,280
 sebuah hal seperti Google Docs atau Office 365, misalnya. 

356
00:13:53,280 --> 00:13:56,010
 Semua dokumen itu berasal dari orang-orang yang tidak dipercaya, 

357
00:13:56,010 --> 00:13:58,946
 tetapi entah bagaimana, mereka harus hidup dengan satu sama lain 

358
00:13:58,946 --> 00:14:00,320
 dan dengan infrastruktur besar 

359
00:14:00,320 --> 00:14:03,530
 dari Google atau dari Microsoft atau entah apa lagi. 

360
00:14:03,530 --> 00:14:06,740
 Jadi apa saja beberapa pertahanan scripting lintas situs 

361
00:14:06,740 --> 00:14:07,240
 kita bisa gunakan? 

362
00:14:07,240 --> 00:14:08,827
 Semacam ini sampai ke pertanyaan Anda. 

363
00:14:08,827 --> 00:14:10,660
 Jadi kita akan benar-benar melihat beberapa dari mereka sekarang. 

364
00:14:10,660 --> 00:14:16,140


365
00:14:16,140 --> 00:14:21,120
 Jadi satu jenis pertahanan pada dasarnya 

366
00:14:21,120 --> 00:14:26,600
 memiliki filter skrip lintas situs di peramban itu sendiri. 

367
00:14:26,600 --> 00:14:30,210


368
00:14:30,210 --> 00:14:32,730
 Jadi filter ini pada dasarnya 

369
00:14:32,730 --> 00:14:38,090
 coba mendeteksi ketika ada scripting lintas situs potensial 

370
00:14:38,090 --> 00:14:39,360
 menyerang. 

371
00:14:39,360 --> 00:14:42,490
 Jadi kami benar-benar melihat salah satu filter itu beraksi. 

372
00:14:42,490 --> 00:14:45,560
 Dan saya pikir itu adalah contoh ketiga yang kami lihat. 

373
00:14:45,560 --> 00:14:49,140
 Jika Anda memiliki beberapa situs web-- atau beberapa URL-- maafkan saya-- 

374
00:14:49,140 --> 00:14:53,850
 yang terlihat seperti ini-- jadi foo.com. 

375
00:14:53,850 --> 00:14:59,280
 Dan kemudian Anda memiliki beberapa tanda tanya dan kemudian beberapa string kueri 

376
00:14:59,280 --> 00:15:01,300
 Anda akan mengirimkan. 

377
00:15:01,300 --> 00:15:06,830
 Ini sangat mirip dengan contoh yang saya coba ketiga. 

378
00:15:06,830 --> 00:15:09,660
 Jadi saya hanya mengatur sumber ini ke sesuatu seperti 

379
00:15:09,660 --> 00:15:22,150
 evil.com/cookiestealer.js. 

380
00:15:22,150 --> 00:15:23,900
 Dan itulah yang akhirnya terjadi 

381
00:15:23,900 --> 00:15:25,940
 bahwa ketika saya mencoba contoh yang mirip dengan ini, 

382
00:15:25,940 --> 00:15:28,460
 browser benar-benar menolaknya dari tangan. 

383
00:15:28,460 --> 00:15:30,380
 Jadi kami melihat bahwa itu bahkan tidak berhasil. 

384
00:15:30,380 --> 00:15:31,820
 Dan alasan mengapa itu tidak berhasil 

385
00:15:31,820 --> 00:15:34,330
 karena peramban melihat dan berkata, 

386
00:15:34,330 --> 00:15:40,451
 apakah ada tag skrip yang disematkan di URL? 

387
00:15:40,451 --> 00:15:42,200
 Jadi pada dasarnya, ini adalah heuristik yang sangat sederhana 

388
00:15:42,200 --> 00:15:44,860
 untuk mencari tahu apakah sesuatu yang jahat mungkin terjadi, 

389
00:15:44,860 --> 00:15:47,570
 karena tidak ada pengembang yang sah-- atau tidak ada pengembang 

390
00:15:47,570 --> 00:15:49,752
 itu waras-- harus melakukan hal-hal seperti ini. 

391
00:15:49,752 --> 00:15:51,710
 Jadi sebenarnya ada opsi konfigurasi ini 

392
00:15:51,710 --> 00:15:54,209
 di browser Anda, Anda dapat menggunakan untuk mengaktifkan dan menonaktifkan hal-hal ini. 

393
00:15:54,209 --> 00:15:55,900
 Terkadang, ini berguna untuk pengujian 

394
00:15:55,900 --> 00:15:57,941
 jika Anda hanya ingin menyuntikkan JavaScript benar-benar 

395
00:15:57,941 --> 00:15:58,940
 cepat dan kotor. 

396
00:15:58,940 --> 00:16:01,530
 Tetapi ini hampir selalu ditetapkan [TIDAK JELAS]. 

397
00:16:01,530 --> 00:16:03,925
 Jadi misalnya, Chrome dan IE memiliki filter bawaan itu 

398
00:16:03,925 --> 00:16:06,290
 akan melihat nilai URL Anda di bilah alamat, 

399
00:16:06,290 --> 00:16:08,240
 cari hal-hal seperti ini. 

400
00:16:08,240 --> 00:16:11,530
 Dan jika ada, mereka akan melakukan hal-hal seperti mungkin menghapus 

401
00:16:11,530 --> 00:16:12,910
 semua ini sepenuhnya. 

402
00:16:12,910 --> 00:16:15,420
 Mereka mungkin akan mengubah sumbernya menjadi kosong, 

403
00:16:15,420 --> 00:16:16,357
 hal-hal seperti itu. 

404
00:16:16,357 --> 00:16:18,190
 Dan pada dasarnya, untuk mendapatkan pertanyaan Anda, 

405
00:16:18,190 --> 00:16:21,310
 ada banyak heuristik yang dimiliki browser 

406
00:16:21,310 --> 00:16:22,940
 untuk mengidentifikasi hal-hal seperti ini. 

407
00:16:22,940 --> 00:16:24,750
 Dan jika Anda melihat situs OWASP, 

408
00:16:24,750 --> 00:16:27,509
 mereka benar-benar mengumpulkan contoh heuristik 

409
00:16:27,509 --> 00:16:29,300
 Anda dapat menggunakan untuk mendeteksi scripting lintas situs, 

410
00:16:29,300 --> 00:16:33,906
 serta trik yang dapat Anda gunakan untuk melewati filter tersebut. 

411
00:16:33,906 --> 00:16:34,780
 Jadi itu sangat lucu. 

412
00:16:34,780 --> 00:16:36,360
 Jadi hal pertama yang ingin saya lakukan untuk demo 

413
00:16:36,360 --> 00:16:38,320
 melakukan sesuatu seperti ini, dan itu tidak berhasil. 

414
00:16:38,320 --> 00:16:40,060
 Jadi saya pergi ke lembar contekan OWASP. 

415
00:16:40,060 --> 00:16:42,170
 Saya melihat, seperti, hal ketiga yang mereka sarankan, 

416
00:16:42,170 --> 00:16:43,586
 dan hal ketiga yang mereka sarankan 

417
00:16:43,586 --> 00:16:47,460
 bekerja, yang semacam rusak jenis hal sintaks gambar. 

418
00:16:47,460 --> 00:16:50,702
 Jadi masalah mendasar dengan hanya mengandalkan ini 

419
00:16:50,702 --> 00:16:52,910
 apakah itu, seperti yang saya katakan, ada banyak cara yang berbeda 

420
00:16:52,910 --> 00:16:56,710
 untuk memaksa parser CSS dan HTML mem-mal-parse sesuatu. 

421
00:16:56,710 --> 00:16:59,080
 Jadi hal-hal ini bukanlah solusi yang lengkap. 

422
00:16:59,080 --> 00:17:00,980
 Mereka tidak memiliki cakupan yang sempurna. 

423
00:17:00,980 --> 00:17:02,630
 AUDIENCE: Seharusnya tidak ini hanya seperti lead-in 

424
00:17:02,630 --> 00:17:03,379
 dari browser? 

425
00:17:03,379 --> 00:17:07,449
 Karena sepertinya bukan pekerjaan browser untuk melakukan hal ini. 

426
00:17:07,449 --> 00:17:09,365
 PROFESOR: Maksud Anda itu bukan pekerjaan browser 

427
00:17:09,365 --> 00:17:10,795
 untuk membersihkan hal semacam ini? 

428
00:17:10,795 --> 00:17:11,420
 AUDIENCE: Ya. 

429
00:17:11,420 --> 00:17:12,280
 PROFESOR: Maksud saya, Anda bisa bayangkan 

430
00:17:12,280 --> 00:17:15,118
 semacam memiliki browser duduk di atas proxy, misalnya. 

431
00:17:15,118 --> 00:17:17,289
 Dan mungkin proxy melakukan semacam pembersihan seperti ini. 

432
00:17:17,290 --> 00:17:20,029
 Maksud saya, alasan intuitif mengapa itu mungkin masuk akal 

433
00:17:20,029 --> 00:17:21,944
 melakukannya di dalam browser karena begitu banyak 

434
00:17:21,944 --> 00:17:25,518
 mesin parsing yang sah ada di dalam browser. 

435
00:17:25,519 --> 00:17:28,060
 Jadi mungkin, jika Anda lebih dekat ke tempat parsing yang sebenarnya 

436
00:17:28,060 --> 00:17:29,070
 sedang dilakukan, lebih baik. 

437
00:17:29,070 --> 00:17:29,778
 Tapi kamu benar. 

438
00:17:29,778 --> 00:17:32,316
 Dalam prakteknya, Anda bisa membayangkan ada semacam pertahanan 

439
00:17:32,316 --> 00:17:33,190
 dalam lapisan, pada dasarnya. 

440
00:17:33,190 --> 00:17:34,606
 AUDIENCE: Saya pikir apa dia mungkin 

441
00:17:34,606 --> 00:17:37,198
 katakan adalah bahwa itu pekerjaan pengembang web, 

442
00:17:37,198 --> 00:17:39,960
 bukan tugas klien untuk membersihkan ini. 

443
00:17:39,960 --> 00:17:42,480
 PROFESOR: Tapi, maksud saya, itu seperti mengatakan - jadi 

444
00:17:42,480 --> 00:17:44,730
 dalam arti tertentu, kita dapat mengatakan bahwa tentang proses, 

445
00:17:44,730 --> 00:17:46,360
 juga, di Unix atau Windows. 

446
00:17:46,360 --> 00:17:49,460
 Jadi kita bisa mengatakan itu semacam pekerjaan pengembang 

447
00:17:49,460 --> 00:17:51,150
 untuk memastikan hal-hal itu tetap terisolasi. 

448
00:17:51,150 --> 00:17:53,090
 Namun pada kenyataannya, OS dan perangkat kerasnya 

449
00:17:53,090 --> 00:17:54,840
 juga memiliki peran penting untuk dimainkan, 

450
00:17:54,840 --> 00:17:57,087
 karena [INAUDIBLE] dipercaya sedangkan dua sewenang-wenang 

451
00:17:57,087 --> 00:17:59,170
 program yang dikembangkan oleh dua pengembang sembarang 

452
00:17:59,170 --> 00:18:01,670
 mungkin atau mungkin tidak dipercaya untuk mengurutkan keamanan penerapan 

453
00:18:01,670 --> 00:18:02,180
 benar. 

454
00:18:02,180 --> 00:18:02,971
 Tapi kamu benar. 

455
00:18:02,971 --> 00:18:05,100
 Dan sebenarnya, kerangka kerja seperti Django atau yang lainnya, 

456
00:18:05,100 --> 00:18:06,891
 mereka benar-benar mencoba untuk membantu Anda berkeliling 

457
00:18:06,891 --> 00:18:08,860
 beberapa masalah ini. 

458
00:18:08,860 --> 00:18:11,350
 Jadi lagian, jadi ya, jadi filter bukanlah solusi sempurna. 

459
00:18:11,350 --> 00:18:18,460
 Dan juga, filter tidak bisa mencegah apa 

460
00:18:18,460 --> 00:18:27,120
 dikenal sebagai persistent-- persistent-- lintas situs 

461
00:18:27,120 --> 00:18:29,590
 serangan scripting. 

462
00:18:29,590 --> 00:18:32,430
 Ini dikenal sebagai semacam yang direfleksikan atau sementara, 

463
00:18:32,430 --> 00:18:35,290
 karena kode skrip ini hanya semacam hidup di URL. 

464
00:18:35,290 --> 00:18:37,460
 Kemudian setelah pengguna menutup URL itu, 

465
00:18:37,460 --> 00:18:38,941
 pada dasarnya, serangan itu hilang. 

466
00:18:38,941 --> 00:18:40,440
 Tetapi Anda bisa membayangkan bahwa Anda bisa 

467
00:18:40,440 --> 00:18:51,510
 memiliki seseorang yang-- pengguna meletakkan HTML berbahaya di Komentar 

468
00:18:51,510 --> 00:18:53,285
 bagian untuk situs web. 

469
00:18:53,285 --> 00:18:56,370


470
00:18:56,370 --> 00:19:03,570
 Dan jika server web benar-benar menerima bahwa komentar itu valid, 

471
00:19:03,570 --> 00:19:05,950
 maka komentar itu, dengan muatan jahat ini, 

472
00:19:05,950 --> 00:19:07,580
 pada dasarnya bisa tinggal di sana selamanya. 

473
00:19:07,580 --> 00:19:09,330
 Jadi setiap kali ada pengguna yang pergi ke sana, mereka 

474
00:19:09,330 --> 00:19:11,280
 akan terkena konten berbahaya itu. 

475
00:19:11,280 --> 00:19:14,000
 Contoh lain, yang semacam itu 

476
00:19:14,000 --> 00:19:15,750
 lucu dan sedih, karena semua hal ini, 

477
00:19:15,750 --> 00:19:17,985
 adalah jika Anda melihat situs kencan. 

478
00:19:17,985 --> 00:19:21,090


479
00:19:21,090 --> 00:19:24,790
 Jadi beberapa situs web kencan benar-benar memungkinkan 

480
00:19:24,790 --> 00:19:29,600
 pengguna untuk membuat HTML lengkap di profil mereka. 

481
00:19:29,600 --> 00:19:30,740
 Jadi apa artinya itu? 

482
00:19:30,740 --> 00:19:33,860
 Jadi ketika orang lain kesepian, mungkin, atau mencari 

483
00:19:33,860 --> 00:19:38,200
 untuk menemukan satu pertandingan jiwa sejati mereka, mereka pergi ke situs web Anda. 

484
00:19:38,200 --> 00:19:40,210
 Mereka akan menjalankan HTML yang Anda miliki 

485
00:19:40,210 --> 00:19:43,450
 dibuat dalam konteks sesi mereka. 

486
00:19:43,450 --> 00:19:46,390
 Dan itu juga bisa menjadi serangan yang sangat merusak juga. 

487
00:19:46,390 --> 00:19:48,040
 Jadi, lakukan saja jenis filter ini 

488
00:19:48,040 --> 00:19:49,901
 jangan lindungi hal-hal seperti itu. 

489
00:19:49,901 --> 00:19:52,065
 AUDIENCE: Jadi [INAUDIBLE] di Komentar 

490
00:19:52,065 --> 00:19:55,673
 Bagian mungkin melakukan itu dengan menetapkan post-- 

491
00:19:55,673 --> 00:19:58,879
 informasi masuk ke server dalam variabel posting 

492
00:19:58,879 --> 00:20:00,290
 atau semacam itu? 

493
00:20:00,290 --> 00:20:01,220
 PROFESOR: Jadi ada banyak cara yang berbeda 

494
00:20:01,220 --> 00:20:02,210
 Anda bisa membayangkan melakukannya. 

495
00:20:02,210 --> 00:20:02,495
 Ya. 

496
00:20:02,495 --> 00:20:04,494
 Jadi salah satu cara Anda bisa membayangkan melakukannya adalah sebuah posting. 

497
00:20:04,494 --> 00:20:06,795
 Cara lain yang bisa Anda bayangkan melakukannya adalah XML yang dinamis 

498
00:20:06,795 --> 00:20:07,516
 Permintaan HTTP. 

499
00:20:07,516 --> 00:20:08,450
 AUDIENCE: OK. 

500
00:20:08,450 --> 00:20:11,597
 Tetapi jika itu seperti sebuah posting, mengapa Anda tidak bisa memindai saja 

501
00:20:11,597 --> 00:20:13,430
 dan melakukan hal yang sama dengan yang Anda miliki di-- 

502
00:20:13,430 --> 00:20:13,830
 PROFESOR: Ya. 

503
00:20:13,830 --> 00:20:15,040
 Jadi Anda benar tentang itu, 

504
00:20:15,040 --> 00:20:16,831
 dan kami akan mendiskusikan beberapa hal dalam hitungan detik. 

505
00:20:16,831 --> 00:20:18,915
 Tapi Anda benar sekali bahwa server 

506
00:20:18,915 --> 00:20:20,290
 sisi aplikasi seharusnya 

507
00:20:20,290 --> 00:20:22,246
 sangat defensif dan curiga dengan hal ini. 

508
00:20:22,246 --> 00:20:23,245
 Jadi Anda benar sekali. 

509
00:20:23,245 --> 00:20:25,860
 Jadi Anda bisa membayangkan bahwa ketika server mungkin 

510
00:20:25,860 --> 00:20:28,560
 melihat sesuatu seperti ini, [tidak terdengar] 

511
00:20:28,560 --> 00:20:30,315
 bahkan jika browser tidak. 

512
00:20:30,315 --> 00:20:32,400
 Anda benar tentang itu. 

513
00:20:32,400 --> 00:20:32,900
 Baiklah. 

514
00:20:32,900 --> 00:20:36,740
 Jadi pada dasarnya ini adalah survei tentang filter lintas situs ini 

515
00:20:36,740 --> 00:20:37,410
 di browser. 

516
00:20:37,410 --> 00:20:43,510
 Jadi pertahanan lain terhadap scripting lintas situs 

517
00:20:43,510 --> 00:20:49,480
 adalah sesuatu yang dikenal sebagai cookie hanya HTTP. 

518
00:20:49,480 --> 00:20:52,100


519
00:20:52,100 --> 00:20:54,430
 Dan itulah ide dasar di balik ini 

520
00:20:54,430 --> 00:20:58,550
 adalah bahwa server benar-benar dapat memberi tahu browser 

521
00:20:58,550 --> 00:21:00,380
 JavaScript sisi klien seharusnya tidak 

522
00:21:00,380 --> 00:21:03,970
 dapat mengakses cookie tertentu. 

523
00:21:03,970 --> 00:21:06,000
 Dan pada dasarnya, server bisa saja 

524
00:21:06,000 --> 00:21:10,187
 kirim nilai header sebagai respons di bidang Cookie yang disetel. 

525
00:21:10,187 --> 00:21:12,270
 Dapat dikatakan, hei, jangan biarkan klien menyukai JavaScript 

526
00:21:12,270 --> 00:21:13,070
 memanipulasi cookie ini. 

527
00:21:13,070 --> 00:21:14,570
 Jadi hanya server yang bisa melakukan ini. 

528
00:21:14,570 --> 00:21:17,020
 Dan ini hanya pertahanan parsial, meskipun, 

529
00:21:17,020 --> 00:21:21,820
 karena penyerang masih bisa mengeluarkan permintaan itu 

530
00:21:21,820 --> 00:21:24,310
 mengandung cookie pengguna. 

531
00:21:24,310 --> 00:21:26,450
 Jadi ini adalah pemalsuan permintaan lintas situs 

532
00:21:26,450 --> 00:21:30,130
 yang kami lihat di kuliah terakhir. 

533
00:21:30,130 --> 00:21:33,891
 Jadi bahkan jika kode JavaScript tidak dapat memanipulasi cookie, 

534
00:21:33,891 --> 00:21:35,766
 penyerang masih bisa melakukan hal-hal seperti sulap 

535
00:21:35,766 --> 00:21:39,700
 sebuah URL ke beberapa situs e-commerce, katakanlah buy.com. 

536
00:21:39,700 --> 00:21:44,150
 Penyerang dapat menaruh barang apa pun yang ingin dibeli oleh penyerang. 

537
00:21:44,150 --> 00:21:46,710
 Jadi, letakkan Ferrari, misalnya. 

538
00:21:46,710 --> 00:21:52,040
 Dan kemudian penyerang dapat mengatakan, siapa yang harus pergi ke ini? 

539
00:21:52,040 --> 00:21:55,281
 Ini harus pergi ke penyerang. 

540
00:21:55,281 --> 00:21:57,030
 Dan meskipun klien menyukai JavaScript 

541
00:21:57,030 --> 00:21:58,789
 tidak dapat mengakses cookie, tidak ada apa-apa 

542
00:21:58,789 --> 00:22:00,830
 yang mencegah penyerang dari hanya membayangkan 

543
00:22:00,830 --> 00:22:02,130
 sebuah URL seperti ini. 

544
00:22:02,130 --> 00:22:04,671
 Inilah beberapa token CSRF 

545
00:22:04,671 --> 00:22:06,170
 membantu mencegah, yang kita akan 

546
00:22:06,170 --> 00:22:09,230
 bicarakan sedikit nanti. 

547
00:22:09,230 --> 00:22:12,330
 Jadi, hal lain yang bisa Anda coba 

548
00:22:12,330 --> 00:22:16,090
 yang harus dilakukan untuk mencegah serangan skrip lintas situs ini 

549
00:22:16,090 --> 00:22:18,810
 adalah pemisahan hak istimewa. 

550
00:22:18,810 --> 00:22:22,220


551
00:22:22,220 --> 00:22:26,670
 Dan gagasannya di sini pada dasarnya 

552
00:22:26,670 --> 00:22:36,630
 bahwa Anda ingin menggunakan domain terpisah untuk semua konten itu 

553
00:22:36,630 --> 00:22:37,225
 tidak dipercaya. 

554
00:22:37,225 --> 00:22:41,370


555
00:22:41,370 --> 00:22:46,400
 Dan misalnya, banyak penyedia server online 

556
00:22:46,400 --> 00:22:49,200
 adalah hal-hal seperti email atau suite produktivitas online. 

557
00:22:49,200 --> 00:22:52,620
 Jadi pikirkan Google Docs, Office 365, seterusnya dan seterusnya. 

558
00:22:52,620 --> 00:22:54,790
 Mereka benar-benar menggunakan domain terpisah 

559
00:22:54,790 --> 00:22:57,570
 untuk menghosting konten yang dikirim pengguna. 

560
00:22:57,570 --> 00:23:00,990
 Jadi Google, saya pikir mereka masih menggunakan ini. 

561
00:23:00,990 --> 00:23:02,940
 Mereka biasa menaruh semua barang itu pengguna 

562
00:23:02,940 --> 00:23:04,782
 dikirim ke beberapa domain khusus 

563
00:23:04,782 --> 00:23:05,990
 disebut googleusercontent.com. 

564
00:23:05,990 --> 00:23:11,492


565
00:23:11,492 --> 00:23:13,270
 Dan di sini, mereka akan meletakkan segala sesuatunya 

566
00:23:13,270 --> 00:23:15,880
 seperti salinan halaman tembolok, Gmail Anda [TIDAK JELAS], 

567
00:23:15,880 --> 00:23:17,320
 dan hal-hal seperti ini. 

568
00:23:17,320 --> 00:23:19,430
 Dan setidaknya satu atau dua tahun yang lalu, 

569
00:23:19,430 --> 00:23:22,990
 ini seperti salah satu dari 25 teratas [? Alexa-visited?] Domain, 

570
00:23:22,990 --> 00:23:24,970
 karena layanan Google sangat populer. 

571
00:23:24,970 --> 00:23:28,670
 Dan apa gunanya memasukkan barang-barang ke sini? 

572
00:23:28,670 --> 00:23:31,740
 Yah, harapannya, setidaknya, adalah jika ada 

573
00:23:31,740 --> 00:23:34,700
 adalah beberapa jenis kerentanan skrip lintas situs 

574
00:23:34,700 --> 00:23:37,810
 atau sesuatu seperti ini dalam konten yang diajukan pengguna, 

575
00:23:37,810 --> 00:23:40,240
 maka mudah-mudahan, daemon-doon itu adil 

576
00:23:40,240 --> 00:23:42,700
 dibatasi untuk domain itu. 

577
00:23:42,700 --> 00:23:46,122
 Itu tidak akan benar-benar memengaruhi google.com yang lengkap. 

578
00:23:46,122 --> 00:23:48,185
 Ini bukan pertahanan yang sempurna, meskipun, 

579
00:23:48,185 --> 00:23:50,590
 karena konten yang dikirimkan pengguna mungkin memiliki referensi 

580
00:23:50,590 --> 00:23:51,695
 ke berbagai hal dari google.com. 

581
00:23:51,695 --> 00:23:53,480
 Dan sekali lagi, ini hanya semacam 

582
00:23:53,480 --> 00:23:58,326
 perbaikan parsial untuk masalah yang jauh lebih luas. 

583
00:23:58,326 --> 00:23:59,700
 Sekarang, hal lain yang bisa Anda lakukan-- 

584
00:23:59,700 --> 00:24:03,430
 dan ini kembali ke saran pria itu 

585
00:24:03,430 --> 00:24:05,740
 Di sini kita bisa benar-benar 

586
00:24:05,740 --> 00:24:08,695
 melakukan sanitasi konten. 

587
00:24:08,695 --> 00:24:14,270


588
00:24:14,270 --> 00:24:21,570
 Dan gagasannya di sini adalah bahwa, pada dasarnya, kapan pun Anda-- 

589
00:24:21,570 --> 00:24:24,170
 di mana Anda bisa menjadi browser, di mana Anda bisa menjadi web 

590
00:24:24,170 --> 00:24:27,730
 server, atau apalah-- kapan pun Anda menerima konten yang tidak dipercaya, 

591
00:24:27,730 --> 00:24:28,930
 Anda tidak percaya sama sekali. 

592
00:24:28,930 --> 00:24:32,230
 Jadi Anda melaluinya, dan Anda melakukan hal-hal untuk dirender 

593
00:24:32,230 --> 00:24:35,210
 itu semacam netral sehingga tidak bisa benar-benar 

594
00:24:35,210 --> 00:24:38,530
 mengeksekusi kode atau menumbangkan sistem Anda dengan cara apa pun. 

595
00:24:38,530 --> 00:24:45,820
 Dan contohnya adalah sistem template Django. 

596
00:24:45,820 --> 00:24:50,740


597
00:24:50,740 --> 00:24:53,896
 Dan Django adalah contoh dari kerangka web. 

598
00:24:53,896 --> 00:24:55,645
 Jadi pada dasarnya, kerangka web tingkat tinggi 

599
00:24:55,645 --> 00:24:59,560
 adalah sesuatu yang membantu untuk mengotomatisasi dan mengamankan 

600
00:24:59,560 --> 00:25:02,700
 beberapa jenis tugas yang membosankan untuk mengembangkan situs web. 

601
00:25:02,700 --> 00:25:06,740
 Jadi ini akan membantu Anda membuat akses basis data lebih mudah. 

602
00:25:06,740 --> 00:25:10,380
 Ini akan membantu Anda melakukan hal-hal seperti manajemen sesi. 

603
00:25:10,380 --> 00:25:13,520
 Dan itu juga akan membantu Anda mempertahankan tampilan yang konsisten 

604
00:25:13,520 --> 00:25:15,847
 dan merasa di situs web Anda. 

605
00:25:15,847 --> 00:25:18,180
 Dan satu cara untuk mempertahankan tampilan dan nuansa yang konsisten 

606
00:25:18,180 --> 00:25:20,040
 adalah menggunakan gagasan template ini. 

607
00:25:20,040 --> 00:25:21,490
 Jadi semua halaman Anda secara otomatis 

608
00:25:21,490 --> 00:25:23,510
 mulai dengan CSS dan hal-hal yang sama 

609
00:25:23,510 --> 00:25:25,700
 seperti itu, gaya yang sama. 

610
00:25:25,700 --> 00:25:28,420
 Tapi kemudian ada bagian-bagian ini di halaman web 

611
00:25:28,420 --> 00:25:30,840
 di mana Anda dapat mengkhususkannya dengan berita tertentu 

612
00:25:30,840 --> 00:25:34,420
 artikel yang berada di atas pikiran semua orang hari itu, 

613
00:25:34,420 --> 00:25:36,630
 atau sesuatu seperti itu, atau konten khusus pengguna. 

614
00:25:36,630 --> 00:25:40,780
 Jadi misalnya, di Django, Anda dapat melihat template, 

615
00:25:40,780 --> 00:25:42,950
 dan mungkin terlihat seperti ini. 

616
00:25:42,950 --> 00:25:44,790
 Jadi Anda memiliki tag yang tebal. 

617
00:25:44,790 --> 00:25:48,350
 Ia mengatakan, Halo. 

618
00:25:48,350 --> 00:25:51,850
 Dan kemudian Anda memiliki kawat gigi ini di sini, dua kawat gigi ini. 

619
00:25:51,850 --> 00:25:52,815
 Dan itu mengatakan, nama. 

620
00:25:52,815 --> 00:25:55,640


621
00:25:55,640 --> 00:25:57,360
 Dan pada dasarnya, apa artinya ini 

622
00:25:57,360 --> 00:26:01,000
 adalah bahwa ini seperti variabel placeholder. 

623
00:26:01,000 --> 00:26:04,410
 Jadi pada dasarnya, halaman-halaman ini dihasilkan secara dinamis. 

624
00:26:04,410 --> 00:26:06,780
 Jadi ketika pengguna masuk ke situs Django, 

625
00:26:06,780 --> 00:26:09,310
 server Django mengatakan, OK, baik, nama ini 

626
00:26:09,310 --> 00:26:11,850
 akan berada di suatu tempat, siapa tahu, di cookie. 

627
00:26:11,850 --> 00:26:14,120
 Mungkin itu akan menjadi string CGI, apa pun. 

628
00:26:14,120 --> 00:26:16,100
 Dan seperti server Django secara dinamis 

629
00:26:16,100 --> 00:26:17,990
 menghasilkan halaman [? untuk kembali?] kepada pengguna, 

630
00:26:17,990 --> 00:26:20,470
 ini menggantikan referensi khusus ini di sini 

631
00:26:20,470 --> 00:26:23,339
 dengan apa pun nilai dari variabel ini. 

632
00:26:23,339 --> 00:26:24,630
 Jadi itu cukup mudah. 

633
00:26:24,630 --> 00:26:27,630
 Ini seperti server CGI yang saya tunjukkan. 

634
00:26:27,630 --> 00:26:29,480
 Jadi, hanya mencerminkan konten yang dikirimkan pengguna 

635
00:26:29,480 --> 00:26:30,320
 disini. 

636
00:26:30,320 --> 00:26:33,930
 Tapi Django sebenarnya melakukannya lebih baik daripada CGI konyol 

637
00:26:33,930 --> 00:26:36,260
 server yang saya tunjukkan kepada Anda, karena menggunakan gagasan ini 

638
00:26:36,260 --> 00:26:38,620
 sanitasi konten. 

639
00:26:38,620 --> 00:26:41,387
 Jadi Django mengharapkan bahwa pengguna dapat bermusuhan. 

640
00:26:41,387 --> 00:26:42,970
 Jadi bukan hanya langsung ditaruh 

641
00:26:42,970 --> 00:26:44,680
 nilai variabel nama di sini. 

642
00:26:44,680 --> 00:26:47,460
 Sebaliknya, ia akan mengkodekannya sedemikian rupa 

643
00:26:47,460 --> 00:26:50,583
 bahwa konten ini tidak akan pernah bisa keluar 

644
00:26:50,583 --> 00:26:53,292
 dari konteks HTML dan jalankan JavaScript 

645
00:26:53,292 --> 00:26:54,250
 atau sesuatu seperti ini. 

646
00:26:54,250 --> 00:26:55,666
 Jadi misalnya, satu hal yang akan dilakukan 

647
00:26:55,666 --> 00:27:00,180
 apakah itu akan mengambil kurung sudut, 

648
00:27:00,180 --> 00:27:05,350
 dan itu akan menerjemahkannya ke dalam entitas HTML ini. 

649
00:27:05,350 --> 00:27:09,380
 Jadi karakter yang kurang berubah menjadi ini. 

650
00:27:09,380 --> 00:27:16,060
 Lebih besar dari karakter diterjemahkan ke dalam ini. 

651
00:27:16,060 --> 00:27:24,720
 Kutipan ganda diterjemahkan ke dalam kutipan ampersand, 

652
00:27:24,720 --> 00:27:25,950
 dan seterusnya dan seterusnya. 

653
00:27:25,950 --> 00:27:30,200
 Dan apa yang memastikan ini adalah bahwa jika konten yang dimasukkan pengguna 

654
00:27:30,200 --> 00:27:32,520
 dalam nama sebenarnya mencoba untuk mengandung kurung sudut 

655
00:27:32,520 --> 00:27:35,367
 atau hal-hal seperti ini, maka pada dasarnya akan dikebiri. 

656
00:27:35,367 --> 00:27:36,950
 Dan itu akan diterjemahkan menjadi sesuatu 

657
00:27:36,950 --> 00:27:38,890
 itu tidak akan ditafsirkan sebagai HTML 

658
00:27:38,890 --> 00:27:41,540
 di browser sisi-klien. 

659
00:27:41,540 --> 00:27:43,740
 Jadi apakah itu masuk akal? 

660
00:27:43,740 --> 00:27:48,361
 Jadi sekarang saya tahu bahwa ini bukan pertahanan yang benar-benar kuat 

661
00:27:48,361 --> 00:27:50,360
 terhadap beberapa hal scripting lintas situs ini. 

662
00:27:50,360 --> 00:27:52,610
 Dan alasannya, seperti yang kami tunjukkan dalam contoh, 

663
00:27:52,610 --> 00:27:55,800
 adalah tata bahasa untuk HTML, dan CSS, dan JavaScript 

664
00:27:55,800 --> 00:28:00,320
 sangat rumit sehingga sangat mudah membingungkan 

665
00:28:00,320 --> 00:28:01,490
 parser browser. 

666
00:28:01,490 --> 00:28:07,020
 Jadi misalnya, katakanlah Anda memiliki sesuatu seperti ini. 

667
00:28:07,020 --> 00:28:10,880
 Dan ini adalah hal yang sangat umum untuk dilakukan 

668
00:28:10,880 --> 00:28:12,510
 dalam kerangka seperti Django. 

669
00:28:12,510 --> 00:28:15,350
 Jadi Anda memiliki beberapa div. 

670
00:28:15,350 --> 00:28:20,380
 Dan kemudian Anda ingin mengatur kelasnya secara dinamis. 

671
00:28:20,380 --> 00:28:26,692
 Jadi Anda mengatur kelasnya ke beberapa var, seterusnya dan seterusnya. 

672
00:28:26,692 --> 00:28:28,650
 Jadi idenya adalah ketika Django memproses ini, 

673
00:28:28,650 --> 00:28:30,540
 itu harus mencari tahu apa styling saat ini dan kemudian dimasukkan 

674
00:28:30,540 --> 00:28:31,360
 di sini. 

675
00:28:31,360 --> 00:28:33,850
 Nah, satu hal yang bisa Anda lakukan adalah mungkin 

676
00:28:33,850 --> 00:28:38,740
 penyerang memberikan sesuatu seperti string seperti ini. 

677
00:28:38,740 --> 00:28:41,690
 Jadi penyerang akan mengatakan, kelas 1. 

678
00:28:41,690 --> 00:28:45,400
 OK, sejauh ini sangat bagus, karena itu tampak seperti CSS yang valid 

679
00:28:45,400 --> 00:28:46,052
 ekspresi. 

680
00:28:46,052 --> 00:28:47,510
 Tapi kemudian penyerang akan mencobanya 

681
00:28:47,510 --> 00:28:51,210
 untuk menaruh beberapa JavaScript di sini. 

682
00:28:51,210 --> 00:28:57,980
 Jadi bisa dikatakan, onclick equals-- dan kemudian dimasukkan 

683
00:28:57,980 --> 00:29:00,400
 URL JavaScript. 

684
00:29:00,400 --> 00:29:06,740
 Dan kemudian taruh beberapa fungsi di sini. 

685
00:29:06,740 --> 00:29:09,650
 Jadi ini salah format. 

686
00:29:09,650 --> 00:29:12,787
 Peramban mungkin hanya melakukan kegagalan berhenti di sini. 

687
00:29:12,787 --> 00:29:14,370
 Tetapi masalahnya adalah jika Anda pernah melakukannya 

688
00:29:14,370 --> 00:29:17,550
 melihat HTML untuk halaman web nyata, semua itu 

689
00:29:17,550 --> 00:29:20,250
 rusak, bahkan untuk situs yang sah dan penuh kebajikan. 

690
00:29:20,250 --> 00:29:21,960
 Orang-orang tidak bisa meretas HTML. 

691
00:29:21,960 --> 00:29:24,500
 Jadi jika peramban gagal dihentikan, 

692
00:29:24,500 --> 00:29:27,910
 secara harfiah, tidak ada situs yang Anda nikmati yang pernah bekerja. 

693
00:29:27,910 --> 00:29:29,990
 Jika Anda pernah ingin dikecewakan oleh dunia 

694
00:29:29,990 --> 00:29:32,120
 jika saya belum membantu Anda melakukan itu, 

695
00:29:32,120 --> 00:29:35,620
 buka konsol JavaScript Anda saat menjelajahi situs web 

696
00:29:35,620 --> 00:29:37,710
 dan lihat berapa banyak kesalahan yang bisa dimuntahkan. 

697
00:29:37,710 --> 00:29:41,400
 Seperti, pergi ke CNN dan lihat saja berapa banyak kesalahan yang bisa dimuntahkan. 

698
00:29:41,400 --> 00:29:44,725
 CNN pada dasarnya bekerja, tetapi sangat mengganggu, 

699
00:29:44,725 --> 00:29:46,600
 karena jika Anda membuka pembaca Acrobat 

700
00:29:46,600 --> 00:29:47,650
 dan Anda terus melempar 

701
00:29:47,650 --> 00:29:49,220
 pengecualian penunjuk null, Anda akan 

702
00:29:49,220 --> 00:29:50,390
 merasa sedikit tertipu oleh kehidupan. 

703
00:29:50,390 --> 00:29:53,072
 Namun di web, rupanya, kami telah belajar untuk menerima ini. 

704
00:29:53,072 --> 00:29:55,530
 Jadi karena browser harus sangat toleran terhadap hal-hal ini, 

705
00:29:55,530 --> 00:29:57,940
 mereka benar-benar akan mencoba memijat kode yang salah 

706
00:29:57,940 --> 00:29:59,490
 menjadi sesuatu yang tampaknya masuk akal. 

707
00:29:59,490 --> 00:30:01,239
 Dan di situlah letak kerentanan keamanan. 

708
00:30:01,239 --> 00:30:05,060


709
00:30:05,060 --> 00:30:07,120
 Jadi saya kira titik pulang untuk ini 

710
00:30:07,120 --> 00:30:12,666
 adalah bahwa jenis sanitasi konten berfungsi. 

711
00:30:12,666 --> 00:30:14,290
 Jadi secara harfiah lebih baik daripada tidak sama sekali. 

712
00:30:14,290 --> 00:30:17,240
 Itu benar-benar dapat menangkap banyak kasus. 

713
00:30:17,240 --> 00:30:21,140
 Namun dalam banyak kasus, itu bukan pertahanan penuh. 

714
00:30:21,140 --> 00:30:23,970
 Dan satu hal yang mungkin benar-benar Anda pikirkan untuk dilakukan 

715
00:30:23,970 --> 00:30:28,200
 is-- sebenarnya, mari letakkan ini di sini. 

716
00:30:28,200 --> 00:30:36,808
 Anda mungkin berpikir tentang penggunaan markup yang kurang ekspresif 

717
00:30:36,808 --> 00:30:37,308
 bahasa. 

718
00:30:37,308 --> 00:30:41,140


719
00:30:41,140 --> 00:30:42,540
 Jadi apa yang saya maksud dengan itu? 

720
00:30:42,540 --> 00:30:47,200
 Jadi HTML dan CSS dan JavaScript adalah [? touring?] selesai. 

721
00:30:47,200 --> 00:30:49,721
 Mereka memungkinkan Anda melakukan semua hal yang menyenangkan, tapi-- ya? 

722
00:30:49,721 --> 00:30:50,970
 AUDIENCE: Maaf mengganggu Anda. 

723
00:30:50,970 --> 00:30:54,151
 Kapan sanitasi konten tidak berfungsi? 

724
00:30:54,151 --> 00:30:55,400
 PROFESOR: Kapan konten-- 

725
00:30:55,400 --> 00:30:57,140
 AUDIENCE: Dalam banyak kasus, itu tidak berhasil. 

726
00:30:57,140 --> 00:30:57,610
 PROFESOR: Oh ya. 

727
00:30:57,610 --> 00:30:59,200
 Jadi seperti dalam hal ini, misalnya, 

728
00:30:59,200 --> 00:31:01,630
 Django mungkin tidak akan dapat menentukan secara statis 

729
00:31:01,630 --> 00:31:03,730
 ini adalah hal yang buruk. 

730
00:31:03,730 --> 00:31:04,980
 Seperti, dalam kasus khusus ini. 

731
00:31:04,980 --> 00:31:09,450
 Tetapi dalam kasus di mana saya memasukkan tag gambar yang salah itu-- 

732
00:31:09,450 --> 00:31:10,374
 Saya pada dasarnya berkata-- 

733
00:31:10,374 --> 00:31:11,790
 AUDIENCE: Dalam kasus itu, 

734
00:31:11,790 --> 00:31:14,100
 Saya berharap kelas = tugas menjadi 

735
00:31:14,100 --> 00:31:17,600
 dalam tanda kutip dan kemudian untuk itu tidak memiliki efek apa pun. 

736
00:31:17,600 --> 00:31:20,830
 Jadi Django bisa menegakkan kode yang [tidak terdengar]. 

737
00:31:20,830 --> 00:31:23,330
 PROFESOR: Nah, lihat, ada sedikit trickiness di sana, 

738
00:31:23,330 --> 00:31:28,000
 karena jika kita berasumsi bahwa semua halaman ditulis-- baik, 

739
00:31:28,000 --> 00:31:29,380
 tarik aku mundur sedikit. 

740
00:31:29,380 --> 00:31:32,010
 Jika kita menganggap tata bahasa HTML telah ditentukan dengan baik 

741
00:31:32,010 --> 00:31:35,080
 dan tata bahasa CSS ditentukan dengan baik 

742
00:31:35,080 --> 00:31:36,920
 dan seterusnya dan seterusnya, maka Anda bisa 

743
00:31:36,920 --> 00:31:39,620
 bayangkan dunia di mana parser sempurna akan 

744
00:31:39,620 --> 00:31:42,060
 dapat mengurutkan menangkap masalah ini 

745
00:31:42,060 --> 00:31:44,490
 atau entah bagaimana mengubahnya menjadi hal-hal normal. 

746
00:31:44,490 --> 00:31:46,940
 Namun pada kenyataannya, tata bahasa HTML dan tata bahasa CSS 

747
00:31:46,940 --> 00:31:48,860
 tidak ditentukan dengan baik. 

748
00:31:48,860 --> 00:31:52,930
 Dan kemudian di atas itu, browser tidak mengimplementasikan spesifikasi. 

749
00:31:52,930 --> 00:31:55,010
 Jadi seperti boneka boneka Babushka. 

750
00:31:55,010 --> 00:31:57,219
 Jadi maksud saya, ini, pada kenyataannya, masuk ke gagasan ini di sini. 

751
00:31:57,219 --> 00:31:59,135
 Karena saya pikir pada dasarnya apa yang Anda katakan 

752
00:31:59,135 --> 00:32:01,650
 adalah, baik, lihat, jika kita memiliki tata bahasa untuk sesuatu, 

753
00:32:01,650 --> 00:32:03,420
 itu seharusnya berarti sesuatu. 

754
00:32:03,420 --> 00:32:05,220
 Dan ternyata, jika Anda tetap 

755
00:32:05,220 --> 00:32:09,346
 untuk tata bahasa yang kurang ekspresif, maka sebenarnya jauh lebih mudah 

756
00:32:09,346 --> 00:32:10,470
 untuk melakukan sanitasi konten. 

757
00:32:10,470 --> 00:32:13,704


758
00:32:13,704 --> 00:32:14,620
 Ada beberapa bahasa. 

759
00:32:14,620 --> 00:32:20,740
 Ini disebut Penurunan harga, bukan markup. 

760
00:32:20,740 --> 00:32:21,550
 [? Dinding,?] Kan? 

761
00:32:21,550 --> 00:32:24,310
 Dan dengan Markdown, ide dasarnya 

762
00:32:24,310 --> 00:32:27,100
 adalah bahwa itu dirancang untuk menjadi bahasa itu 

763
00:32:27,100 --> 00:32:29,750
 memungkinkan, misalnya, pengguna untuk mengirimkan komentar, 

764
00:32:29,750 --> 00:32:32,415
 tetapi sebenarnya tidak memiliki hal-hal seperti tag kosong, 

765
00:32:32,415 --> 00:32:34,530
 dan dukungan applet, dan hal-hal seperti itu. 

766
00:32:34,530 --> 00:32:36,700
 Dan di Markdown, sebenarnya jauh lebih mudah 

767
00:32:36,700 --> 00:32:39,360
 untuk melakukan apa yang Anda sarankan, yang sepertinya hal yang wajar 

768
00:32:39,360 --> 00:32:40,910
 pada pandangan pertama. 

769
00:32:40,910 --> 00:32:43,580
 Cukup definisikan grammar dengan jelas dan kemudian 

770
00:32:43,580 --> 00:32:45,880
 menegakkan tata bahasa itu. 

771
00:32:45,880 --> 00:32:47,930
 Jadi jauh lebih mudah melakukan sanitasi 

772
00:32:47,930 --> 00:32:52,410
 dalam bahasa yang sederhana daripada di HTML, CSS, 

773
00:32:52,410 --> 00:32:53,035
 dan JavaScript. 

774
00:32:53,035 --> 00:32:54,630
 Dan dalam arti tertentu, pikirkan tentang itu 

775
00:32:54,630 --> 00:32:57,680
 seperti perbedaan antara pemahaman degil C 

776
00:32:57,680 --> 00:33:00,110
 kode dibandingkan kode Python gnarly. 

777
00:33:00,110 --> 00:33:01,710
 Sebenarnya ada perbedaan besar 

778
00:33:01,710 --> 00:33:04,820
 dalam mencoba memahami bahasa yang jauh lebih ekspresif. 

779
00:33:04,820 --> 00:33:06,670
 Karena itu bisa melakukan lebih banyak hal. 

780
00:33:06,670 --> 00:33:09,427
 Dengan membatasi ekspresivitas, Anda seringkali 

781
00:33:09,427 --> 00:33:10,135
 meningkatkan keamanan. 

782
00:33:10,135 --> 00:33:12,779


783
00:33:12,779 --> 00:33:13,820
 Apakah itu semua masuk akal? 

784
00:33:13,820 --> 00:33:17,440


785
00:33:17,440 --> 00:33:17,940
 Baiklah. 

786
00:33:17,940 --> 00:33:19,900
 Jadi, hal lain yang dapat Anda bayangkan 

787
00:33:19,900 --> 00:33:24,270
 lakukan untuk melindungi terhadap serangan skrip lintas situs 

788
00:33:24,270 --> 00:33:31,040
 adalah menggunakan sesuatu yang disebut CSP, Kebijakan Keamanan Konten. 

789
00:33:31,040 --> 00:33:36,750


790
00:33:36,750 --> 00:33:40,560
 Dan gagasan di balik CSP adalah bahwa itu akan terjadi 

791
00:33:40,560 --> 00:33:43,295
 untuk memungkinkan server web untuk-- oh. 

792
00:33:43,295 --> 00:33:45,878
 AUDIENCE: Ya, saya hanya ingin tahu tentang bahasa Markdown ini. 

793
00:33:45,878 --> 00:33:50,864
 Jadi semua browser tahu bagaimana mem-parsing bahasa ini? 

794
00:33:50,864 --> 00:33:51,780
 PROFESOR: Tidak, tidak, tidak. 

795
00:33:51,780 --> 00:33:54,030
 Jadi apa yang terjadi dengan banyak jenis bahasa ini 

796
00:33:54,030 --> 00:33:56,640
 adalah bahwa Anda pada dasarnya - Anda dapat mengubahnya. 

797
00:33:56,640 --> 00:34:00,080
 Anda dapat menumpuknya ke HTML, tetapi mereka tidak secara asli 

798
00:34:00,080 --> 00:34:02,700
 dipahami oleh browser, biasanya. 

799
00:34:02,700 --> 00:34:09,120
 Jadi dengan kata lain, Anda punya sistem pengajuan komentar. 

800
00:34:09,120 --> 00:34:11,840
 Secara internal mengungkapkan hal-hal di Markdown. 

801
00:34:11,840 --> 00:34:13,819
 Tapi sebelum itu bisa ditampilkan ke halaman, 

802
00:34:13,819 --> 00:34:16,224
 pada dasarnya pergi ke kompilator Markdown. 

803
00:34:16,224 --> 00:34:18,264
 Compiler Markdown kemudian menerjemahkannya ke HTML. 

804
00:34:18,264 --> 00:34:19,016
 AUDIENCE: Saya melihat. 

805
00:34:19,016 --> 00:34:20,507
 Terima kasih. 

806
00:34:20,507 --> 00:34:23,724
 [TIDAK JELAS] Penurunan harga mungkin tidak 

807
00:34:23,725 --> 00:34:25,300
 trik terbaik [? menggunakan Markdown?] 

808
00:34:25,300 --> 00:34:26,934
 [TIDAK JELAS]. 

809
00:34:26,934 --> 00:34:28,850
 PROFESOR: Jadi Penurunan harga memungkinkan HTML sebaris. 

810
00:34:28,850 --> 00:34:30,750
 Sejauh yang saya tahu, ada cara untuk menonaktifkannya 

811
00:34:30,750 --> 00:34:31,844
 yang ada di compiler. 

812
00:34:31,844 --> 00:34:33,010
 Saya bisa salah tentang itu. 

813
00:34:33,010 --> 00:34:34,594
 Tapi saya yakin ada bendera 

814
00:34:34,594 --> 00:34:36,789
 Anda dapat lulus untuk menyingkirkannya. 

815
00:34:36,790 --> 00:34:37,770
 Tapi kamu benar. 

816
00:34:37,770 --> 00:34:39,565
 Jika Anda menggunakan bahasa yang terbatas 

817
00:34:39,565 --> 00:34:42,380
 tetapi kemudian Anda menanamkan bahasa yang tidak dibatasi, 

818
00:34:42,380 --> 00:34:44,219
 maka itu-- maksud saya, para teroris telah menang. 

819
00:34:44,219 --> 00:34:47,360
 Jadi kamu benar tentang itu. 

820
00:34:47,360 --> 00:34:47,900
 BAIK. 

821
00:34:47,900 --> 00:34:48,400
 Ya. 

822
00:34:48,400 --> 00:34:51,480
 Jadi, hal lain yang dapat Anda lakukan untuk meningkatkan keamanan 

823
00:34:51,480 --> 00:34:53,550
 hal ini disebut Kebijakan Keamanan Konten. 

824
00:34:53,550 --> 00:34:57,230
 Jadi seperti yang saya katakan, apa ini memungkinkan server untuk melakukannya 

825
00:34:57,230 --> 00:35:01,140
 adalah memberi tahu browser web jenis konten apa 

826
00:35:01,140 --> 00:35:03,470
 dapat dimuat di halaman yang dikirim kembali, 

827
00:35:03,470 --> 00:35:06,510
 dan juga dari mana konten itu seharusnya berasal. 

828
00:35:06,510 --> 00:35:10,270
 Jadi misalnya, dalam respons HTTP, 

829
00:35:10,270 --> 00:35:14,060
 server mungkin bisa mengatakan sesuatu seperti ini. 

830
00:35:14,060 --> 00:35:20,640
 Ini termasuk header Kebijakan Keamanan Konten. 

831
00:35:20,640 --> 00:35:26,390
 Dan kemudian mungkin mengatakan sesuatu seperti default 

832
00:35:26,390 --> 00:35:31,220
 sumber akan menyamai diri. 

833
00:35:31,220 --> 00:35:34,811


834
00:35:34,811 --> 00:35:39,250
 Dan itu juga akan menerima hal-hal dari asterisk mydomain.com. 

835
00:35:39,250 --> 00:35:43,270


836
00:35:43,270 --> 00:35:45,860
 Jadi apa artinya ini? 

837
00:35:45,860 --> 00:35:50,300
 Jadi intinya, server mengatakan konten 

838
00:35:50,300 --> 00:35:52,680
 dari situs ini seharusnya hanya berasal dari apa saja 

839
00:35:52,680 --> 00:35:56,250
 itu adalah bahwa domain adalah untuk halaman tertentu. 

840
00:35:56,250 --> 00:36:01,210
 Dan subdomain lainnya dari mydomain.com. 

841
00:36:01,210 --> 00:36:02,640
 Jadi apa artinya itu, pada dasarnya 

842
00:36:02,640 --> 00:36:07,745
 yang katakanlah jika diri terikat ke foo.com, 

843
00:36:07,745 --> 00:36:11,039
 katakanlah, itulah asal dari server yang mengirim 

844
00:36:11,039 --> 00:36:12,330
 hal ini kembali ke browser. 

845
00:36:12,330 --> 00:36:14,540
 Jadi, jika, entah bagaimana, ada scripting lintas situs 

846
00:36:14,540 --> 00:36:17,325
 serangan dan halaman mencoba menghasilkan referensi ke, 

847
00:36:17,325 --> 00:36:19,490
 katakanlah, bar.com, browser akan berkata, 

848
00:36:19,490 --> 00:36:21,960
 OK, bar.com bukan diri. 

849
00:36:21,960 --> 00:36:25,695
 Bar.com juga bukan dalam kumpulan domain semacam ini. 

850
00:36:25,695 --> 00:36:27,320
 Jadi oleh karena itu, peramban bisa mengatakan, 

851
00:36:27,320 --> 00:36:31,390
 Saya tidak akan mengijinkan permintaan itu untuk maju. 

852
00:36:31,390 --> 00:36:33,960
 Jadi ini sebenarnya mekanisme yang cukup kuat. 

853
00:36:33,960 --> 00:36:36,450
 Dan Anda benar-benar dapat menentukan kontrol yang lebih halus 

854
00:36:36,450 --> 00:36:36,950
 sini. 

855
00:36:36,950 --> 00:36:39,880
 Anda bisa mengatakan, gambar saya harus berasal dari sini. 

856
00:36:39,880 --> 00:36:42,700
 Skrip saya harus datang dari sini, seterusnya, dan seterusnya. 

857
00:36:42,700 --> 00:36:45,150
 Ini sebenarnya cukup bagus. 

858
00:36:45,150 --> 00:36:46,610
 Dan satu hal yang menyenangkan tentang ini juga, 

859
00:36:46,610 --> 00:36:50,440
 adalah itu benar-benar mencegah JavaScript sebaris. 

860
00:36:50,440 --> 00:36:53,856
 Jadi Anda tidak dapat memiliki tag skrip dan kemudian beberapa JavaScript literal 

861
00:36:53,856 --> 00:36:54,730
 dan tutup tag skrip. 

862
00:36:54,730 --> 00:36:57,350
 Semuanya harus berasal dari tag skrip dengan sumber. 

863
00:36:57,350 --> 00:36:59,850
 Jadi itu bisa divalidasi melalui ini. 

864
00:36:59,850 --> 00:37:02,150
 Dan juga, Kebijakan Keamanan Konten 

865
00:37:02,150 --> 00:37:05,230
 mencegah pernyataan bahaya ini seperti eval. 

866
00:37:05,230 --> 00:37:06,840
 Jadi eval pada dasarnya memungkinkan halaman web 

867
00:37:06,840 --> 00:37:09,200
 untuk memeriksa kode JavaScript yang dihasilkan secara dinamis. 

868
00:37:09,200 --> 00:37:13,070
 Dan jadi jika header CSP ditentukan, 

869
00:37:13,070 --> 00:37:17,720
 browser tidak mengeksekusi eval. 

870
00:37:17,720 --> 00:37:19,358
 Jadi apakah itu semua masuk akal? 

871
00:37:19,358 --> 00:37:21,848
 AUDIENCE: Jadi karena itu semacam hal-hal ad-hoc hal, 

872
00:37:21,848 --> 00:37:26,247
 apakah itu seperangkat hal lengkap yang [tidak terdengar]? 

873
00:37:26,247 --> 00:37:26,830
 PROFESOR: Tidak. 

874
00:37:26,830 --> 00:37:29,490
 Jadi ada daftar seluruh sumber daya 

875
00:37:29,490 --> 00:37:31,100
 yang sebenarnya melindungi. 

876
00:37:31,100 --> 00:37:34,057
 Jadi ini semacam perlindungan tipe selimut yang paling banyak 

877
00:37:34,057 --> 00:37:34,640
 kamu bisa mendapatkan. 

878
00:37:34,640 --> 00:37:36,000
 Tapi seperti saya katakan, itu benar-benar memungkinkan 

879
00:37:36,000 --> 00:37:38,230
 Anda untuk menentukan, saya pikir, seperti, di mana CSS dapat berasal, 

880
00:37:38,230 --> 00:37:39,586
 seperti banyak hal yang berbeda. 

881
00:37:39,586 --> 00:37:41,404
 AUDIENCE: Tapi tentang mencegah eval, sepertinya 

882
00:37:41,404 --> 00:37:42,654
 seperti sistem [tidak terdengar]. 

883
00:37:42,654 --> 00:37:45,050
 Apakah ada hal-hal lain [TIDAK JELAS]? 

884
00:37:45,050 --> 00:37:46,540
 PROFESOR: Jadi ya, ada. 

885
00:37:46,540 --> 00:37:48,540
 Jadi selalu ada pertanyaan tentang kelengkapan ini. 

886
00:37:48,540 --> 00:37:51,580


887
00:37:51,580 --> 00:37:53,610
 Jadi misalnya, eval bukan satu-satunya cara 

888
00:37:53,610 --> 00:37:56,240
 JavaScript benar-benar dapat menghasilkan kode secara dinamis. 

889
00:37:56,240 --> 00:37:58,250
 Ada konstruktor fungsi, misalnya. 

890
00:37:58,250 --> 00:38:00,250
 Ada cara-cara tertentu yang dapat Anda sebut batas waktu yang ditetapkan. 

891
00:38:00,250 --> 00:38:01,270
 Anda lulus dalam string. 

892
00:38:01,270 --> 00:38:03,000
 Anda dapat mengevaluasi kode dengan cara itu. 

893
00:38:03,000 --> 00:38:05,590
 Jadi saya percaya bahwa CSP benar-benar mematikan vektor-vektor itu 

894
00:38:05,590 --> 00:38:06,410
 demikian juga. 

895
00:38:06,410 --> 00:38:09,580
 Tetapi jika Anda bertanya, apakah ini benar-benar lengkap 

896
00:38:09,580 --> 00:38:11,746
 dari apa yang mengisolasi, tidak. 

897
00:38:11,746 --> 00:38:13,620
 Dan saya tidak berpikir ada solusi ini 

898
00:38:13,620 --> 00:38:16,830
 sudah terbukti selesai. 

899
00:38:16,830 --> 00:38:18,830
 AUDIENCE: Satu hal yang sangat menarik tentang CSP 

900
00:38:18,830 --> 00:38:21,860
 adalah kenyataan bahwa Anda dapat mengaturnya untuk melarang semua inline 

901
00:38:21,860 --> 00:38:23,194
 [? dom?] skrip pada halaman. 

902
00:38:23,194 --> 00:38:23,860
 PROFESOR: Ya. 

903
00:38:23,860 --> 00:38:24,401
 Betul. 

904
00:38:24,401 --> 00:38:24,901
 Ya, ya. 

905
00:38:24,901 --> 00:38:27,234
 AUDIENCE: Yang mana [? membantu?] [TIDAK JELAS] untuk disanitasi. 

906
00:38:27,234 --> 00:38:27,910
 PROFESOR: Ya. 

907
00:38:27,910 --> 00:38:32,410
 AUDIENCE: [INAUDIBLE] mencegah penyerang dari-- 

908
00:38:32,410 --> 00:38:34,160
 PROFESOR: Jadi itu membantu dengan beberapa hal. 

909
00:38:34,160 --> 00:38:38,400
 Tapi itu tetap akan memungkinkan, seperti, [TIDAK JELAS] untuk menggunakan eval. 

910
00:38:38,400 --> 00:38:40,530
 Jadi itulah mengapa penting untuk mencoba menyingkirkannya 

911
00:38:40,530 --> 00:38:42,340
 dari semua itu secara dinamis. 

912
00:38:42,340 --> 00:38:44,102
 Semua antarmuka itu [? menggunakan dinamika?] 

913
00:38:44,102 --> 00:38:44,829
 pembuatan kode. 

914
00:38:44,829 --> 00:38:47,245
 AUDIENCE: Jika Anda daftar tag Anda dengan sumber tetapi kemudian juga 

915
00:38:47,245 --> 00:38:50,260
 kode inline, apakah ada seperti standar [tidak terdengar] itu 

916
00:38:50,260 --> 00:38:52,764
 semua browser lakukan dengan-- 

917
00:38:52,764 --> 00:38:53,430
 PROFESOR: Ya. 

918
00:38:53,430 --> 00:38:57,960
 Jadi yang seharusnya terjadi adalah kode inline 

919
00:38:57,960 --> 00:39:00,320
 harus diabaikan. 

920
00:39:00,320 --> 00:39:02,660
 Browser harus selalu mendapatkan kode 

921
00:39:02,660 --> 00:39:03,940
 dari atribut sumber. 

922
00:39:03,940 --> 00:39:06,290
 Saya sebenarnya tidak tahu apakah semua browser melakukan itu. 

923
00:39:06,290 --> 00:39:07,850
 Saya sebenarnya pernah mengalami sendiri 

924
00:39:07,850 --> 00:39:10,490
 browser menunjukkan perilaku yang berbeda [? karena. ?] 

925
00:39:10,490 --> 00:39:14,280
 Ini beberapa tahun yang lalu, jadi saya tidak yakin. 

926
00:39:14,280 --> 00:39:14,780
 Dan ya. 

927
00:39:14,780 --> 00:39:17,840
 Jadi satu hal yang perlu diingat tentang melakukan pekerjaan 

928
00:39:17,840 --> 00:39:19,780
 dalam keamanan web adalah dalam arti tertentu, 

929
00:39:19,780 --> 00:39:21,450
 ini hampir seperti ilmu alam. 

930
00:39:21,450 --> 00:39:24,180
 Jadi itu seperti orang-orang yang benar-benar mengusulkan teori 

931
00:39:24,180 --> 00:39:25,390
 tentang cara kerja browser. 

932
00:39:25,390 --> 00:39:26,914
 Dan kemudian Anda pergi melihat mereka melakukan itu. 

933
00:39:26,914 --> 00:39:28,830
 Dan itu bisa sedikit mengecewakan, 

934
00:39:28,830 --> 00:39:31,790
 karena kami diajarkan, yay, algoritme, dan bukti, 

935
00:39:31,790 --> 00:39:32,660
 dan hal-hal seperti itu. 

936
00:39:32,660 --> 00:39:35,940
 Tapi peramban ini sangat tidak berperilaku buruk 

937
00:39:35,940 --> 00:39:39,440
 kali, jawabannya mungkin atau mungkin tidak. 

938
00:39:39,440 --> 00:39:42,140
 Lalu [? Anda pergi?] lihat, seperti yang akan kita lihat. 

939
00:39:42,140 --> 00:39:43,390
 Mereka terus menambahkan fitur. 

940
00:39:43,390 --> 00:39:44,890
 Ini kembali ke pertanyaan Anda tentang, 

941
00:39:44,890 --> 00:39:47,530
 Apakah hal-hal ini terbukti lengkap? 

942
00:39:47,530 --> 00:39:52,260
 Saya pikir vendor web telah mengesampingkan gagasan penciptaan ini 

943
00:39:52,260 --> 00:39:54,840
 browser yang terbukti [TIDAK JELAS]. 

944
00:39:54,840 --> 00:39:56,345
 Pada dasarnya, apa yang mereka coba lakukan adalah 

945
00:39:56,345 --> 00:39:58,386
 cobalah untuk tetap selangkah lebih maju dari para penyerang. 

946
00:39:58,386 --> 00:40:00,944
 Dan kita akan melihat beberapa contoh lebih lanjut dalam ceramah. 

947
00:40:00,944 --> 00:40:01,828
 Jadi ya. 

948
00:40:01,828 --> 00:40:04,310
 Jadi CSP sebenarnya cukup keren. 

949
00:40:04,310 --> 00:40:09,920
 Hal lain yang berguna adalah server dapat mengatur ini 

950
00:40:09,920 --> 00:40:16,500
 Header HTTP disebut X-Content-Type-Options, 

951
00:40:16,500 --> 00:40:19,266
 dan kemudian bisa berkata, nosniff. 

952
00:40:19,266 --> 00:40:23,395
 Dan apa artinya ini adalah bahwa ini mencegah browser 

953
00:40:23,395 --> 00:40:26,570
 melakukan beberapa dari mereka, kutipan, tanda kutip, optimasi bermanfaat, 

954
00:40:26,570 --> 00:40:29,595
 seperti kita bahas kuliah terakhir, di mana ia akan mengatakan, a-ha, 

955
00:40:29,595 --> 00:40:31,936
 ada ketidakcocokan antara ekstensi file 

956
00:40:31,936 --> 00:40:34,560
 dan yang sebenarnya [? bytes?] yang saya hirup di isi. 

957
00:40:34,560 --> 00:40:35,660
 Jadi biarkan saya memijat konten ini 

958
00:40:35,660 --> 00:40:37,120
 untuk beberapa hal berbeda. 

959
00:40:37,120 --> 00:40:39,996
 Dan kemudian tiba-tiba, Anda memberi kunci barbar 

960
00:40:39,996 --> 00:40:40,620
 ke kerajaan. 

961
00:40:40,620 --> 00:40:42,453
 Jadi Anda dapat mengatur tajuk ini pada dasarnya mengatakan, 

962
00:40:42,453 --> 00:40:43,555
 browser, jangan lakukan itu. 

963
00:40:43,555 --> 00:40:45,180
 Dan agar bisa bermanfaat dalam mitigasi 

964
00:40:45,180 --> 00:40:48,430
 beberapa jenis serangan juga. 

965
00:40:48,430 --> 00:40:48,930
 Baiklah. 

966
00:40:48,930 --> 00:40:51,850
 Jadi itu semacam survei singkat untuk beberapa orang 

967
00:40:51,850 --> 00:40:55,352
 kerentanan skrip lintas situs ini. 

968
00:40:55,352 --> 00:41:03,030
 Jadi sekarang mari kita lihat vektor populer lainnya untuk serangan. 

969
00:41:03,030 --> 00:41:08,524
 Dan vektor itu akan menjadi SQL. 

970
00:41:08,524 --> 00:41:15,440
 Dan Anda mungkin pernah mendengar tentang serangan injeksi SQL ini. 

971
00:41:15,440 --> 00:41:19,910
 Dan apa yang dilakukan serangan-serangan ini adalah mereka mengambil keuntungan dari fakta itu 

972
00:41:19,910 --> 00:41:22,720
 bahwa di bagian belakang, untuk banyak situs web, 

973
00:41:22,720 --> 00:41:24,295
 ada beberapa jenis basis data. 

974
00:41:24,295 --> 00:41:26,170
 Dan untuk membangun halaman itu secara dinamis 

975
00:41:26,170 --> 00:41:27,720
 ditunjukkan kepada pengguna, harus ada 

976
00:41:27,720 --> 00:41:31,190
 beberapa kueri basis data yang dikeluarkan ke server back-end itu. 

977
00:41:31,190 --> 00:41:37,370
 Jadi bayangkan Anda memiliki pertanyaan yang tampak seperti ini. 

978
00:41:37,370 --> 00:41:41,850
 Jadi Anda melakukan asterik SELECT. 

979
00:41:41,850 --> 00:41:45,600
 Jadi berikan saya semua nilai dari query ini FROM 

980
00:41:45,600 --> 00:41:58,970
 beberapa tabel tertentu, DI MANA field ID Pengguna 

981
00:41:58,970 --> 00:42:07,820
 sama dengan sesuatu yang ditentukan 

982
00:42:07,820 --> 00:42:13,986
 melalui web dari beberapa sumber yang tidak tepercaya. 

983
00:42:13,986 --> 00:42:16,680
 Jadi pada titik ini, saya mungkin berpikir kita semua tahu bagaimana kisah ini berakhir. 

984
00:42:16,680 --> 00:42:18,430
 Itu berakhir sangat buruk. Tidak ada yang selamat. 

985
00:42:18,430 --> 00:42:20,990
 Jadi pada dasarnya, jika ini berasal dari seseorang yang tidak dipercaya, 

986
00:42:20,990 --> 00:42:23,780
 maka Anda dapat melakukan semua jenis [? chicaner?] barang di sini. 

987
00:42:23,780 --> 00:42:27,380
 Jadi satu hal yang dapat Anda lakukan adalah jika Anda ingin menjadi brengsek, 

988
00:42:27,380 --> 00:42:32,520
 Anda hanya bisa mengatur ini ke string, 0 

989
00:42:32,520 --> 00:42:36,070
 dan kemudian sesuatu seperti DELETE TABLE. 

990
00:42:36,070 --> 00:42:41,330


991
00:42:41,330 --> 00:42:42,270
 Jadi apa yang terjadi di sini? 

992
00:42:42,270 --> 00:42:44,575
 Jadi pada dasarnya, server database akan mengatakan, 

993
00:42:44,575 --> 00:42:48,249
 OK, saya akan menetapkan ID pengguna ke 0 ;. 

994
00:42:48,249 --> 00:42:49,540
 Ini semacam perintah baru. 

995
00:42:49,540 --> 00:42:50,320
 HAPUS TABEL. 

996
00:42:50,320 --> 00:42:52,114
 Oke, tepuk tangan, begitulah meja Anda. 

997
00:42:52,114 --> 00:42:52,780
 Dan selesai. 

998
00:42:52,780 --> 00:42:54,320
 Dan faktanya, ada gambaran viral itu 

999
00:42:54,320 --> 00:42:55,410
 pergi sekitar beberapa tahun yang lalu. 

1000
00:42:55,410 --> 00:42:56,993
 Tidak jelas apakah itu benar, seperti banyak orang 

1001
00:42:56,993 --> 00:42:57,930
 dari gambar viral ini. 

1002
00:42:57,930 --> 00:42:59,750
 Tetapi orang-orang di Jerman 

1003
00:42:59,750 --> 00:43:03,830
 memiliki plat nomor yang benar-benar mengatakan 0; HAPUS TABEL. 

1004
00:43:03,830 --> 00:43:05,000
 [TAWA] 

1005
00:43:05,000 --> 00:43:07,460
 Karena idenya adalah kamera keamanan, 

1006
00:43:07,460 --> 00:43:11,160
 mereka akan menggunakan OCR, Pengenalan Karakter Optik, 

1007
00:43:11,160 --> 00:43:14,270
 untuk mencari tahu apa plat Anda, dan kemudian meletakkannya 

1008
00:43:14,270 --> 00:43:15,505
 dalam database SQL. 

1009
00:43:15,505 --> 00:43:17,365
 Dan ada banyak gambar yang beredar. 

1010
00:43:17,365 --> 00:43:19,250
 Volkswagen ini, orang-orang akan memilikinya 

1011
00:43:19,250 --> 00:43:21,586
 ini sebagai plat mereka. 

1012
00:43:21,586 --> 00:43:22,710
 Saya tidak tahu apakah itu berhasil. 

1013
00:43:22,710 --> 00:43:23,070
 Itu lucu. 

1014
00:43:23,070 --> 00:43:24,570
 Jadi saya suka percaya bahwa itu benar. 

1015
00:43:24,570 --> 00:43:26,036
 Tapi siapa yang tahu. 

1016
00:43:26,036 --> 00:43:27,660
 Tetapi Anda mendapatkan ide dasar di balik itu. 

1017
00:43:27,660 --> 00:43:29,860
 Jadi sekali lagi, ide yang Anda inginkan 

1018
00:43:29,860 --> 00:43:33,210
 pastikan untuk membersihkan konten yang Anda dapatkan ini 

1019
00:43:33,210 --> 00:43:35,880
 dari sumber yang tidak tepercaya ini. 

1020
00:43:35,880 --> 00:43:38,040
 Dan perhatikan bahwa mungkin ada semacamnya 

1021
00:43:38,040 --> 00:43:40,062
 hal-hal sederhana yang tidak cukup berhasil. 

1022
00:43:40,062 --> 00:43:41,603
 Jadi Anda mungkin berpikir, oke, kalau begitu mengapa 

1023
00:43:41,603 --> 00:43:46,720
 tidak bisa saya hanya menempatkan kutipan lain di sini dan kemudian 

1024
00:43:46,720 --> 00:43:49,650
 menaruh kutipan lain di sini sedemikian rupa sehingga apa pun 

1025
00:43:49,650 --> 00:43:52,490
 itu adalah penyerang yang tunduk, itu akan terjadi 

1026
00:43:52,490 --> 00:43:54,014
 diapit dalam sebuah string? 

1027
00:43:54,014 --> 00:43:56,430
 Jadi ini tidak berhasil, karena kemudian penyerang bisa selalu 

1028
00:43:56,430 --> 00:43:59,080
 masukkan kutipan di dalam string serangannya. 

1029
00:43:59,080 --> 00:44:02,150
 Jadi sering kali, ini semacam peretasan setengah hati 

1030
00:44:02,150 --> 00:44:04,680
 tidak benar-benar mendapatkan Anda keamanan yang Anda pikir mereka mungkin. 

1031
00:44:04,680 --> 00:44:10,470
 Jadi solusinya di sini adalah yang Anda butuhkan 

1032
00:44:10,470 --> 00:44:14,335
 untuk secara ketat menyandikan data Anda. 

1033
00:44:14,335 --> 00:44:19,420


1034
00:44:19,420 --> 00:44:23,640
 Dan sekali lagi, itu artinya ketika Anda mendapatkan informasi 

1035
00:44:23,640 --> 00:44:26,360
 dari sumber yang tidak tepercaya, jangan hanya menempelkannya 

1036
00:44:26,360 --> 00:44:29,420
 dalam sistem seperti apa adanya. 

1037
00:44:29,420 --> 00:44:32,300
 Pastikan bahwa, misalnya, itu bisa benar-benar 

1038
00:44:32,300 --> 00:44:34,880
 melarikan diri dari sandbox atau apa pun yang Anda pikirkan 

1039
00:44:34,880 --> 00:44:36,390
 Anda benar-benar dimasukkan ke dalam. 

1040
00:44:36,390 --> 00:44:40,750
 Jadi misalnya, Anda ingin memasukkan fungsi Escape itu 

1041
00:44:40,750 --> 00:44:42,360
 akan mencegah mungkin titik koma 

1042
00:44:42,360 --> 00:44:45,850
 operator dari muncul dalam bentuk mentah dan hal-hal seperti ini. 

1043
00:44:45,850 --> 00:44:47,350
 Dan begitu banyak kerangka web ini 

1044
00:44:47,350 --> 00:44:52,850
 seperti Django akan memiliki pustaka bawaan untuk melakukan berbagai hal 

1045
00:44:52,850 --> 00:44:54,770
 seperti karakter yang melarikan diri untuk kueri SQL 

1046
00:44:54,770 --> 00:44:56,600
 untuk mencoba mencegah beberapa hal ini. 

1047
00:44:56,600 --> 00:44:58,210
 Dan banyak dari kerangka kerja ini sebenarnya 

1048
00:44:58,210 --> 00:45:00,740
 mendorong pengembang agar tidak langsung antarmuka 

1049
00:45:00,740 --> 00:45:01,664
 dengan database. 

1050
00:45:01,664 --> 00:45:03,330
 Jadi seperti Django itu sendiri akan menyediakan 

1051
00:45:03,330 --> 00:45:06,280
 beberapa antarmuka tingkat tinggi yang melakukan sanitasi untuk Anda. 

1052
00:45:06,280 --> 00:45:10,160
 Ini mengurus beberapa kasus sudut yang menjijikkan ini. 

1053
00:45:10,160 --> 00:45:12,011
 Tetapi kinerja, kinerja, kinerja. 

1054
00:45:12,011 --> 00:45:14,010
 Terkadang orang berpikir bahwa kerangka web ini 

1055
00:45:14,010 --> 00:45:14,720
 terlalu lambat. 

1056
00:45:14,720 --> 00:45:16,928
 Jadi Anda masih akan melihat, di bagian belakang banyak waktu, 

1057
00:45:16,928 --> 00:45:20,590
 orang akan tetap membuat kueri SQL mentah ini. 

1058
00:45:20,590 --> 00:45:23,330
 Dan itu bisa menimbulkan masalah. 

1059
00:45:23,330 --> 00:45:25,050
 Jadi Anda juga bisa membayangkan itu di sana 

1060
00:45:25,050 --> 00:45:33,280
 adalah masalah jika server web mengambil nama jalur 

1061
00:45:33,280 --> 00:45:34,840
 dari gambar yang tidak dipercaya. 

1062
00:45:34,840 --> 00:45:38,430
 Jadi bayangkan bahwa di suatu tempat di server Anda, 

1063
00:45:38,430 --> 00:45:39,640
 kamu melakukan sesuatu seperti ini. 

1064
00:45:39,640 --> 00:45:40,644
 Anda memiliki panggilan terbuka. 

1065
00:45:40,644 --> 00:45:42,060
 Dan kemudian Anda mengatakan bahwa Anda akan pergi 

1066
00:45:42,060 --> 00:45:44,355
 untuk membaca dari direktori WWW. 

1067
00:45:44,355 --> 00:45:49,500
 Anda akan membaca dari subdirektori gambar di sana. 

1068
00:45:49,500 --> 00:45:54,020
 Dan kemudian Anda akan membaca dari beberapa nama file itu, sekali 

1069
00:45:54,020 --> 00:45:56,110
 lagi, disediakan oleh pengguna. 

1070
00:45:56,110 --> 00:45:59,700
 Jadi seperti yang kita lihat di beberapa diskusi tentang [? Troot?] 

1071
00:45:59,700 --> 00:46:03,270
 dan hal-hal seperti ini, bagaimana jika nama file ini memetakan 

1072
00:46:03,270 --> 00:46:08,475
 untuk sesuatu seperti sekumpulan contoh dot dot 

1073
00:46:08,475 --> 00:46:08,975
 karakter? 

1074
00:46:08,975 --> 00:46:13,830


1075
00:46:13,830 --> 00:46:17,610
 Jadi jika Anda tidak berhati-hati, maka entitas yang tidak dapat dipercaya 

1076
00:46:17,610 --> 00:46:20,984
 dapat menentukan pada dasarnya glub, glub, glub, glub, 

1077
00:46:20,984 --> 00:46:22,442
 dan turun ke kata sandi dll dan mungkin 

1078
00:46:22,442 --> 00:46:24,180
 dapat melakukan kejahatan di sini. 

1079
00:46:24,180 --> 00:46:26,950
 Jadi sekali lagi, jika Anda ingin dapat menggunakan web 

1080
00:46:26,950 --> 00:46:29,140
 server atau kerangka web, yang Anda butuhkan 

1081
00:46:29,140 --> 00:46:32,320
 untuk dapat mendeteksi karakter berbahaya ini, 

1082
00:46:32,320 --> 00:46:34,470
 melarikan diri dengan beberapa cara untuk mencegahnya 

1083
00:46:34,470 --> 00:46:38,150
 semacam itu perintah mentah dari mengeksekusi. 

1084
00:46:38,150 --> 00:46:40,300
 Jadi ya, itu semua sangat mudah. 

1085
00:46:40,300 --> 00:46:40,800
 BAIK. 

1086
00:46:40,800 --> 00:46:45,760
 Jadi mari kita lanjutkan dari diskusi konten 

1087
00:46:45,760 --> 00:46:49,310
 sanitasi, dan sekarang mari kita bicara sedikit tentang cookie. 

1088
00:46:49,310 --> 00:46:52,670


1089
00:46:52,670 --> 00:46:56,290
 Jadi cookie adalah cara yang sangat populer 

1090
00:46:56,290 --> 00:47:02,620
 untuk melakukan manajemen sesi, untuk mengikat 

1091
00:47:02,620 --> 00:47:07,920
 pengguna ke beberapa sumber daya 

1092
00:47:07,920 --> 00:47:10,086
 yang ada di sisi server. 

1093
00:47:10,086 --> 00:47:12,460
 Dan begitu banyak kerangka seperti Django, seperti [? zoobar?] 

1094
00:47:12,460 --> 00:47:15,300
 yang Anda lihat di kelas ini, sebenarnya 

1095
00:47:15,300 --> 00:47:17,520
 masukkan ID sesi acak di dalam cookie. 

1096
00:47:17,520 --> 00:47:23,630
 Jadi idenya adalah bahwa ID sesi ini adalah indeks 

1097
00:47:23,630 --> 00:47:27,770
 ke dalam beberapa tabel sisi server. 

1098
00:47:27,770 --> 00:47:30,410
 Jadi Anda hanya menyediakan ID sesi di sana. 

1099
00:47:30,410 --> 00:47:35,120
 Dan ini adalah tempat tinggal info pengguna Anda. 

1100
00:47:35,120 --> 00:47:40,690
 Dan sebagai hasilnya, ID sesi ini dan cookie, dengan ekstensi, 

1101
00:47:40,690 --> 00:47:43,034
 adalah entitas yang sangat sensitif. 

1102
00:47:43,034 --> 00:47:44,450
 Dan itulah sebabnya banyak sekali serangan 

1103
00:47:44,450 --> 00:47:46,860
 melibatkan mencuri cookie secara berurutan 

1104
00:47:46,860 --> 00:47:48,480
 untuk mendapatkan ID sesi itu. 

1105
00:47:48,480 --> 00:47:50,600
 Dan seperti yang kita diskusikan di kuliah terakhir, 

1106
00:47:50,600 --> 00:47:52,975
 kebijakan asal yang sama dapat membantu Anda, sampai batas tertentu, 

1107
00:47:52,975 --> 00:47:55,102
 terhadap beberapa serangan cookie-pencurian ini, 

1108
00:47:55,102 --> 00:47:56,810
 karena ada aturan yang berdasarkan asal itu 

1109
00:47:56,810 --> 00:48:00,050
 mencegah kerusakan sewenang-wenang dengan cookie. 

1110
00:48:00,050 --> 00:48:02,180
 Tapi satu hal yang sedikit halus 

1111
00:48:02,180 --> 00:48:07,000
 adalah Anda tidak boleh berbagi domain atau subdomain 

1112
00:48:07,000 --> 00:48:09,510
 dengan seseorang yang tidak kamu percayai. 

1113
00:48:09,510 --> 00:48:11,460
 Karena seperti yang kita diskusikan dalam kuliah terakhir, 

1114
00:48:11,460 --> 00:48:13,500
 ada semacam aturan yang sangat halus 

1115
00:48:13,500 --> 00:48:17,950
 di mana dua asal dengan domain yang sama atau mungkin 

1116
00:48:17,950 --> 00:48:20,500
 beberapa hubungan subdomain, mereka sebenarnya bisa 

1117
00:48:20,500 --> 00:48:22,540
 mengakses cookie masing-masing. 

1118
00:48:22,540 --> 00:48:25,130
 Dan jika Anda mempercayai domain yang tidak seharusnya Anda, 

1119
00:48:25,130 --> 00:48:28,020
 maka domain itu mungkin dapat melakukan hal-hal seperti langsung 

1120
00:48:28,020 --> 00:48:32,390
 atur ID sesi di cookie itu, Anda berdua 

1121
00:48:32,390 --> 00:48:33,680
 dapat mengakses. 

1122
00:48:33,680 --> 00:48:35,680
 Dan itu bisa melakukan hal-hal seperti memungkinkan penyerang 

1123
00:48:35,680 --> 00:48:38,330
 untuk memaksa pengguna menggunakan ID sesi penyerang 

1124
00:48:38,330 --> 00:48:39,540
 memilih. 

1125
00:48:39,540 --> 00:48:41,500
 Dan kemudian, misalnya-- katakanlah 

1126
00:48:41,500 --> 00:48:46,310
 penyerang mengatur cookie Gmail pengguna, katakanlah. 

1127
00:48:46,310 --> 00:48:48,680
 Pengguna masuk ke Gmail, mengetik beberapa email. 

1128
00:48:48,680 --> 00:48:51,030
 Penyerang, nanti, kemudian dapat menggunakan cookie itu 

1129
00:48:51,030 --> 00:48:53,780
 atau gunakan secara khusus ID sesi itu, 

1130
00:48:53,780 --> 00:48:55,870
 memuat Gmail, dan kemudian mengakses Gmail 

1131
00:48:55,870 --> 00:48:59,040
 seolah-olah dia adalah pengguna yang menjadi korban. 

1132
00:48:59,040 --> 00:49:02,070
 Jadi ada banyak seluk-beluk dengan menggunakan cookie ini 

1133
00:49:02,070 --> 00:49:03,720
 untuk manajemen sesi. 

1134
00:49:03,720 --> 00:49:06,490
 Jadi masih banyak lagi yang bisa kita bicarakan tentang kue. 

1135
00:49:06,490 --> 00:49:08,625
 Kami akan membahas beberapa hari ini dan kuliah terakhir. 

1136
00:49:08,625 --> 00:49:11,250
 Jadi Anda mungkin berpikir, bisakah kita menyingkirkan cookie? 

1137
00:49:11,250 --> 00:49:12,765
 Cookie sepertinya lebih bermasalah daripada mereka layak, 

1138
00:49:12,765 --> 00:49:15,431
 seperti [? dribbels. ?] Jadi bisakah kita tidak memiliki cookie ini? 

1139
00:49:15,431 --> 00:49:18,920
 Jadi satu hal yang dapat Anda bayangkan adalah Anda bisa membayangkan pada dasarnya 

1140
00:49:18,920 --> 00:49:25,570
 memiliki beberapa gagasan tentang cookie tanpa kewarganegaraan, 

1141
00:49:25,570 --> 00:49:29,445
 entah bagaimana menyingkirkan gagasan sesi sama sekali 

1142
00:49:29,445 --> 00:49:32,631
 dan mencegah vektor serangan jahat itu 

1143
00:49:32,631 --> 00:49:34,880
 tampaknya agak umum dalam semua diskusi ini 

1144
00:49:34,880 --> 00:49:35,750
 yang kita miliki. 

1145
00:49:35,750 --> 00:49:40,210
 Jadi ide dasarnya di sini adalah jika Anda ingin menjadi semacam negara tanpa kewarganegaraan, 

1146
00:49:40,210 --> 00:49:41,780
 maka ini pada dasarnya berarti Anda punya 

1147
00:49:41,780 --> 00:49:46,285
 untuk mengotentikasi setiap permintaan. 

1148
00:49:46,285 --> 00:49:51,060


1149
00:49:51,060 --> 00:49:52,560
 Karena hal yang menyenangkan tentang cookie 

1150
00:49:52,560 --> 00:49:54,820
 adalah bahwa mereka pada dasarnya mengikuti Anda ke manapun Anda pergi. 

1151
00:49:54,820 --> 00:49:56,352
 Jadi Anda mengotentikasi sekali, dan kemudian 

1152
00:49:56,352 --> 00:49:57,485
 setiap permintaan berikutnya yang Anda buat 

1153
00:49:57,485 --> 00:49:58,570
 memiliki token kecil di dalamnya. 

1154
00:49:58,570 --> 00:50:01,020
 Tetapi jika Anda ingin menyingkirkan hal-hal itu, baiklah sekarang 

1155
00:50:01,020 --> 00:50:03,394
 Anda pada dasarnya harus memiliki bukti otoritas Anda 

1156
00:50:03,394 --> 00:50:05,747
 di setiap permintaan yang Anda buat. 

1157
00:50:05,747 --> 00:50:07,330
 Dan satu cara yang bisa Anda bayangkan lakukan 

1158
00:50:07,330 --> 00:50:13,580
 ini dengan menggunakan sesuatu yang disebut MAX, atau Pesan 

1159
00:50:13,580 --> 00:50:14,600
 Kode otentikasi. 

1160
00:50:14,600 --> 00:50:18,550


1161
00:50:18,550 --> 00:50:23,020
 Dan cara dasar untuk berpikir tentang salah satu dari MAX ini, 

1162
00:50:23,020 --> 00:50:26,410
 itu seperti hash yang mengambil kunci juga. 

1163
00:50:26,410 --> 00:50:28,440
 Jadi kode otentikasi metode 

1164
00:50:28,440 --> 00:50:34,290
 adalah hash dari beberapa kunci dan kemudian beberapa pesan. 

1165
00:50:34,290 --> 00:50:39,410
 Dan ide dasarnya adalah bahwa klien, pengguna, 

1166
00:50:39,410 --> 00:50:43,206
 dan server akan membagikan beberapa kunci rahasia, k. 

1167
00:50:43,206 --> 00:50:48,060
 Maka klien menggunakan kunci itu untuk menghasilkan tanda tangan 

1168
00:50:48,060 --> 00:50:50,550
 atas pesan yang dikirimkan ke server. 

1169
00:50:50,550 --> 00:50:52,960
 Dan kemudian server, yang juga tahu kuncinya, 

1170
00:50:52,960 --> 00:50:55,710
 kemudian dapat menggunakan fungsi yang sama di sini 

1171
00:50:55,710 --> 00:50:58,090
 untuk memvalidasi jika tanda tangan sudah benar. 

1172
00:50:58,090 --> 00:50:58,590
 BAIK. 

1173
00:50:58,590 --> 00:51:03,650
 Jadi mari kita lihat contoh yang sangat spesifik tentang bagaimana ini bekerja. 

1174
00:51:03,650 --> 00:51:05,950
 Jadi satu layanan nyata yang menggunakan jenis ini 

1175
00:51:05,950 --> 00:51:09,740
 cookie tanpa status adalah Amazon Web Services. 

1176
00:51:09,740 --> 00:51:11,280
 Jadi seperti x3, misalnya. 

1177
00:51:11,280 --> 00:51:21,950
 Dan pada dasarnya, Amazon, AWS, memberi setiap pengguna dua hal-- 

1178
00:51:21,950 --> 00:51:25,530
 memberi pengguna kunci rahasia. 

1179
00:51:25,530 --> 00:51:28,950


1180
00:51:28,950 --> 00:51:31,890
 Dan ini setara dengan k 

1181
00:51:31,890 --> 00:51:33,420
 yang kami diskusikan di sana. 

1182
00:51:33,420 --> 00:51:37,320
 Dan itu juga memberi mereka - hanya memikirkannya 

1183
00:51:37,320 --> 00:51:40,120
 seperti ID pengguna AWS. 

1184
00:51:40,120 --> 00:51:42,840


1185
00:51:42,840 --> 00:51:45,700
 Jadi bagian ini bukan rahasia, tapi bagian ini. 

1186
00:51:45,700 --> 00:51:49,570
 Dan setiap kali Anda ingin mengirim permintaan ke AWS melalui HTTP, 

1187
00:51:49,570 --> 00:51:51,970
 Anda harus mengirimkannya dalam format khusus. 

1188
00:51:51,970 --> 00:51:57,040
 Jadi Anda akan memiliki baris pertama permintaan GET. 

1189
00:51:57,040 --> 00:52:04,680
 Jadi Anda ingin mengakses beberapa foto. 

1190
00:52:04,680 --> 00:52:07,800
 Tidak ada kejutan di sini. 

1191
00:52:07,800 --> 00:52:14,370
 Dan kemudian Anda akan menempatkan tuan rumah dari mana 

1192
00:52:14,370 --> 00:52:15,585
 Anda berharap mendapatkannya. 

1193
00:52:15,585 --> 00:52:16,710
 Itu tidak terlalu penting. 

1194
00:52:16,710 --> 00:52:19,731
 Jadi ini hanya beberapa server AWS yang ada di sana. 

1195
00:52:19,731 --> 00:52:20,605
 Anda akan memiliki tanggalnya. 

1196
00:52:20,605 --> 00:52:23,160


1197
00:52:23,160 --> 00:52:28,830
 Jadi mungkin ini hari Senin, 4 Juni. 

1198
00:52:28,830 --> 00:52:30,470
 Terserah. 

1199
00:52:30,470 --> 00:52:34,215
 Dan kemudian Anda memiliki benda ini pada dasarnya 

1200
00:52:34,215 --> 00:52:35,390
 bidang Otorisasi. 

1201
00:52:35,390 --> 00:52:38,300


1202
00:52:38,300 --> 00:52:41,620
 Dan ini adalah tempat kode autentikasi pesan masuk. 

1203
00:52:41,620 --> 00:52:47,520
 Jadi intinya, seperti apa ini 

1204
00:52:47,520 --> 00:52:51,660
 Anda punya beberapa string di sini. 

1205
00:52:51,660 --> 00:52:56,368
 Ini menunjukkan ID akses Anda, ID pengguna. 

1206
00:52:56,368 --> 00:52:59,510


1207
00:52:59,510 --> 00:53:03,530
 Dan kemudian Anda punya sesuatu di sini, 

1208
00:53:03,530 --> 00:53:07,470
 beberapa surat yang tampak acak lainnya. 

1209
00:53:07,470 --> 00:53:13,350
 Dan kemudian hal-hal ini adalah tanda tangan 

1210
00:53:13,350 --> 00:53:16,240
 yang menggunakan Kode Otentikasi Pesan ini di sini. 

1211
00:53:16,240 --> 00:53:20,730
 Jadi seperti apakah tanda tangan itu? 

1212
00:53:20,730 --> 00:53:24,250
 Jadi detailnya sedikit rumit. 

1213
00:53:24,250 --> 00:53:27,630
 Tapi pada dasarnya, tanda tangan ini sudah berakhir string 

1214
00:53:27,630 --> 00:53:30,110
 yang merangkum banyak detail dari permintaan ini. 

1215
00:53:30,110 --> 00:53:36,500
 Jadi pada dasarnya, string yang ditugaskan 

1216
00:53:36,500 --> 00:53:37,950
 terlihat seperti ini. 

1217
00:53:37,950 --> 00:53:43,360
 Jadi Anda memasukkan kata kerja HTTP di sana. 

1218
00:53:43,360 --> 00:53:47,280
 Jadi dalam hal ini, kata kerja itu adalah GET. 

1219
00:53:47,280 --> 00:53:53,376
 Dan kemudian Anda menaruh [? indy5?] checksum 

1220
00:53:53,376 --> 00:53:55,100
 dari isi pesan. 

1221
00:53:55,100 --> 00:53:57,612


1222
00:53:57,612 --> 00:54:01,335
 Dan kemudian Anda juga memasukkan tipe konten. 

1223
00:54:01,335 --> 00:54:03,760
 Jadi itu html atau gambar atau apa pun. 

1224
00:54:03,760 --> 00:54:04,835
 Dan masukkan tanggalnya. 

1225
00:54:04,835 --> 00:54:07,575


1226
00:54:07,575 --> 00:54:14,915
 Dan kemudian nama sumber daya, yang pada dasarnya adalah jalan 

1227
00:54:14,915 --> 00:54:16,180
 yang Anda lihat di sini. 

1228
00:54:16,180 --> 00:54:19,650
 Jadi dengan kata lain, string ini di sini 

1229
00:54:19,650 --> 00:54:26,620
 adalah pesan yang Anda berikan ke H MAC di sini. 

1230
00:54:26,620 --> 00:54:32,230
 Dan perhatikan bahwa server dapat melihat semua hal ini 

1231
00:54:32,230 --> 00:54:34,501
 dalam teks yang jelas dalam permintaan. 

1232
00:54:34,501 --> 00:54:36,000
 Dan itulah yang memungkinkan server 

1233
00:54:36,000 --> 00:54:38,270
 untuk memvalidasi otentikasi pesan itu 

1234
00:54:38,270 --> 00:54:39,850
 kode sudah benar. 

1235
00:54:39,850 --> 00:54:43,965
 Karena perhatikan bahwa server berbagi kunci itu dengan pengguna. 

1236
00:54:43,965 --> 00:54:46,340
 Sehingga memungkinkan server memvalidasi hal semacam itu. 

1237
00:54:46,340 --> 00:54:49,065
 Jadi apakah itu semua masuk akal? 

1238
00:54:49,065 --> 00:54:51,010
 AUDIENCE: [TIDAK JELAS]? 

1239
00:54:51,010 --> 00:54:51,770
 PROFESOR: Oh. 

1240
00:54:51,770 --> 00:54:53,145
 Jadi dalam hal ini, untuk kontennya, 

1241
00:54:53,145 --> 00:54:55,603
 itu mungkin tidak ada apa-apanya, seperti string kosong. 

1242
00:54:55,603 --> 00:54:58,670
 Tetapi Anda dapat membayangkan ada pos atau sesuatu seperti itu. 

1243
00:54:58,670 --> 00:55:00,900
 Anda sebenarnya memiliki data dari HTTP. 

1244
00:55:00,900 --> 00:55:04,170
 AUDIENCE: [INAUDIBLE] yang agak disayangkan 

1245
00:55:04,170 --> 00:55:05,130
 pilihan saat ini. 

1246
00:55:05,130 --> 00:55:07,060
 PROFESOR: Jadi saya yakin mereka melakukannya. 

1247
00:55:07,060 --> 00:55:10,194
 Jadi saya memeriksa dokumentasi Amazon kemarin. 

1248
00:55:10,194 --> 00:55:11,360
 Jadi saya percaya mereka menggunakannya. 

1249
00:55:11,360 --> 00:55:13,734
 Tapi saya pikir - saya bisa salah, tapi saya pikir mereka sebenarnya 

1250
00:55:13,734 --> 00:55:16,056
 gunakan hash yang lebih kuat di sini. 

1251
00:55:16,056 --> 00:55:17,180
 Jadi itu sedikit membantu. 

1252
00:55:17,180 --> 00:55:19,584
 Tapi kamu benar. [? Indy5?] Bukan yang terbaik. 

1253
00:55:19,584 --> 00:55:22,686
 AUDIENCE: [INAUDIBLE] ini berfungsi. 

1254
00:55:22,686 --> 00:55:23,380
 PROFESOR: OK. 

1255
00:55:23,380 --> 00:55:26,060
 Jadi izinkan saya untuk membantu Anda, semoga, 

1256
00:55:26,060 --> 00:55:27,824
 meskipun aku orang yang membuatmu bingung 

1257
00:55:27,824 --> 00:55:28,615
 di tempat pertama. 

1258
00:55:28,615 --> 00:55:32,180
 Jadi ide dasarnya adalah yang kita inginkan 

1259
00:55:32,180 --> 00:55:34,830
 untuk menyingkirkan gagasan tentang kue gigih ini 

1260
00:55:34,830 --> 00:55:37,100
 selalu mengikuti pengguna sekitar. 

1261
00:55:37,100 --> 00:55:39,125
 Sekarang, masalahnya, adalah servernya 

1262
00:55:39,125 --> 00:55:43,330
 membutuhkan beberapa cara untuk mengidentifikasi klien yang diajak bicara. 

1263
00:55:43,330 --> 00:55:44,930
 Jadi apa yang akan kita lakukan adalah kita 

1264
00:55:44,930 --> 00:55:49,160
 akan memastikan bahwa setiap klien berbagi 

1265
00:55:49,160 --> 00:55:52,470
 kunci unik dengan server. 

1266
00:55:52,470 --> 00:55:56,260
 Dan pada dasarnya, kapan pun klien mengirim pesan 

1267
00:55:56,260 --> 00:55:58,500
 ke server, klien akan pergi 

1268
00:55:58,500 --> 00:56:00,965
 untuk mengirim pesan sebelum dan kemudian juga mengirim 

1269
00:56:00,965 --> 00:56:03,340
 operasi kriptografi khusus ini, 

1270
00:56:03,340 --> 00:56:04,780
 hasil dari operasi ini di sini. 

1271
00:56:04,780 --> 00:56:08,394
 AUDIENCE: Oh, oke. [TIDAK JELAS] dan sekali lagi, Anda hash itu. 

1272
00:56:08,394 --> 00:56:09,060
 PROFESOR: Ya. 

1273
00:56:09,060 --> 00:56:11,280
 Jadi pada dasarnya, untuk perkiraan pertama, 

1274
00:56:11,280 --> 00:56:13,000
 seperti membayangkan di dunia biasa, 

1275
00:56:13,000 --> 00:56:14,932
 seperti, ini akan menjadi beberapa cookie di sini 

1276
00:56:14,932 --> 00:56:16,140
 bukannya otorisasi. 

1277
00:56:16,140 --> 00:56:18,556
 Tapi sekarang kita menyingkirkan cookie, dan kita katakan, 

1278
00:56:18,556 --> 00:56:20,060
 inilah pesan teks yang jelas ini. 

1279
00:56:20,060 --> 00:56:21,880
 Dan inilah hal kripto ini, 

1280
00:56:21,880 --> 00:56:24,160
 yang pada dasarnya memungkinkan server untuk mencari tahu 

1281
00:56:24,160 --> 00:56:25,990
 siapa ini berasal. 

1282
00:56:25,990 --> 00:56:30,460
 Jadi server tahu siapa pengguna itu, karena itu 

1283
00:56:30,460 --> 00:56:31,656
 tertanam dalam yang jelas. 

1284
00:56:31,656 --> 00:56:32,780
 Itu bukan rahasia, kan? 

1285
00:56:32,780 --> 00:56:34,490
 Tapi ini pada dasarnya memungkinkan server 

1286
00:56:34,490 --> 00:56:37,005
 untuk mengatakan, aha, saya tahu kunci rahasia mana pengguna ini 

1287
00:56:37,005 --> 00:56:39,795
 seharusnya menggunakan untuk membuat ini jika itu 

1288
00:56:39,795 --> 00:56:41,345
 adalah, pada kenyataannya, pengguna sebenarnya. 

1289
00:56:41,345 --> 00:56:42,706
 AUDIENCE: Bagus. 

1290
00:56:42,706 --> 00:56:43,205
 BAIK. 

1291
00:56:43,205 --> 00:56:43,929
 Terima kasih. 

1292
00:56:43,929 --> 00:56:46,470
 AUDIENCE: Jadi apa yang mencegah penyerang menemukan kunci? 

1293
00:56:46,470 --> 00:56:47,692
 Di mana kunci rahasia ini? 

1294
00:56:47,692 --> 00:56:49,358
 PROFESOR: Ya, itu pertanyaan yang bagus. 

1295
00:56:49,358 --> 00:56:54,770
 Jadi dalam banyak kasus, klien untuk AWS 

1296
00:56:54,770 --> 00:56:58,150
 bukan browser, tetapi beberapa VM berjalan di cloud, 

1297
00:56:58,150 --> 00:56:59,040
 sebagai contoh. 

1298
00:56:59,040 --> 00:57:02,200
 Jadi Anda akan melihat semacam komunikasi VM dan VM saja. 

1299
00:57:02,200 --> 00:57:06,110
 Anda juga bisa membayangkan, bahwa pengguna 

1300
00:57:06,110 --> 00:57:10,990
 dapat mengurutkan tautan ini atau menyematkannya dalam HTML. 

1301
00:57:10,990 --> 00:57:16,750
 Jadi seperti Anda hanya memiliki semacam ini-- di dalam HTML 

1302
00:57:16,750 --> 00:57:19,240
 atau kode sumber JavaScript, Anda akan memiliki kodenya 

1303
00:57:19,240 --> 00:57:20,549
 untuk membuat permintaan seperti ini. 

1304
00:57:20,549 --> 00:57:22,590
 Jadi itu hampir seperti saya memberi Anda kemampuan. 

1305
00:57:22,590 --> 00:57:24,250
 Jadi jika saya memberi Anda salah satu dari hal-hal ini, 

1306
00:57:24,250 --> 00:57:27,126
 Anda dapat membuat permintaan itu atas nama saya, pada dasarnya. 

1307
00:57:27,126 --> 00:57:28,835
 AUDIENCE: Jadi apakah mungkin untuk digunakan 

1308
00:57:28,835 --> 00:57:32,888
 MAC pada klien normal [TIDAK JELAS]? 

1309
00:57:32,888 --> 00:57:35,000
 PROFESOR: Untuk yang normal-- maksud Anda seperti browser? 

1310
00:57:35,000 --> 00:57:36,470
 AUDIENCE: Untuk pengguna normal. 

1311
00:57:36,470 --> 00:57:38,020
 PROFESOR: Yah, maksud saya, Anda masuk ke dalam pertanyaan-pertanyaan ini 

1312
00:57:38,020 --> 00:57:39,180
 seperti, di mana kunci itu hidup, yang mana 

1313
00:57:39,180 --> 00:57:40,930
 apakah [? seperti apa?] dia bertanya. 

1314
00:57:40,930 --> 00:57:43,712
 Jadi dalam batas tertentu, masalah di mana kunci itu hidup 

1315
00:57:43,712 --> 00:57:45,170
 sebenarnya super, super penting. 

1316
00:57:45,170 --> 00:57:48,010
 Karena jika kunci dapat dicuri semudah cookie, 

1317
00:57:48,010 --> 00:57:50,544
 baik maka kita semacam kembali ke titik awal. 

1318
00:57:50,544 --> 00:57:52,460
 Jadi dalam banyak kasus, hal ini sebenarnya adil, 

1319
00:57:52,460 --> 00:57:54,200
 seperti yang saya katakan, semacam server ke server, 

1320
00:57:54,200 --> 00:57:56,270
 seperti VM ke VM di suatu tempat di awan. 

1321
00:57:56,270 --> 00:57:58,185
 Jadi pengembang aplikasi berjalan 

1322
00:57:58,185 --> 00:58:03,518
 sebuah VM yang mengalihdayakan banyak barang yang disimpan ke AWS. 

1323
00:58:03,518 --> 00:58:06,500
 AUDIENCE: Jadi menurut Anda [tidak terdengar] 

1324
00:58:06,500 --> 00:58:09,979
 tapi bukan seperti itu cara yang buruk mencegah-- 

1325
00:58:09,979 --> 00:58:11,457
 Maksud saya, mereka memiliki latensi jaringan, 

1326
00:58:11,457 --> 00:58:13,623
 jadi tidak bisa terlalu rumit 

1327
00:58:13,623 --> 00:58:14,835
 yang mereka kenakan. 

1328
00:58:14,835 --> 00:58:17,251
 Jika penyerang mengirim permintaan yang sama lagi dengan sangat cepat 

1329
00:58:17,251 --> 00:58:20,120
 setelah pengguna, bukankah mereka dapat [TIDAK JELAS]? 

1330
00:58:20,120 --> 00:58:21,640
 PROFESOR: Ya, ya, ya. 

1331
00:58:21,640 --> 00:58:24,850
 Jadi cukuplah untuk mengatakan bahwa timestamping aman adalah 

1332
00:58:24,850 --> 00:58:27,540
 seperti tesis PhD beberapa orang. 

1333
00:58:27,540 --> 00:58:31,650
 Tapi Anda benar bahwa jika ini - hanya sebagai contoh kasar. 

1334
00:58:31,650 --> 00:58:35,370
 Jadi bayangkan ini baru dikatakan, Senin, 4 Juni. 

1335
00:58:35,370 --> 00:58:38,470
 Lalu jika, entah bagaimana, penyerang bisa mendapatkan akses 

1336
00:58:38,470 --> 00:58:40,040
 untuk seluruh hal ini dan ada 

1337
00:58:40,040 --> 00:58:41,860
 tidak ada yang berbeda tentang itu-- 

1338
00:58:41,860 --> 00:58:44,370
 jadi tidak ada [? mengetuk,?] tidak ada hal-hal acak seperti itu, 

1339
00:58:44,370 --> 00:58:45,120
 Maka itu benar. 

1340
00:58:45,120 --> 00:58:48,770
 Maka permintaan itu bisa menjadi [TIDAK JELAS]. 

1341
00:58:48,770 --> 00:58:51,270
 Sekarang, satu hal yang sebenarnya dilakukan AWS 

1342
00:58:51,270 --> 00:58:53,145
 apakah Anda benar-benar dapat menyertakan kedaluwarsa 

1343
00:58:53,145 --> 00:58:55,610
 tanggal dalam hal-hal ini. 

1344
00:58:55,610 --> 00:58:58,820
 Jadi, satu hal yang benar-benar dapat Anda lakukan adalah 

1345
00:58:58,820 --> 00:59:05,670
 tambahkan semacam bidang Kedaluwarsa, pada dasarnya, 

1346
00:59:05,670 --> 00:59:07,097
 memiliki hal yang ditugaskan. 

1347
00:59:07,097 --> 00:59:09,680
 Kemudian saya dapat menyerahkan referensi itu kepada sekelompok orang yang berbeda. 

1348
00:59:09,680 --> 00:59:11,930
 Jenis seperti yang saya katakan dalam menanggapi pertanyaannya, 

1349
00:59:11,930 --> 00:59:13,730
 itu bertindak sebagai kemampuan. 

1350
00:59:13,730 --> 00:59:15,770
 Server kemudian dapat memeriksa tanggal kedaluwarsa itu 

1351
00:59:15,770 --> 00:59:18,200
 dari ketika itu benar-benar melihatnya dan kemudian tidak actually-- 

1352
00:59:18,200 --> 00:59:19,658
 AUDIENCE: Tetapi bahkan jika tanggal kedaluwarsa 

1353
00:59:19,658 --> 00:59:21,949
 seperti 200 milidetik di masa depan atau sesuatu, seperti 

1354
00:59:21,949 --> 00:59:24,518
 Selama penyerang memiliki latensi [TIDAK JELAS], 

1355
00:59:24,518 --> 00:59:27,920
 maka mereka mungkin mengirim dua [TIDAK TERDENGAR] 

1356
00:59:27,920 --> 00:59:29,684
 dua salinan, bukan satu. 

1357
00:59:29,684 --> 00:59:30,350
 PROFESOR: Ya. 

1358
00:59:30,350 --> 00:59:31,010
 Itu benar sekali. 

1359
00:59:31,010 --> 00:59:31,884
 Itu benar sekali. 

1360
00:59:31,884 --> 00:59:35,090
 Jadi ya, jika penyerang bisa entah bagaimana-- 

1361
00:59:35,090 --> 00:59:36,810
 seperti penyerang jaringan, misalnya, 

1362
00:59:36,810 --> 00:59:39,480
 adalah melihat hal-hal ini melewati kawat-- dan kamu benar. 

1363
00:59:39,480 --> 00:59:43,379
 Jika ada cukup ruang gerak di tanggal kedaluwarsa, 

1364
00:59:43,379 --> 00:59:44,920
 maka mereka bisa melakukan serangan itu. 

1365
00:59:44,920 --> 00:59:47,810
 Betul. 

1366
00:59:47,810 --> 00:59:49,030
 BAIK. 

1367
00:59:49,030 --> 00:59:54,260
 Jadi itu adalah ikhtisar tentang cara kerja cookie tanpa status ini. 

1368
00:59:54,260 --> 00:59:55,900
 Dan satu pertanyaan yang menarik 

1369
00:59:55,900 --> 00:59:58,790
 apakah Anda mungkin berpikir, apa artinya keluar 

1370
00:59:58,790 --> 01:00:00,670
 dengan jenis cookie ini? 

1371
01:00:00,670 --> 01:00:03,455
 Dan jawabannya adalah Anda tidak benar-benar keluar. 

1372
01:00:03,455 --> 01:00:04,880
 Maksud saya, Anda memiliki kunci ini. 

1373
01:00:04,880 --> 01:00:08,210
 Jadi kapan pun Anda ingin mengirim permintaan, Anda cukup mengirimkannya. 

1374
01:00:08,210 --> 01:00:10,254
 Anda termasuk orang ini di sini, 

1375
01:00:10,254 --> 01:00:11,420
 lalu Anda siap untuk pergi. 

1376
01:00:11,420 --> 01:00:13,419
 Sekarang, satu hal yang dapat dilakukan server, misalnya, 

1377
01:00:13,419 --> 01:00:15,660
 meskipun, adalah mencabut kunci Anda. 

1378
01:00:15,660 --> 01:00:17,100
 Jadi server mencabut kunci Anda. 

1379
01:00:17,100 --> 01:00:18,862
 Maka Anda dapat menghasilkan salah satu dari hal-hal ini. 

1380
01:00:18,862 --> 01:00:20,570
 Tetapi ketika Anda mengirim pesan ke sana, 

1381
01:00:20,570 --> 01:00:23,320
 server akan mengatakan, aha, saya tahu apa ID pengguna Anda. 

1382
01:00:23,320 --> 01:00:26,310
 Anda telah dicabut, jadi saya tidak akan menghormati permintaan Anda. 

1383
01:00:26,310 --> 01:00:27,894
 Tapi itu sedikit menarik. 

1384
01:00:27,894 --> 01:00:30,060
 Dan pencabutan, karena kita akan berbicara lebih banyak tentang hal-hal 

1385
01:00:30,060 --> 01:00:34,390
 seperti SSL, selalu merupakan masalah rumit, karena ternyata, 

1386
01:00:34,390 --> 01:00:36,101
 mengambil otoritas dari pengguna manusia 

1387
01:00:36,101 --> 01:00:38,225
 seringkali jauh lebih sulit daripada memberikannya kepada mereka 

1388
01:00:38,225 --> 01:00:40,550
 di tempat pertama. 

1389
01:00:40,550 --> 01:00:44,795
 Jadi itulah ide dasar di balik ini 

1390
01:00:44,795 --> 01:00:46,971
 cookie tanpa negara. 

1391
01:00:46,971 --> 01:00:50,650
 Jadi ada juga beberapa hal lain 

1392
01:00:50,650 --> 01:00:54,030
 yang bisa Anda gunakan jika ingin dihindari 

1393
01:00:54,030 --> 01:00:58,740
 cookie tradisional untuk menerapkan otentikasi. 

1394
01:00:58,740 --> 01:01:00,572
 Jadi, satu hal yang dapat Anda bayangkan lakukan 

1395
01:01:00,572 --> 01:01:17,870
 sebenarnya menggunakan penyimpanan DOM untuk melakukan otentikasi sisi klien 

1396
01:01:17,870 --> 01:01:19,130
 informasi. 

1397
01:01:19,130 --> 01:01:21,713
 Ini mengatakan "alternatif" jika Anda tidak bisa [? Baca itu. ?] 

1398
01:01:21,713 --> 01:01:24,240
 Jadi, satu hal yang dapat Anda lakukan adalah menggunakan penyimpanan DOM 

1399
01:01:24,240 --> 01:01:26,500
 untuk memegang beberapa status sesi itu 

1400
01:01:26,500 --> 01:01:28,729
 bahwa Anda biasanya akan memasukkan cookie. 

1401
01:01:28,729 --> 01:01:30,270
 Jadi jika Anda ingat dari kuliah terakhir, 

1402
01:01:30,270 --> 01:01:33,255
 Penyimpanan DOM pada dasarnya merupakan antarmuka nilai kunci 

1403
01:01:33,255 --> 01:01:36,050
 yang disediakan browser untuk setiap asal. 

1404
01:01:36,050 --> 01:01:39,050
 Jadi Anda bisa mengatakan GET dan PUT di kedua kunci dan eval 

1405
01:01:39,050 --> 01:01:41,654
 [? string. ?] Jadi, Anda bisa membayangkan meletakkan otentikasi 

1406
01:01:41,654 --> 01:01:42,445
 barang-barang di dalam sana. 

1407
01:01:42,445 --> 01:01:47,060
 Sekarang, hal yang baik tentang ini adalah penyimpanan DOM sebenarnya 

1408
01:01:47,060 --> 01:01:49,777
 memiliki aturan yang jauh kurang aneh dengan hormat 

1409
01:01:49,777 --> 01:01:50,860
 ke kebijakan asal yang sama. 

1410
01:01:50,860 --> 01:01:52,605
 Jadi jika itu cookie, Anda bisa melakukannya 

1411
01:01:52,605 --> 01:01:55,040
 semua trik ini dengan subdomain dan hal-hal seperti itu. 

1412
01:01:55,040 --> 01:01:56,410
 Itu agak aneh. 

1413
01:01:56,410 --> 01:02:00,036
 Penyimpanan DOM sebenarnya sangat terikat dengan satu sumber tunggal. 

1414
01:02:00,036 --> 01:02:01,910
 Anda tidak dapat melakukan ekspansi subdomain ini, 

1415
01:02:01,910 --> 01:02:03,070
 semua hal semacam itu. 

1416
01:02:03,070 --> 01:02:05,610
 Dan begitu juga kerangka kerja seperti Meteor menggunakan penyimpanan DOM 

1417
01:02:05,610 --> 01:02:06,510
 untuk alasan ini. 

1418
01:02:06,510 --> 01:02:08,760
 Tetapi sekarang, perhatikan bahwa jika Anda ingin menyimpan autentikasi 

1419
01:02:08,760 --> 01:02:10,450
 informasi dalam penyimpanan DOM, maka Anda 

1420
01:02:10,450 --> 01:02:13,460
 harus menulis kode JavaScript sendiri untuk benar-benar lulus 

1421
01:02:13,460 --> 01:02:15,660
 bahwa informasi otentikasi ke server 

1422
01:02:15,660 --> 01:02:17,451
 untuk melakukan [? enkripsi?] itu perlu 

1423
01:02:17,451 --> 01:02:19,320
 dan seterusnya dan seterusnya. 

1424
01:02:19,320 --> 01:02:20,700
 Jadi itu satu hal yang bisa Anda lakukan. 

1425
01:02:20,700 --> 01:02:24,300
 Hal lain yang bisa Anda lakukan sebenarnya 

1426
01:02:24,300 --> 01:02:28,360
 gunakan sertifikat sisi klien. 

1427
01:02:28,360 --> 01:02:34,510
 Jadi misalnya, seperti format x.509. 

1428
01:02:34,510 --> 01:02:37,240
 Dan apa yang baik tentang sertifikat ini 

1429
01:02:37,240 --> 01:02:40,480
 adalah bahwa, pada dasarnya, JavaScript tidak memiliki antarmuka eksplisit 

1430
01:02:40,480 --> 01:02:41,680
 untuk mengakses hal-hal ini. 

1431
01:02:41,680 --> 01:02:44,233
 Jadi tidak seperti kue, di mana selalu ada perlombaan senjata ini 

1432
01:02:44,233 --> 01:02:47,646
 untuk menemukan bug yang sama-asal yang aneh ini, 

1433
01:02:47,646 --> 01:02:50,830
 tidak ada antarmuka JavaScript eksplisit untuk hal-hal itu. 

1434
01:02:50,830 --> 01:02:53,312
 Jadi itu sangat bagus dari perspektif keamanan. 

1435
01:02:53,312 --> 01:02:55,020
 Satu masalah yang saya sebutkan sangat singkat 

1436
01:02:55,020 --> 01:02:57,145
 yang akan kita lihat lebih detail dalam kuliah nanti 

1437
01:02:57,145 --> 01:02:58,940
 apakah itu pencabutan [? toko ?] 

1438
01:02:58,940 --> 01:03:00,140
 agak sulit untuk ini. 

1439
01:03:00,140 --> 01:03:02,904
 Jadi setelah pengguna keluar dari organisasi Anda, 

1440
01:03:02,904 --> 01:03:04,570
 bagaimana Anda mengambil kembali sertifikat mereka? 

1441
01:03:04,570 --> 01:03:07,380
 Dan itu menjadi sedikit rumit. 

1442
01:03:07,380 --> 01:03:10,014
 Juga, hal-hal ini tidak memiliki kegunaan yang hebat, 

1443
01:03:10,014 --> 01:03:12,180
 karena siapa yang ingin memasang banyak sertifikat 

1444
01:03:12,180 --> 01:03:13,734
 untuk setiap situs yang Anda kunjungi? 

1445
01:03:13,734 --> 01:03:15,900
 Jadi sebagai hasilnya, hal-hal ini memiliki banyak gesekan, 

1446
01:03:15,900 --> 01:03:18,785
 dan ini tidak super populer kecuali di perusahaan 

1447
01:03:18,785 --> 01:03:20,910
 atau organisasi yang super sadar keamanan. 

1448
01:03:20,910 --> 01:03:24,950


1449
01:03:24,950 --> 01:03:25,460
 Baiklah. 

1450
01:03:25,460 --> 01:03:29,860
 Jadi itu menyimpulkan diskusi kita tentang cookie. 

1451
01:03:29,860 --> 01:03:38,130
 Dan sekarang mari kita bicara tentang kerentanan protokol 

1452
01:03:38,130 --> 01:03:39,340
 di tumpukan web. 

1453
01:03:39,340 --> 01:03:45,489


1454
01:03:45,489 --> 01:03:51,520
 Dan satu jenis serangan yang menarik 

1455
01:03:51,520 --> 01:03:55,620
 adalah bahwa ada semua bug ini di jalan 

1456
01:03:55,620 --> 01:03:58,222
 bahwa komponen browser yang berbeda menguraikan URL, 

1457
01:03:58,222 --> 01:03:59,578
 sebagai contoh. 

1458
01:03:59,578 --> 01:04:05,710
 Jadi bagaimana penguraian URL dapat membawa kita ke dalam masalah? 

1459
01:04:05,710 --> 01:04:10,220
 Jadi anggaplah kita memiliki URL yang terlihat seperti ini. 

1460
01:04:10,220 --> 01:04:13,080
 HTTP berasal dari example.com. 

1461
01:04:13,080 --> 01:04:18,150


1462
01:04:18,150 --> 01:04:22,620
 Dan kemudian ada port eksplisit yang menetapkan bahwa itu adalah 80. 

1463
01:04:22,620 --> 01:04:24,710
 Dan kemudian untuk beberapa alasan yang tidak diketahui, 

1464
01:04:24,710 --> 01:04:30,380
 ini menyematkan @ karakter ini di sini. 

1465
01:04:30,380 --> 01:04:34,090
 Jadi pertanyaannya adalah, apa asal mulanya 

1466
01:04:34,090 --> 01:04:37,230
 dari URL khusus ini? 

1467
01:04:37,230 --> 01:04:41,710
 Jadi ternyata, jadi Flash akan 

1468
01:04:41,710 --> 01:04:49,060
 mengatakan bahwa bagian nama host ini adalah example.com. 

1469
01:04:49,060 --> 01:04:55,040
 Namun, ketika peramban akan mem-parsing ini, 

1470
01:04:55,040 --> 01:04:58,980
 itu akan mengatakan bahwa nama host bagian dari asalnya 

1471
01:04:58,980 --> 01:05:00,680
 sebenarnya foo.com. 

1472
01:05:00,680 --> 01:05:03,220
 Jadi ini jelas hal yang buruk, karena sekali Anda 

1473
01:05:03,220 --> 01:05:05,490
 memiliki dua entitas berbeda yang bingung 

1474
01:05:05,490 --> 01:05:07,540
 tentang asal-usul sumber yang sama, 

1475
01:05:07,540 --> 01:05:10,220
 maka Anda bisa masuk ke semua jenis masalah buruk. 

1476
01:05:10,220 --> 01:05:14,717
 Jadi misalnya, kode Flash bisa 

1477
01:05:14,717 --> 01:05:17,530
 menjadi jahat, dapat mengunduh barang dari example.com. 

1478
01:05:17,530 --> 01:05:19,510
 Jika sudah tertanam di halaman dari foo.com, 

1479
01:05:19,510 --> 01:05:22,245
 kemudian bisa melakukan hal-hal jahat di sana. 

1480
01:05:22,245 --> 01:05:23,870
 Dan dibutuhkan beberapa kode dari example.com 

1481
01:05:23,870 --> 01:05:25,460
 dan jalankan dengan otoritas foo.com. 

1482
01:05:25,460 --> 01:05:27,210
 Jadi ada banyak aturan parsing yang rumit 

1483
01:05:27,210 --> 01:05:29,690
 seperti itu yang membuat hidup sangat sulit. 

1484
01:05:29,690 --> 01:05:31,085
 Ini adalah tema yang terus berlanjut. 

1485
01:05:31,085 --> 01:05:34,650
 Seperti, seperti yang baru kita lihat dengan sanitasi konten-- 

1486
01:05:34,650 --> 01:05:37,150
 jadi ide dasar yang seringkali jauh lebih baik 

1487
01:05:37,150 --> 01:05:39,534
 untuk memiliki aturan penguraian yang lebih sederhana untuk hal semacam ini. 

1488
01:05:39,534 --> 01:05:41,200
 Sulit untuk melakukan itu dalam retrospeksi, 

1489
01:05:41,200 --> 01:05:43,380
 karena HTML sudah ada di luar sana. 

1490
01:05:43,380 --> 01:05:45,790
 Jadi semuanya naik ke wob-bulance. 

1491
01:05:45,790 --> 01:05:49,010
 Jadi ini yang berikutnya, ini sebenarnya 

1492
01:05:49,010 --> 01:05:52,215
 kerentanan keamanan favorit saya sepanjang masa. 

1493
01:05:52,215 --> 01:05:54,800


1494
01:05:54,800 --> 01:05:59,730
 Jadi pada dasarnya menyerang cara browser 

1495
01:05:59,730 --> 01:06:03,370
 [? rule 1?] JAR file, pada dasarnya applet Java. 

1496
01:06:03,370 --> 01:06:06,500
 Jadi pada tahun 2007, saya pikir - ya, 2007. 

1497
01:06:06,500 --> 01:06:08,170
 Jadi lifehacker.com-- situs web hebat 

1498
01:06:08,170 --> 01:06:09,280
 jika Anda belum pernah melakukannya. 

1499
01:06:09,280 --> 01:06:11,820
 Lifehacker.com pada dasarnya menjelaskan 

1500
01:06:11,820 --> 01:06:18,330
 bagaimana Anda dapat menanamkan file ZIP di dalam gambar. 

1501
01:06:18,330 --> 01:06:20,190
 Sekarang, tidak jelas siapa yang Anda coba 

1502
01:06:20,190 --> 01:06:21,590
 untuk bersembunyi dengan melakukan ini. 

1503
01:06:21,590 --> 01:06:24,210
 Tapi Lifehacker bilang kamu bisa melakukannya, jadi hore. 

1504
01:06:24,210 --> 01:06:28,480
 Jadi pada dasarnya, apa yang mereka manfaatkan adalah kenyataan 

1505
01:06:28,480 --> 01:06:33,200
 bahwa jika Anda melihat format gambar seperti GIF, misalnya, 

1506
01:06:33,200 --> 01:06:35,530
 biasanya, cara kerja parser adalah parser 

1507
01:06:35,530 --> 01:06:37,807
 bekerja dari atas, bawah. 

1508
01:06:37,807 --> 01:06:39,390
 Sehingga menemukan informasi di header. 

1509
01:06:39,390 --> 01:06:42,710
 Dan kemudian semacam menghitung pada sisa bit di sini. 

1510
01:06:42,710 --> 01:06:48,330
 Sekarang, yang menarik adalah, ternyata, 

1511
01:06:48,330 --> 01:06:51,270
 program yang memanipulasi file ZIP biasanya 

1512
01:06:51,270 --> 01:06:53,215
 bekerja dari bawah ke atas. 

1513
01:06:53,215 --> 01:06:56,250
 Jadi mereka menemukan beberapa informasi di footer file. 

1514
01:06:56,250 --> 01:06:59,400
 Kemudian mereka bekerja untuk mencoba mengekstrak apa yang ada di dalamnya. 

1515
01:06:59,400 --> 01:07:01,030
 Jadi apa kata Lifehacker pada dasarnya 

1516
01:07:01,030 --> 01:07:05,600
 adalah jika Anda ingin menyembunyikan file ZIP pada merger 

1517
01:07:05,600 --> 01:07:11,130
 atau sesuatu seperti ini, maka Anda sebenarnya bisa memposting GIF di sana 

1518
01:07:11,130 --> 01:07:13,290
 yang memiliki file ZIP ini di sini. 

1519
01:07:13,290 --> 01:07:17,170
 Ini akan melewati semua pemeriksaan validasi pada Flickr atau apa pun 

1520
01:07:17,170 --> 01:07:18,160
 sebagai sebuah gambar. 

1521
01:07:18,160 --> 01:07:20,850
 Ini benar-benar akan ditampilkan sebagai gambar di browser Anda. 

1522
01:07:20,850 --> 01:07:23,582
 Aha, tetapi hanya kamu yang tahu kebenaran yang tersembunyi, 

1523
01:07:23,582 --> 01:07:27,380
 bahwa jika Anda mengambil file ini di sini, Anda dapat meneruskannya ke unzip, 

1524
01:07:27,380 --> 01:07:30,364
 dan itu akan meng-unzip informasi [TIDAK TERDENGAR] di sana. 

1525
01:07:30,364 --> 01:07:32,780
 OK, baiklah, sepertinya ini semacam ruang tamu murahan 

1526
01:07:32,780 --> 01:07:33,279
 menipu. 

1527
01:07:33,279 --> 01:07:34,456
 OK, itu bagus. 

1528
01:07:34,456 --> 01:07:36,080
 Sekarang, penyerang, tentu saja, tidak pernah tidur, 

1529
01:07:36,080 --> 01:07:37,371
 dan mereka ingin menghancurkan hidup kita. 

1530
01:07:37,371 --> 01:07:38,660
 Jadi apa yang mereka sadari? 

1531
01:07:38,660 --> 01:07:45,140
 Mereka menyadari bahwa file JAR pada dasarnya adalah turunan 

1532
01:07:45,140 --> 01:07:48,700
 dari format .ZIP. 

1533
01:07:48,700 --> 01:07:50,830
 Jadi ini berarti Anda bisa benar-benar 

1534
01:07:50,830 --> 01:07:53,910
 buat GIF atau gambar yang dimiliki 

1535
01:07:53,910 --> 01:07:56,850
 file JAR, kode JavaScript yang dapat dieksekusi, 

1536
01:07:56,850 --> 01:07:58,360
 di bagian bawahnya. 

1537
01:07:58,360 --> 01:08:02,130
 Jadi orang-orang memanggil serangan ini-- 

1538
01:08:02,130 --> 01:08:05,940
 mereka menyebutnya serangan GIFAR. 

1539
01:08:05,940 --> 01:08:06,910
 [TAWA] 

1540
01:08:06,910 --> 01:08:10,620
 Setengah GIF, setengah JAR, semuanya jahat. 

1541
01:08:10,620 --> 01:08:12,655
 Karena ini luar biasa. 

1542
01:08:12,655 --> 01:08:15,750
 Dan apa artinya ini yang bisa Anda lakukan? 

1543
01:08:15,750 --> 01:08:17,340
 Yah, itu sebenarnya cukup halus. 

1544
01:08:17,340 --> 01:08:18,979
 Karena orang pertama kali menemukan ini, 

1545
01:08:18,979 --> 01:08:20,930
 mereka pikir itu luar biasa, tetapi mereka tidak cukup 

1546
01:08:20,930 --> 01:08:21,888
 tahu bagaimana memanfaatkannya. 

1547
01:08:21,888 --> 01:08:24,310
 Tetapi ternyata, Anda dapat melakukan hal-hal seperti berikut ini. 

1548
01:08:24,310 --> 01:08:26,729
 Jadi pertama-tama, bagaimana Anda membuat salah satu dari hal-hal ini? 

1549
01:08:26,729 --> 01:08:28,170
 Anda hanya menggunakan CAD. 

1550
01:08:28,170 --> 01:08:29,971
 Tidak ada [? tipuan?] 

1551
01:08:29,971 --> 01:08:30,804
 yang harus Anda lakukan. 

1552
01:08:30,805 --> 01:08:33,143
 Ambillah ini, ambil ini, Anda CAD itu. 

1553
01:08:33,143 --> 01:08:34,870
 Boom, Anda punya GIF / JAR. 

1554
01:08:34,870 --> 01:08:36,854
 Jadi setelah Anda memilikinya, apa yang dapat Anda lakukan? 

1555
01:08:36,854 --> 01:08:39,300
 Nah, ada beberapa situs sensitif 

1556
01:08:39,300 --> 01:08:41,950
 yang akan memungkinkan pengguna mengirimkan data, 

1557
01:08:41,950 --> 01:08:43,979
 tetapi bukan jenis data yang sewenang-wenang. 

1558
01:08:43,979 --> 01:08:45,626
 Jadi [TIDAK JELAS] Flickr atau sesuatu 

1559
01:08:45,626 --> 01:08:48,750
 seperti itu, mungkin tidak memungkinkan Anda mengirimkan ActiveX sewenang-wenang 

1560
01:08:48,750 --> 01:08:50,140
 atau apa pun, HTML sewenang-wenang. 

1561
01:08:50,140 --> 01:08:53,439
 Tetapi ini akan memungkinkan Anda mengirimkan gambar. 

1562
01:08:53,439 --> 01:08:56,470
 Jadi apa yang bisa Anda lakukan adalah membangun salah satu dari hal-hal ini, 

1563
01:08:56,470 --> 01:08:58,920
 kirimkan ke salah satu situs sensitif ini 

1564
01:08:58,920 --> 01:09:01,880
 memungkinkan Anda mengirimkan gambar. 

1565
01:09:01,880 --> 01:09:03,140
 Lalu apa yang bisa Anda lakukan? 

1566
01:09:03,140 --> 01:09:06,700
 Nah, hal selanjutnya yang perlu Anda lakukan adalah-- jadi ya, 

1567
01:09:06,700 --> 01:09:10,700
 hal pertama yang Anda lakukan adalah Anda mengirimkan salah satu dari hal-hal ini 

1568
01:09:10,700 --> 01:09:15,149
 ke [yang sensitif? siklus. ?] 

1569
01:09:15,149 --> 01:09:17,129
 Dan kemudian hal selanjutnya yang bisa Anda lakukan 

1570
01:09:17,130 --> 01:09:21,022
 adalah jika Anda memiliki serangan XSS, jika Anda 

1571
01:09:21,022 --> 01:09:23,420
 memiliki kerentanan lintas situs, lalu 

1572
01:09:23,420 --> 01:09:29,330
 Anda dapat menggunakan scripting lintas situs untuk menyuntikkan sesuatu 

1573
01:09:29,330 --> 01:09:30,060
 seperti ini. 

1574
01:09:30,060 --> 01:09:33,100


1575
01:09:33,100 --> 01:09:34,770
 Dan karena manajemen dewan yang buruk, 

1576
01:09:34,770 --> 01:09:37,630
 Saya akan menggambar ini di sini. 

1577
01:09:37,630 --> 01:09:47,890
 Jadi Anda bisa menyuntikkan applet, menulis kode JavaScript yang memiliki, 

1578
01:09:47,890 --> 01:09:53,979
 sebagai sumbernya, Anda hanya mengatakan, cats.gif. 

1579
01:09:53,979 --> 01:09:58,210


1580
01:09:58,210 --> 01:10:00,740
 Dan apa yang menarik tentang ini 

1581
01:10:00,740 --> 01:10:04,490
 adalah kode ini, karena kami menggunakan skrip lintas situs 

1582
01:10:04,490 --> 01:10:07,620
 kerentanan, berjalan dalam konteks situs yang rentan. 

1583
01:10:07,620 --> 01:10:10,600
 Ini telah diunggah ke asal situs yang rentan. 

1584
01:10:10,600 --> 01:10:14,220
 Jadi ini akan lulus tes asal yang sama. 

1585
01:10:14,220 --> 01:10:17,030
 Namun bagaimanapun, kode ini ditentukan oleh penyerang. 

1586
01:10:17,030 --> 01:10:19,130
 Jadi sekarang yang terjadi adalah penyerang itu 

1587
01:10:19,130 --> 01:10:23,130
 menjalankan applet Java dalam konteks korban 

1588
01:10:23,130 --> 01:10:27,290
 situs dengan semua otoritas asal itu 

1589
01:10:27,290 --> 01:10:32,440
 meskipun GIFAR melewati gambar situs yang rentan 

1590
01:10:32,440 --> 01:10:34,182
 Kode validasi. 

1591
01:10:34,182 --> 01:10:35,890
 Karena salah satu dari hal ini akan benar-benar terjadi 

1592
01:10:35,890 --> 01:10:38,660
 parse dengan benar sebagai GIF. 

1593
01:10:38,660 --> 01:10:40,280
 Tetapi ini memiliki kode tersembunyi di sini. 

1594
01:10:40,280 --> 01:10:41,190
 Dan begitu [TIDAK JELAS] ketika browser mencoba 

1595
01:10:41,190 --> 01:10:43,515
 untuk menjalankan bagian JAR itu, sekali lagi, 

1596
01:10:43,515 --> 01:10:45,660
 dimulai dari bawah, muncul di sini, 

1597
01:10:45,660 --> 01:10:47,580
 dan hanya mengabaikan bagian itu. 

1598
01:10:47,580 --> 01:10:49,502
 Jadi ini sebenarnya sangat menakjubkan. 

1599
01:10:49,502 --> 01:10:51,460
 Dan ada beberapa cara yang cukup mudah 

1600
01:10:51,460 --> 01:10:53,520
 kamu bisa memperbaiki sesuatu seperti ini. 

1601
01:10:53,520 --> 01:10:58,490
 Jadi misalnya, Anda benar-benar dapat memiliki applet loader sebenarnya 

1602
01:10:58,490 --> 01:11:01,790
 mengerti bahwa tidak boleh ada sampah acak di sini, 

1603
01:11:01,790 --> 01:11:02,690
 sebagai contoh. 

1604
01:11:02,690 --> 01:11:05,932
 Apa yang terjadi dalam banyak kasus adalah adanya informasi 

1605
01:11:05,932 --> 01:11:08,390
 dalam pepatah metadata, inilah panjangnya sumber daya ini. 

1606
01:11:08,390 --> 01:11:10,852
 Dan kemudian jika dikatakan, panjangnya, berhenti di sini, 

1607
01:11:10,852 --> 01:11:12,810
 mereka hanya akan mengatakan, siapa yang peduli sisanya. 

1608
01:11:12,810 --> 01:11:14,010
 Itu mungkin nol. 

1609
01:11:14,010 --> 01:11:16,070
 Tetapi dalam kasus ini, tidak. 

1610
01:11:16,070 --> 01:11:18,270
 Apa yang saya sukai tentang ini adalah bahwa itu benar-benar 

1611
01:11:18,270 --> 01:11:23,150
 menunjukkan seberapa lebar tumpukan perangkat lunak untuk web. 

1612
01:11:23,150 --> 01:11:27,510
 Jadi semacam mengambil dua format ini, GIF dan kemudian JAR, 

1613
01:11:27,510 --> 01:11:29,510
 kita benar-benar dapat membuat serangan yang benar-benar jahat ini. 

1614
01:11:29,510 --> 01:11:31,315
 Anda benar-benar dapat melakukan ini untuk PDF juga. 

1615
01:11:31,315 --> 01:11:32,232
 Anda dapat menempatkan PDF di sini. 

1616
01:11:32,232 --> 01:11:34,106
 Saya pikir itu disebut, seperti, [itu? PDFR?] 

1617
01:11:34,106 --> 01:11:35,590
 menyerang atau sesuatu seperti ini. 

1618
01:11:35,590 --> 01:11:37,664
 Jadi orang-orang menjalani hari lapangan dengan ini selama sehari. 

1619
01:11:37,664 --> 01:11:39,455
 Kerentanan ini telah ditutup sekarang. 

1620
01:11:39,455 --> 01:11:42,244
 AUDIENCE: Jadi apa yang bisa Anda lakukan dengan serangan ini 

1621
01:11:42,244 --> 01:11:43,660
 yang tidak dapat Anda lakukan dengan [TIDAK JELAS] 

1622
01:11:43,660 --> 01:11:44,530
 XSS atau Anda sendiri [TIDAK JELAS]? 

1623
01:11:44,530 --> 01:11:45,780
 PROFESOR: Jadi apa yang baik - ya, ya. 

1624
01:11:45,780 --> 01:11:46,488
 Pertanyaan yang sangat bagus. 

1625
01:11:46,488 --> 01:11:49,360
 Jadi apa yang baik tentang ini adalah bahwa Java seringkali 

1626
01:11:49,360 --> 01:11:52,660
 bisa lebih kuat daripada hanya menjalankan JavaScript biasa, 

1627
01:11:52,660 --> 01:11:54,460
 karena memiliki aturan yang sedikit berbeda, 

1628
01:11:54,460 --> 01:11:56,740
 [? asal yang sama?] kebijakan dan hal-hal seperti itu. 

1629
01:11:56,740 --> 01:11:58,805
 [TIDAK JELAS] mendapatkan akses yang lebih rendah 

1630
01:11:58,805 --> 01:12:02,270
 ke sistem file atau hal-hal seperti itu. 

1631
01:12:02,270 --> 01:12:04,960
 Tapi Anda benar, bahwa jika Anda bisa melakukan scripting lintas situs, 

1632
01:12:04,960 --> 01:12:07,130
 menjalankan JavaScript sudah sangat merusak. 

1633
01:12:07,130 --> 01:12:08,530
 Tetapi keuntungan utama dari ini adalah, sekali lagi, 

1634
01:12:08,530 --> 01:12:09,710
 berjalan di dalam applet. 

1635
01:12:09,710 --> 01:12:13,600


1636
01:12:13,600 --> 01:12:14,340
 Baiklah. 

1637
01:12:14,340 --> 01:12:14,840
 Ya. 

1638
01:12:14,840 --> 01:12:17,235
 Jadi seperti yang saya katakan, itulah serangan favorit saya sepanjang masa, 

1639
01:12:17,235 --> 01:12:20,330
 terutama karena itu memaksa keamanan yang serius 

1640
01:12:20,330 --> 01:12:23,120
 individu untuk mengatakan GIFAR sepanjang waktu. 

1641
01:12:23,120 --> 01:12:25,830
 Jadi jika Anda gampang terhibur, seperti saya, maka 

1642
01:12:25,830 --> 01:12:28,570
 ini adalah tambang emas bagi Anda. 

1643
01:12:28,570 --> 01:12:31,140
 Jadi, hal lain yang menarik 

1644
01:12:31,140 --> 01:12:36,320
 adalah bahwa sebenarnya ada serangan 

1645
01:12:36,320 --> 01:12:41,230
 yang didasarkan pada suatu waktu. 

1646
01:12:41,230 --> 01:12:44,350
 Jadi Anda mungkin tidak menganggap waktu sebagai sumber daya yang 

1647
01:12:44,350 --> 01:12:46,390
 bisa menjadi vektor untuk serangan. 

1648
01:12:46,390 --> 01:12:51,900
 Tapi ketika saya berdiskusi dengan seseorang beberapa menit yang lalu, 

1649
01:12:51,900 --> 01:12:55,280
 ya, waktu sebenarnya bisa menjadi cara agar sistem dapat dieksploitasi. 

1650
01:12:55,280 --> 01:12:58,925
 Dan begitu serangan ini disebut-- serangan khusus 

1651
01:12:58,925 --> 01:13:00,300
 Saya akan berbicara dengan Anda tentang ini 

1652
01:13:00,300 --> 01:13:04,080
 contoh spesifik dari serangan saluran rahasia. 

1653
01:13:04,080 --> 01:13:07,330


1654
01:13:07,330 --> 01:13:10,390
 Dan ide di balik serangan saluran rahasia 

1655
01:13:10,390 --> 01:13:12,860
 adalah bahwa, pada dasarnya, penyerang 

1656
01:13:12,860 --> 01:13:14,990
 telah menemukan beberapa cara untuk dua aplikasi 

1657
01:13:14,990 --> 01:13:17,100
 untuk bertukar informasi. 

1658
01:13:17,100 --> 01:13:20,900
 Dan vektor pertukaran itu tidak secara resmi disetujui 

1659
01:13:20,900 --> 01:13:21,510
 vektor. 

1660
01:13:21,510 --> 01:13:23,980
 Si penyerang entah bagaimana memanfaatkan beberapa bagian lain 

1661
01:13:23,980 --> 01:13:27,210
 dari sistem untuk menyampaikan sedikit informasi 

1662
01:13:27,210 --> 01:13:29,520
 antara dua entitas yang berbeda. 

1663
01:13:29,520 --> 01:13:33,250
 Jadi contoh yang bagus dari beberapa hal ini 

1664
01:13:33,250 --> 01:13:39,974
 adalah sesuatu yang disebut serangan sniffing berbasis CSS. 

1665
01:13:39,974 --> 01:13:44,270


1666
01:13:44,270 --> 01:13:48,282
 Jadi apa maksud dari serangan ini? 

1667
01:13:48,282 --> 01:13:57,059
 Jadi penyerang memiliki situs web yang dapat dikunjungi pengguna. 

1668
01:13:57,059 --> 01:13:59,100
 Dan sekali lagi, meminta pengguna untuk mengunjungi situs web 

1669
01:13:59,100 --> 01:14:00,891
 sebenarnya biasanya cukup mudah. 

1670
01:14:00,891 --> 01:14:01,560
 Anda membuat iklan. 

1671
01:14:01,560 --> 01:14:03,268
 Anda mengirimi mereka email phising, apa pun. 

1672
01:14:03,268 --> 01:14:06,810
 Jadi penyerang memiliki situs web yang dikunjungi pengguna. 

1673
01:14:06,810 --> 01:14:10,020


1674
01:14:10,020 --> 01:14:16,240
 Dan tujuan dari penyerang adalah belajar 

1675
01:14:16,240 --> 01:14:22,257
 apa situs web lain yang dikunjungi pengguna. 

1676
01:14:22,257 --> 01:14:26,160


1677
01:14:26,160 --> 01:14:29,040
 Dan penyerang mungkin ingin mengetahui ini karena beberapa alasan. 

1678
01:14:29,040 --> 01:14:32,637
 Mungkin mereka mencoba mencari tahu apa jenis istilah pencarian 

1679
01:14:32,637 --> 01:14:33,595
 yang dicari pengguna. 

1680
01:14:33,595 --> 01:14:34,500
 Mungkin mereka mencoba mencari tahu 

1681
01:14:34,500 --> 01:14:36,291
 di mana orang itu bekerja, atau mungkin mereka 

1682
01:14:36,291 --> 01:14:38,620
 ingin tahu apakah mereka telah mengakses beberapa jenis 

1683
01:14:38,620 --> 01:14:41,810
 bahan memalukan, seterusnya dan sebagainya. 

1684
01:14:41,810 --> 01:14:44,220
 Jadi bagaimana penyerang akan melakukannya 

1685
01:14:44,220 --> 01:14:46,630
 bahwa jika satu-satunya hal yang diserang oleh penyerang 

1686
01:14:46,630 --> 01:14:50,130
 adalah situs web yang dia dapat meyakinkan pengguna untuk dikunjungi? 

1687
01:14:50,130 --> 01:14:58,870
 Nah, eksploitnya adalah memanfaatkan warna tautan. 

1688
01:14:58,870 --> 01:15:01,400


1689
01:15:01,400 --> 01:15:03,365
 Jadi, Anda tahu seperti ketika Anda pergi ke halaman web 

1690
01:15:03,365 --> 01:15:05,740
 dan Anda mengeklik tautan, lain kali Anda melihat tautan itu, 

1691
01:15:05,740 --> 01:15:08,260
 sekarang warnanya berbeda. 

1692
01:15:08,260 --> 01:15:11,580
 Jadi zoinks, itu sebenarnya kerentanan keamanan. 

1693
01:15:11,580 --> 01:15:15,325
 Karena itu artinya adalah di situs penyerang ini, 

1694
01:15:15,325 --> 01:15:18,810
 jika penyerang dapat mengelabui Anda agar mengunjunginya, 

1695
01:15:18,810 --> 01:15:22,900
 maka penyerang dapat membuat daftar besar URL kandidat 

1696
01:15:22,900 --> 01:15:25,180
 yang mungkin telah Anda kunjungi dan kemudian 

1697
01:15:25,180 --> 01:15:30,530
 gunakan JavaScript untuk melihat apa warna URL itu. 

1698
01:15:30,530 --> 01:15:34,240
 Dan jika warna URL berwarna ungu, itu berarti, 

1699
01:15:34,240 --> 01:15:37,430
 aha, kamu telah mengunjungi situs itu. 

1700
01:15:37,430 --> 01:15:39,760
 Jadi ini sangat halus. 

1701
01:15:39,760 --> 01:15:41,310
 Dan yang menarik tentang ini 

1702
01:15:41,310 --> 01:15:43,995
 Anda bahkan tidak perlu menampilkan URL dalam banyak kasus 

1703
01:15:43,995 --> 01:15:45,070
 kepada pengguna. 

1704
01:15:45,070 --> 01:15:47,370
 Anda hanya bisa memunculkan sebuah domino itu 

1705
01:15:47,370 --> 01:15:49,585
 memiliki href tertentu dan lihat saja gayanya, 

1706
01:15:49,585 --> 01:15:52,784
 dan kemudian melihat apakah itu memiliki warna yang dikunjungi atau tidak. 

1707
01:15:52,784 --> 01:15:54,200
 Jadi ini sebenarnya cukup halus. 

1708
01:15:54,200 --> 01:15:55,470
 Jadi Anda mungkin berpikir, yah, tidak 

1709
01:15:55,470 --> 01:15:57,600
 itu akan menjadi tidak efisien untuk memindai semua 

1710
01:15:57,600 --> 01:15:59,250
 URL kandidat ini? 

1711
01:15:59,250 --> 01:16:01,340
 Kami dapat melakukan semua jenis pengoptimalan cerdas. 

1712
01:16:01,340 --> 01:16:04,850
 Jadi misalnya, Anda dapat memiliki beberapa kelulusan. 

1713
01:16:04,850 --> 01:16:06,480
 Di operan pertama Anda, Anda hanya bisa 

1714
01:16:06,480 --> 01:16:09,050
 lihat apakah pengguna telah mengunjungi URL tingkat atas-- 

1715
01:16:09,050 --> 01:16:12,340
 cnn.com, Facebook.com, seterusnya dan seterusnya. 

1716
01:16:12,340 --> 01:16:14,030
 Jika jawabannya ya, maka Anda bisa 

1717
01:16:14,030 --> 01:16:17,120
 lakukan pencarian mendalam pertama pada klik tersebut 

1718
01:16:17,120 --> 01:16:18,705
 yang Anda temukan di tingkat atas. 

1719
01:16:18,705 --> 01:16:20,205
 Jadi Anda benar-benar dapat membatasi 

1720
01:16:20,205 --> 01:16:22,410
 ruang pencarian dengan cara ini. 

1721
01:16:22,410 --> 01:16:24,440
 Jadi ini benar-benar lucu juga, 

1722
01:16:24,440 --> 01:16:26,160
 jika Anda memiliki selera humor yang gila, 

1723
01:16:26,160 --> 01:16:30,370
 karena itu menunjukkan bahwa fitur yang sangat tidak berbahaya ini 

1724
01:16:30,370 --> 01:16:32,870
 yang didukung browser - mereka hanya berusaha membantu Anda. 

1725
01:16:32,870 --> 01:16:34,471
 Mereka mencoba mengatakan, hei, buddy, 

1726
01:16:34,471 --> 01:16:34,840
 di sinilah tempat Anda berkunjung. 

1727
01:16:34,840 --> 01:16:37,090
 Ini benar-benar dapat mengungkapkan informasi yang sangat merusak ini. 

1728
01:16:37,090 --> 01:16:39,350
 Jadi apa solusi untuk ini? 

1729
01:16:39,350 --> 01:16:42,680
 Jadi dalam prakteknya, apa browsernya? pelari?] lakukan 

1730
01:16:42,680 --> 01:16:47,240
 adalah bahwa mereka membuatnya sedemikian hingga browser terletak pada JavaScript 

1731
01:16:47,240 --> 01:16:49,440
 tentang warna tautan. 

1732
01:16:49,440 --> 01:16:52,126
 Jadi pada dasarnya, ketika JavaScript mencoba untuk melihat tautan 

1733
01:16:52,126 --> 01:16:56,230
 dan lihat stylingnya, peramban selalu mengatakan, tanpa pemberitahuan. 

1734
01:16:56,230 --> 01:16:56,840
 BAIK. 

1735
01:16:56,840 --> 01:17:00,584
 Jadi sepertinya agak disayangkan, 

1736
01:17:00,584 --> 01:17:01,750
 tetapi mencegah serangan ini. 

1737
01:17:01,750 --> 01:17:03,410
 Jadi saya kira kita bisa hidup dengan itu. 

1738
01:17:03,410 --> 01:17:05,790
 JavaScript tidak bisa membaca warna tautan, eh, tidak 

1739
01:17:05,790 --> 01:17:07,080
 akhir dunia. 

1740
01:17:07,080 --> 01:17:08,950
 Jadi kita sudah selesai? 

1741
01:17:08,950 --> 01:17:11,689
 Apakah ini memperbaiki masalah penyerang 

1742
01:17:11,689 --> 01:17:13,480
 Mampu mencari tahu di mana Anda sudah? 

1743
01:17:13,480 --> 01:17:15,280
 Jawabannya, tentu saja, tidak. 

1744
01:17:15,280 --> 01:17:20,300
 Jadi serangan selanjutnya yang bisa dilakukan penyerang 

1745
01:17:20,300 --> 01:17:24,440
 adalah serangan berbasis cache. 

1746
01:17:24,440 --> 01:17:30,260
 Jadi intuisi di sini adalah, sekali lagi, tujuan 

1747
01:17:30,260 --> 01:17:30,980
 adalah sama. 

1748
01:17:30,980 --> 01:17:32,896
 Penyerang ingin tahu situs apa yang Anda kunjungi. 

1749
01:17:32,896 --> 01:17:34,970
 Vektor exploit adalah informasi itu 

1750
01:17:34,970 --> 01:17:38,270
 yang telah di-cache lebih cepat diakses. 

1751
01:17:38,270 --> 01:17:40,470
 Itu, faktanya, adalah seluruh alasan mengapa Anda menyimpannya 

1752
01:17:40,470 --> 01:17:42,170
 di tempat pertama. 

1753
01:17:42,170 --> 01:17:44,660
 Jadi sekali lagi, penyerang dapat menghasilkan 

1754
01:17:44,660 --> 01:17:47,650
 daftar objek kandidat yang menurut si penyerang 

1755
01:17:47,650 --> 01:17:50,390
 Anda mungkin telah mengunjungi dan kemudian hanya waktu 

1756
01:17:50,390 --> 01:17:53,660
 seberapa cepat benda-benda itu kembali ke penyerang. 

1757
01:17:53,660 --> 01:17:55,525
 Dan jika benda-benda kembali dengan cepat, 

1758
01:17:55,525 --> 01:17:57,150
 kamu tahu [? Anda membutuhkan beberapa?] ambang batas, 

1759
01:17:57,150 --> 01:17:58,565
 penyerang dapat menebak bahwa Anda, pada kenyataannya, memiliki 

1760
01:17:58,565 --> 01:17:59,830
 berkunjung ke objek-objek itu sebelumnya. 

1761
01:17:59,830 --> 01:18:01,740
 Jadi apakah itu masuk akal? 

1762
01:18:01,740 --> 01:18:03,990
 Sekali lagi, browser hanya mencoba membantu Anda. 

1763
01:18:03,990 --> 01:18:07,160
 Tetapi Anda dapat memanfaatkan teknik ini untuk mencari tahu 

1764
01:18:07,160 --> 01:18:09,380
 beberapa pengetahuan jahat. 

1765
01:18:09,380 --> 01:18:10,755
 Dan yang menarik tentang ini 

1766
01:18:10,755 --> 01:18:13,790
 adalah bahwa serangan ini benar-benar dapat memanfaatkan 

1767
01:18:13,790 --> 01:18:17,530
 beberapa informasi lokasi geografis yang sangat menarik. 

1768
01:18:17,530 --> 01:18:22,090
 Jadi bayangkan bahwa kami melakukan serangan di ubin Google Map, 

1769
01:18:22,090 --> 01:18:22,780
 sebagai contoh. 

1770
01:18:22,780 --> 01:18:24,790
 Jadi jika saya mendeteksi bahwa Anda sebenarnya 

1771
01:18:24,790 --> 01:18:26,980
 mengakses serangkaian ubin Google Map, 

1772
01:18:26,980 --> 01:18:29,900
 itu mungkin berarti Anda berada di tempat itu 

1773
01:18:29,900 --> 01:18:31,692
 atau Anda tertarik pada orang lain yang 

1774
01:18:31,692 --> 01:18:32,650
 mungkin di tempat itu. 

1775
01:18:32,650 --> 01:18:36,080
 Jadi itu sebenarnya serangan yang cukup kuat. 

1776
01:18:36,080 --> 01:18:36,610
 Jadi ok. 

1777
01:18:36,610 --> 01:18:39,460
 Jadi bagaimana Anda bisa memperbaiki yang satu ini? 

1778
01:18:39,460 --> 01:18:43,035
 Nah, yang ini tidak begitu jelas. 

1779
01:18:43,035 --> 01:18:45,410
 Anda bisa memiliki situs yang tidak meng-cache apa pun. 

1780
01:18:45,410 --> 01:18:47,150
 Dan kemudian situs Anda akan menjadi lambat. 

1781
01:18:47,150 --> 01:18:48,200
 Jadi itu menyebalkan. 

1782
01:18:48,200 --> 01:18:50,480
 Jadi tidak jelas bagaimana Anda mengatasi ini. 

1783
01:18:50,480 --> 01:18:51,170
 Baiklah. 

1784
01:18:51,170 --> 01:18:53,900
 Anggaplah kita memiliki pertahanan yang kita tempatkan di sini-- 

1785
01:18:53,900 --> 01:18:55,570
 JavaScript tidak dapat membaca warna tautan. 

1786
01:18:55,570 --> 01:18:57,200
 Anggaplah situs itu super 

1787
01:18:57,200 --> 01:19:00,010
 paranoid itu tidak ada cache. 

1788
01:19:00,010 --> 01:19:03,680
 Jadi, apakah kita benar-benar membela diri terhadap serangan ini? 

1789
01:19:03,680 --> 01:19:04,310
 Satu detik. 

1790
01:19:04,310 --> 01:19:06,325
 Jadi jawabannya tidak. 

1791
01:19:06,325 --> 01:19:10,675
 Karena penyerang benar-benar dapat memulai berbasis DNS 

1792
01:19:10,675 --> 01:19:11,175
 serangan. 

1793
01:19:11,175 --> 01:19:14,100


1794
01:19:14,100 --> 01:19:18,510
 Jadi intuisi adalah bahwa bahkan jika Anda tidak menyimpan apa pun, kapan 

1795
01:19:18,510 --> 01:19:21,075
 Anda mengakses sumber daya untuk pertama kalinya, 

1796
01:19:21,075 --> 01:19:23,450
 Anda harus menghasilkan permintaan DNS untuk hosting itu 

1797
01:19:23,450 --> 01:19:25,410
 terkait dengan sumber daya itu. 

1798
01:19:25,410 --> 01:19:27,490
 Jadi sekali lagi, penyerang dapat melihat waktu 

1799
01:19:27,490 --> 01:19:29,590
 dan lihat berapa lama untuk penyerang 

1800
01:19:29,590 --> 01:19:32,420
 untuk mengakses objek kandidat ini yang menurut si penyerang 

1801
01:19:32,420 --> 01:19:33,400
 Anda mungkin telah mengakses. 

1802
01:19:33,400 --> 01:19:36,360
 Dan jika mereka kembali dengan cepat, maka itu 

1803
01:19:36,360 --> 01:19:40,260
 mungkin petunjuk yang bagus bahwa Anda menghasilkan DNS 

1804
01:19:40,260 --> 01:19:42,290
 nama untuk host itu sebelumnya. 

1805
01:19:42,290 --> 01:19:46,120
 Dan ini berfungsi bahkan jika Anda tidak menyimpan cache apa pun, 

1806
01:19:46,120 --> 01:19:49,846
 karena cache DNS hidup dengan OS, bukan dengan browser. 

1807
01:19:49,846 --> 01:19:53,060
 AUDIENCE: Anda telah menyebutkan, saya pikir kelas terakhir, kemampuan 

1808
01:19:53,060 --> 01:19:55,504
 untuk mendapatkan JavaScript untuk mengambil tangkapan layar. 

1809
01:19:55,504 --> 01:19:56,420
 PROFESOR: Ya, ya. 

1810
01:19:56,420 --> 01:19:58,580
 AUDIENCE: Jadi bisakah Anda membuat [? tautan?] 

1811
01:19:58,580 --> 01:20:00,620
 sebagai satu piksel, lalu mengambil tangkapan layar, 

1812
01:20:00,620 --> 01:20:02,234
 dan [TIDAK JELAS] pixel itu? 

1813
01:20:02,234 --> 01:20:02,900
 PROFESOR: Ya. 

1814
01:20:02,900 --> 01:20:04,229
 Yah - jadi kamu bisa. 

1815
01:20:04,229 --> 01:20:06,270
 Jadi rendering barang selalu sedikit rumit, 

1816
01:20:06,270 --> 01:20:07,550
 karena Anda harus memainkan game-game ini. 

1817
01:20:07,550 --> 01:20:08,910
 Jika Anda ingin menunjukkan sesuatu kepada pengguna, 

1818
01:20:08,910 --> 01:20:10,435
 itu harus flash sangat cepat. 

1819
01:20:10,435 --> 01:20:11,915
 Atau mereka mungkin melihat seseorang masuk 

1820
01:20:11,915 --> 01:20:12,874
 daftar besar URL ini. 

1821
01:20:12,874 --> 01:20:13,581
 Tapi kamu benar. 

1822
01:20:13,581 --> 01:20:15,540
 Jika Anda memiliki akses ke API berbagi layar, 

1823
01:20:15,540 --> 01:20:17,040
 banyak hal ini menjadi jauh lebih sederhana. 

1824
01:20:17,040 --> 01:20:20,570
 AUDIENCE: Dan jika Anda hanya memiliki semacam gambar animasi 

1825
01:20:20,570 --> 01:20:23,084
 yang sebagian besar terlihat acak, maka Anda saja 

1826
01:20:23,084 --> 01:20:25,137
 memperhatikan satu piksel itu? 

1827
01:20:25,137 --> 01:20:26,470
 PROFESOR: Anda benar sekali. 

1828
01:20:26,470 --> 01:20:27,570
 Maksudku, secara umum, saya pikir API screen-sharing adalah 

1829
01:20:27,570 --> 01:20:28,800
 ide yang buruk. 

1830
01:20:28,800 --> 01:20:32,320
 Saya bukan presiden dunia, jadi apa yang bisa saya lakukan? 

1831
01:20:32,320 --> 01:20:36,080
 Jadi lagian, jadi serangan berbasis DNS bekerja bahkan jika ada 

1832
01:20:36,080 --> 01:20:38,190
 tidak ada caching yang terjadi. 

1833
01:20:38,190 --> 01:20:38,690
 BAIK. 

1834
01:20:38,690 --> 01:20:40,640
 Jadi sebagai bagian akhir dari perlawanan, 

1835
01:20:40,640 --> 01:20:44,825
 jadi Anda mungkin berpikir, oke, bagaimana jika kita hanya menggunakan alamat IP mentah 

1836
01:20:44,825 --> 01:20:46,600
 untuk semua nama host kami? 

1837
01:20:46,600 --> 01:20:48,260
 Kami tidak menyimpan sesuatu! 

1838
01:20:48,260 --> 01:20:49,020
 BAIK? 

1839
01:20:49,020 --> 01:20:52,700
 Dan kami menjalankan browser yang diperbarui yang tidak terekspos 

1840
01:20:52,700 --> 01:20:54,340
 warna tautan ke JavaScript. 

1841
01:20:54,340 --> 01:20:55,630
 Jadi tentu saja kami baik-baik saja. 

1842
01:20:55,630 --> 01:20:58,100
 Saya di sini untuk memberitahu Anda bahwa Anda tidak baik-baik saja. 

1843
01:20:58,100 --> 01:21:01,390
 Karena apa yang sebenarnya bisa dilakukan penyerang 

1844
01:21:01,390 --> 01:21:03,850
 adalah memanfaatkan serangan render. 

1845
01:21:03,850 --> 01:21:07,200


1846
01:21:07,200 --> 01:21:13,140
 Jadi ide dasarnya di sini adalah biasanya lebih cepat 

1847
01:21:13,140 --> 01:21:16,380
 untuk membuat URL yang telah Anda kunjungi 

1848
01:21:16,380 --> 01:21:18,446
 sebelumnya karena berbagai alasan aneh itu 

1849
01:21:18,446 --> 01:21:20,612
 harus berurusan dengan bagaimana browser [tidak terdengar] render 

1850
01:21:20,612 --> 01:21:21,880
 [TIDAK JELAS] internal. 

1851
01:21:21,880 --> 01:21:24,890
 Dan apa yang dapat dilakukan penyerang sebenarnya 

1852
01:21:24,890 --> 01:21:29,049
 buat iframe kandidat, katakanlah, letakkan beberapa konten di sana 

1853
01:21:29,049 --> 01:21:31,340
 bahwa penyerang mengira Anda telah mengunjungi, dan kemudian 

1854
01:21:31,340 --> 01:21:35,720
 terus melihat apakah penyerang kehilangan akses ke iframe itu. 

1855
01:21:35,720 --> 01:21:38,150
 Karena saat iframe memuat, 

1856
01:21:38,150 --> 01:21:39,840
 peramban biasanya menganggap iframe itu 

1857
01:21:39,840 --> 01:21:42,499
 milik halaman penyerang. 

1858
01:21:42,499 --> 01:21:44,540
 Dan kemudian secepat itu konten asal yang berbeda 

1859
01:21:44,540 --> 01:21:47,195
 masuk, maka Anda akan mulai mendapatkan kesalahan akses ini. 

1860
01:21:47,195 --> 01:21:49,634
 Karena sekarang itu asal yang berbeda [tidak terdengar]. 

1861
01:21:49,634 --> 01:21:51,300
 Jadi sekarang penyerang tidak bisa menyentuh lagi. 

1862
01:21:51,300 --> 01:21:53,750
 Jadi penyerang dapat melakukan hal-hal seperti ini 

1863
01:21:53,750 --> 01:21:56,350
 untuk melihat apakah ada caching, rendering informasi 

1864
01:21:56,350 --> 01:21:59,510
 Browser [INAUDIBLE] untuk situs kandidat ini. 

1865
01:21:59,510 --> 01:22:01,700
 Jadi lagian, jadi itulah satu-satunya harapan dan impian 

1866
01:22:01,700 --> 01:22:03,230
 Saya ingin menindas kamu hari ini. 

1867
01:22:03,230 --> 01:22:05,210
 Saya percaya kita kehabisan waktu. 

1868
01:22:05,210 --> 00:00:00,000
 Tapi aku akan menemuimu lain kali. 

